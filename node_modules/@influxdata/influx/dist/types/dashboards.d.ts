import { View as ViewGen, ViewType, XYViewProperties as XYViewPropertiesGen, LinePlusSingleStatProperties as LinePlusSingleStatPropertiesGen, SingleStatViewProperties as SingleStatViewPropertiesGen, TableViewProperties as TableViewPropertiesGen, GaugeViewProperties as GaugeViewPropertiesGen, HistogramViewProperties as HistogramViewPropertiesGen, HeatmapViewProperties as HeatmapViewPropertiesGen, ScatterViewProperties as ScatterViewPropertiesGen, CheckViewProperties as CheckViewPropertiesGen, RenamableField } from '../api';
export interface View<T extends ViewProperties = ViewProperties> extends ViewGen {
    properties?: T;
    dashboardID?: string;
    cellID?: string;
}
export declare type ViewProperties = XYViewProperties | LinePlusSingleStatProperties | SingleStatViewProperties | TableViewProperties | GaugeViewProperties | MarkdownViewProperties | EmptyViewProperties | HistogramViewProperties | HeatmapViewProperties | ScatterViewProperties | CheckViewProperties;
export interface XYViewProperties extends XYViewPropertiesGen {
    type: ViewType.Xy;
}
export declare type XYView = View<XYViewProperties>;
export interface LinePlusSingleStatProperties extends LinePlusSingleStatPropertiesGen {
    type: ViewType.LinePlusSingleStat;
}
export declare type LinePlusSingleStatView = View<LinePlusSingleStatProperties>;
export interface SingleStatViewProperties extends SingleStatViewPropertiesGen {
    type: ViewType.SingleStat;
}
export declare type SingleStatView = View<SingleStatViewProperties>;
export interface TableViewProperties extends TableViewPropertiesGen {
    type: ViewType.Table;
    tableOptions: TableOptions;
}
export declare type TableView = View<TableViewProperties>;
export interface GaugeViewProperties extends GaugeViewPropertiesGen {
    type: ViewType.Gauge;
}
export declare type GaugeView = View<GaugeViewProperties>;
export interface HistogramViewProperties extends HistogramViewPropertiesGen {
    type: ViewType.Histogram;
}
export declare type HistogramView = View<HistogramViewProperties>;
export interface HeatmapViewProperties extends HeatmapViewPropertiesGen {
    type: ViewType.Heatmap;
}
export declare type HeatmapView = View<HeatmapViewProperties>;
export interface ScatterViewProperties extends ScatterViewPropertiesGen {
    type: ViewType.Scatter;
}
export declare type ScatterView = View<ScatterViewProperties>;
export interface CheckViewProperties extends CheckViewPropertiesGen {
    type: ViewType.Check;
}
export declare type CheckView = View<CheckViewProperties>;
export interface MarkdownViewProperties {
    type: ViewType.Markdown;
    text: string;
}
export declare type MarkdownView = View<MarkdownViewProperties>;
export interface EmptyViewProperties {
    type: ViewType.Empty;
}
export declare type EmptyView = View<EmptyViewProperties>;
export interface TableOptions {
    verticalTimeAxis: boolean;
    sortBy: RenamableField;
    wrapping: TableWrappingType;
    fixFirstColumn: boolean;
}
export declare enum TableWrappingType {
    Truncate = "truncate",
    Wrap = "wrap",
    SingleLine = "single-line"
}
