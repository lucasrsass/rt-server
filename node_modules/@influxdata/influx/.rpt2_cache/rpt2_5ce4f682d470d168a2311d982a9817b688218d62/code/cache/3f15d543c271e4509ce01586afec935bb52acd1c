{"code":"import * as tslib_1 from \"tslib\";\r\nimport { TasksApi, AuthorizationsApi } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nvar addDefaults = function (task) {\r\n    return tslib_1.__assign({}, task, { labels: (task.labels || []).map(addLabelDefaults) });\r\n};\r\nvar addDefaultsToAll = function (tasks) {\r\n    return tasks.map(function (task) { return addDefaults(task); });\r\n};\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new TasksApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.authService = new AuthorizationsApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.create = function (org, script, token) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postTasks({ org: org, flux: script, token: token }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.createByOrgID = function (orgID, script, token) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postTasks({ orgID: orgID, flux: script, token: token }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasksID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var tasks;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasks(undefined, undefined, undefined, undefined, orgID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        tasks = (_a.sent()).data.tasks;\r\n                        return [2, addDefaultsToAll(tasks || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAllByOrg = function (org) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var tasks;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasks(undefined, undefined, undefined, org, undefined, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        tasks = (_a.sent()).data.tasks;\r\n                        return [2, addDefaultsToAll(tasks || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAllByUser = function (user) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasks(undefined, undefined, user.id, undefined, undefined, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaultsToAll(data.tasks || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, updates) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, updated;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        if (!!updates.cron) {\r\n                            delete original.every;\r\n                        }\r\n                        if (!!updates.every) {\r\n                            delete original.cron;\r\n                        }\r\n                        return [4, this.service.patchTasksID(id, tslib_1.__assign({}, original, updates), undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        updated = (_a.sent()).data;\r\n                        return [2, addDefaults(updated)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.updateStatus = function (id, status) {\r\n        return this.update(id, { status: status });\r\n    };\r\n    default_1.prototype.updateScript = function (id, script) {\r\n        return this.update(id, { flux: script });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteTasksID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabel = function (taskID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postTasksIDLabels(taskID, {\r\n                            labelID: labelID,\r\n                        }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (!data.label) {\r\n                            throw new Error('Failed to add label');\r\n                        }\r\n                        return [2, addLabelDefaults(data.label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabel = function (taskID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteTasksIDLabelsID(taskID, labelID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabels = function (taskID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.addLabel(taskID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    default_1.prototype.removeLabels = function (taskID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.removeLabel(taskID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    default_1.prototype.getRunsByTaskID = function (taskID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var runs;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasksIDRuns(taskID, undefined, undefined, undefined, undefined, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        runs = (_a.sent()).data.runs;\r\n                        return [2, runs || []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.startRunByTaskID = function (taskID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postTasksIDRuns(taskID, undefined, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getLogEventsByRunID = function (taskID, runID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var events;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTasksIDRunsIDLogs(taskID, runID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        events = (_a.sent()).data.events;\r\n                        return [2, events || []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.clone = function (taskID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, data, createdTask;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(taskID)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        return [4, this.authService.getAuthorizationsID(original.authorizationID || '')];\r\n                    case 2:\r\n                        data = (_a.sent()).data;\r\n                        return [4, this.create(original.org || '', original.flux, data.token || '')];\r\n                    case 3:\r\n                        createdTask = _a.sent();\r\n                        if (!createdTask || !createdTask.id) {\r\n                            throw new Error('Could not create task');\r\n                        }\r\n                        return [4, this.cloneLabels(original, createdTask)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2, this.get(createdTask.id)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.cloneLabels = function (originalTask, newTask) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var labels, pendingLabels, newLabels;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!newTask || !newTask.id) {\r\n                            throw new Error('Cannot create labels on invalid task');\r\n                        }\r\n                        labels = originalTask.labels || [];\r\n                        pendingLabels = labels.map(function (label) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\r\n                            return [2, this.addLabel(newTask.id || '', label.id || '')];\r\n                        }); }); });\r\n                        return [4, Promise.all(pendingLabels)];\r\n                    case 1:\r\n                        newLabels = _a.sent();\r\n                        return [2, newLabels.filter(function (l) { return !!l; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/tasks.d.ts","writeByteOrderMark":false,"text":"import { LogEvent, Run, Task, User } from '../api';\r\nimport { ILabel, ITask, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private authService;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    create(org: string, script: string, token: string): Promise<ITask>;\r\n    createByOrgID(orgID: string, script: string, token: string): Promise<ITask>;\r\n    get(id: string): Promise<ITask>;\r\n    getAll(orgID?: string): Promise<ITask[]>;\r\n    getAllByOrg(org: string): Promise<ITask[]>;\r\n    getAllByUser(user: User): Promise<ITask[]>;\r\n    update(id: string, updates: Partial<Task>): Promise<ITask>;\r\n    updateStatus(id: string, status: Task.StatusEnum): Promise<Task>;\r\n    updateScript(id: string, script: string): Promise<ITask>;\r\n    delete(id: string): Promise<Response>;\r\n    addLabel(taskID: string, labelID: string): Promise<ILabel>;\r\n    removeLabel(taskID: string, labelID: string): Promise<Response>;\r\n    addLabels(taskID: string, labelIDs: string[]): Promise<ILabel[]>;\r\n    removeLabels(taskID: string, labelIDs: string[]): Promise<Response[]>;\r\n    getRunsByTaskID(taskID: string): Promise<Run[]>;\r\n    startRunByTaskID(taskID: string): Promise<Run>;\r\n    getLogEventsByRunID(taskID: string, runID: string): Promise<LogEvent[]>;\r\n    clone(taskID: string): Promise<ITask>;\r\n    private cloneLabels;\r\n}\r\n"}}
