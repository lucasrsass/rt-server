{"code":"import * as tslib_1 from \"tslib\";\r\nimport { LabelsApi } from '../api';\r\nimport saga from '../utils/sagas';\r\nvar DEFAULT_LABEL_COLOR = '#326BBA';\r\nexport var addLabelDefaults = function (l) { return (tslib_1.__assign({}, l, { properties: tslib_1.__assign({}, l.properties, { color: (l.properties || {}).color || DEFAULT_LABEL_COLOR, description: (l.properties || {}).description || '' }) })); };\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new LabelsApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var label;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getLabelsID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        label = (_a.sent()).data.label;\r\n                        if (!label) {\r\n                            throw new Error('Failed to get label');\r\n                        }\r\n                        return [2, addLabelDefaults(label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var labels;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getLabels(undefined, orgID, this.serviceOptions)];\r\n                    case 1:\r\n                        labels = (_a.sent()).data.labels;\r\n                        return [2, (labels || []).map(addLabelDefaults)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (request) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var label;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postLabels(request, this.serviceOptions)];\r\n                    case 1:\r\n                        label = (_a.sent()).data.label;\r\n                        if (!label) {\r\n                            throw new Error('Failed to create label');\r\n                        }\r\n                        return [2, addLabelDefaults(label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.createAll = function (labels) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pendingLabels;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pendingLabels = labels.map(function (r) {\r\n                            return {\r\n                                action: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        switch (_a.label) {\r\n                                            case 0: return [4, this.create(r)];\r\n                                            case 1: return [2, _a.sent()];\r\n                                        }\r\n                                    });\r\n                                }); },\r\n                                rollback: function (r) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        if (r && r.id) {\r\n                                            this.delete(r.id);\r\n                                        }\r\n                                        return [2];\r\n                                    });\r\n                                }); },\r\n                            };\r\n                        });\r\n                        return [4, saga(pendingLabels)];\r\n                    case 1: return [2, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, updates) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, label;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        return [4, this.service.patchLabelsID(id, tslib_1.__assign({}, original, updates), undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        label = (_a.sent()).data.label;\r\n                        if (!label) {\r\n                            throw new Error('Failed to update label');\r\n                        }\r\n                        return [2, addLabelDefaults(label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteLabelsID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/utils/sagas.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/labels.d.ts","writeByteOrderMark":false,"text":"import { Label as APILabel } from '../api';\r\nimport { ILabel, ServiceOptions } from '../types';\r\nimport { ILabelProperties } from '../types';\r\nexport declare const addLabelDefaults: (l: APILabel) => ILabel;\r\nexport default class {\r\n    private service;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    get(id: string): Promise<ILabel>;\r\n    getAll(orgID: string): Promise<ILabel[]>;\r\n    create(request: {\r\n        orgID: string;\r\n        name: string;\r\n        properties: ILabelProperties;\r\n    }): Promise<ILabel>;\r\n    createAll(labels: {\r\n        orgID: string;\r\n        name: string;\r\n        properties: ILabelProperties;\r\n    }[]): Promise<ILabel[]>;\r\n    update(id: string, updates: Partial<ILabel>): Promise<ILabel>;\r\n    delete(id: string): Promise<Response>;\r\n}\r\n"}}
