{"code":"import * as tslib_1 from \"tslib\";\r\nimport { TelegrafsApi } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nimport saga from '../utils/sagas';\r\nvar addDefaults = function (telegraf) {\r\n    return tslib_1.__assign({}, telegraf, { labels: (telegraf.labels || []).map(addLabelDefaults) });\r\n};\r\nvar addDefaultsToAll = function (telegrafs) {\r\n    return telegrafs.map(function (telegraf) { return addDefaults(telegraf); });\r\n};\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new TelegrafsApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.getAll = function (orgID) {\r\n        if (orgID === void 0) { orgID = ''; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configurations;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTelegrafs(undefined, orgID, this.serviceOptions)];\r\n                    case 1:\r\n                        configurations = (_a.sent()).data.configurations;\r\n                        return [2, addDefaultsToAll(configurations || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAllByOrg = function (org) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var configurations;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!org.id) {\r\n                            throw new Error('organization must have an id');\r\n                        }\r\n                        return [4, this.service.getTelegrafs(undefined, org.id, this.serviceOptions)];\r\n                    case 1:\r\n                        configurations = (_a.sent()).data.configurations;\r\n                        return [2, addDefaultsToAll(configurations || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getTOML = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTelegrafsID(id, undefined, 'application/toml')];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getTelegrafsID(id, undefined, 'application/json')];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postTelegrafs(props, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, update, updated;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        update = tslib_1.__assign({}, original, props);\r\n                        return [4, this.service.putTelegrafsID(id, update, undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        updated = (_a.sent()).data;\r\n                        return [2, addDefaults(updated)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteTelegrafsID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabel = function (id, label) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!label.id) {\r\n                            throw new Error('label must have id');\r\n                        }\r\n                        return [4, this.service.postTelegrafsIDLabels(id, {\r\n                                labelID: label.id,\r\n                            }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (!data.label) {\r\n                            throw new Error('Failed to add label');\r\n                        }\r\n                        return [2, addLabelDefaults(data.label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabel = function (id, label) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!label.id) {\r\n                            throw new Error('label must have id');\r\n                        }\r\n                        return [4, this.service.deleteTelegrafsIDLabelsID(id, label.id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabels = function (id, labels) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pendingLabels;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pendingLabels = labels.map(function (l) {\r\n                            return {\r\n                                action: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        switch (_a.label) {\r\n                                            case 0: return [4, this.addLabel(id, l)];\r\n                                            case 1: return [2, _a.sent()];\r\n                                        }\r\n                                    });\r\n                                }); },\r\n                                rollback: function (r) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        if (r && r.id) {\r\n                                            this.removeLabel(id, r);\r\n                                        }\r\n                                        return [2];\r\n                                    });\r\n                                }); },\r\n                            };\r\n                        });\r\n                        return [4, saga(pendingLabels)];\r\n                    case 1: return [2, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabels = function (id, labels) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var promises;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                promises = labels.map(function (l) { return _this.removeLabel(id, l); });\r\n                return [2, Promise.all(promises)];\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/utils/sagas.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/telegrafConfigs.d.ts","writeByteOrderMark":false,"text":"import { Organization, Telegraf } from '../api';\r\nimport { ILabel, ITelegraf, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    getAll(orgID?: string): Promise<ITelegraf[]>;\r\n    getAllByOrg(org: Organization): Promise<ITelegraf[]>;\r\n    getTOML(id: string): Promise<string>;\r\n    get(id: string): Promise<ITelegraf>;\r\n    create(props: Telegraf): Promise<ITelegraf>;\r\n    update(id: string, props: Partial<Telegraf>): Promise<ITelegraf>;\r\n    delete(id: string): Promise<Response>;\r\n    addLabel(id: string, label: ILabel): Promise<ILabel>;\r\n    removeLabel(id: string, label: ILabel): Promise<Response>;\r\n    addLabels(id: string, labels: ILabel[]): Promise<ILabel[]>;\r\n    removeLabels(id: string, labels: ILabel[]): Promise<Response[]>;\r\n}\r\n"}}
