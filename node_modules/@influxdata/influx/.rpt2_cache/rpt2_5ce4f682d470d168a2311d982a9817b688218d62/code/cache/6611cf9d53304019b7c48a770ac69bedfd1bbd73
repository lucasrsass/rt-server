{"code":"import * as tslib_1 from \"tslib\";\r\nimport { CellsApi, DashboardsApi, } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nimport saga from '../utils/sagas';\r\nvar addDefaults = function (dashboard) {\r\n    return tslib_1.__assign({}, dashboard, { cells: dashboard.cells || [], id: dashboard.id || '', labels: (dashboard.labels || []).map(addLabelDefaults), name: dashboard.name || '', orgID: dashboard.orgID || '' });\r\n};\r\nvar addDefaultsToAll = function (dashboards) {\r\n    return dashboards.map(function (dashboard) { return addDefaults(dashboard); });\r\n};\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.cellsService = new CellsApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.service = new DashboardsApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDashboardsID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDashboards(undefined, undefined, undefined, undefined, orgID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaultsToAll(data.dashboards || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postDashboards(props, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        return [4, this.service.patchDashboardsID(id, tslib_1.__assign({}, original, props), undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteDashboardsID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.deleteCell = function (dashboardID, cellID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.cellsService.deleteDashboardsIDCellsID(dashboardID, cellID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        response = (_a.sent()).data;\r\n                        return [2, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.createCell = function (dashboardID, cell) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.cellsService.postDashboardsIDCells(dashboardID, cell, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.updateAllCells = function (dashboardID, cells) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.cellsService.putDashboardsIDCells(dashboardID, cells, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data.cells || []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabel = function (dashboardID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postDashboardsIDLabels(dashboardID, {\r\n                            labelID: labelID,\r\n                        }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (!data.label) {\r\n                            throw new Error('Failed to add label');\r\n                        }\r\n                        return [2, addLabelDefaults(data.label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabels = function (dashboardID, labelIDs) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pendingLabels;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pendingLabels = labelIDs.map(function (l) {\r\n                            return {\r\n                                action: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        switch (_a.label) {\r\n                                            case 0: return [4, this.addLabel(dashboardID, l)];\r\n                                            case 1: return [2, _a.sent()];\r\n                                        }\r\n                                    });\r\n                                }); },\r\n                                rollback: function (r) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        if (r && r.id) {\r\n                                            this.removeLabel(dashboardID, r.id);\r\n                                        }\r\n                                        return [2];\r\n                                    });\r\n                                }); },\r\n                            };\r\n                        });\r\n                        return [4, saga(pendingLabels)];\r\n                    case 1: return [2, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabel = function (dashboardID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteDashboardsIDLabelsID(dashboardID, labelID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabels = function (dashboardID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.removeLabel(dashboardID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    default_1.prototype.getView = function (dashboardID, cellID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDashboardsIDCellsIDView(dashboardID, cellID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.updateView = function (dashboardID, cellID, view) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.patchDashboardsIDCellsIDView(dashboardID, cellID, view, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.clone = function (dashboardID, cloneName, orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, name, description, dashboardWithoutCells, createdDashboard;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(dashboardID)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        name = original.name, description = original.description;\r\n                        dashboardWithoutCells = { name: name, description: description, orgID: orgID };\r\n                        return [4, this.create(tslib_1.__assign({}, dashboardWithoutCells, { name: cloneName }))];\r\n                    case 2:\r\n                        createdDashboard = _a.sent();\r\n                        if (!createdDashboard || !createdDashboard.id) {\r\n                            throw new Error('Could not create dashboard');\r\n                        }\r\n                        return [4, this.cloneViews(original, createdDashboard)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [4, this.cloneLabels(original, createdDashboard)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2, this.get(createdDashboard.id)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.cloneLabels = function (originalDashboard, newDashboard) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var labels, newLabels;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!newDashboard || !newDashboard.id) {\r\n                            throw new Error('Cannot create labels on invalid dashboard');\r\n                        }\r\n                        labels = originalDashboard.labels || [];\r\n                        return [4, this.addLabels(newDashboard.id, labels.map(function (label) { return label.id || ''; }))];\r\n                    case 1:\r\n                        newLabels = _a.sent();\r\n                        return [2, newLabels.filter(function (l) { return !!l; }).map(addLabelDefaults)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.cloneViews = function (originalDashboard, newDashboard) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var cells, pendingViews, views, pendingUpdatedViews, newViews;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!newDashboard || !newDashboard.id) {\r\n                            throw new Error('Cannot create views on invalid dashboard');\r\n                        }\r\n                        cells = originalDashboard.cells || [];\r\n                        pendingViews = cells.map(function (c) {\r\n                            return _this.getView(originalDashboard.id || '', c.id || '');\r\n                        });\r\n                        return [4, Promise.all(pendingViews)];\r\n                    case 1:\r\n                        views = _a.sent();\r\n                        pendingUpdatedViews = views.map(function (view) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                            var cell, newCell;\r\n                            return tslib_1.__generator(this, function (_a) {\r\n                                switch (_a.label) {\r\n                                    case 0:\r\n                                        cell = cells.find(function (c) { return c.id === view.id; });\r\n                                        if (!(cell && newDashboard.id)) return [3, 2];\r\n                                        return [4, this.createCell(newDashboard.id, cell)];\r\n                                    case 1:\r\n                                        newCell = _a.sent();\r\n                                        if (newCell && newCell.id) {\r\n                                            return [2, this.updateView(newDashboard.id, newCell.id, view)];\r\n                                        }\r\n                                        _a.label = 2;\r\n                                    case 2: return [2];\r\n                                }\r\n                            });\r\n                        }); });\r\n                        return [4, Promise.all(pendingUpdatedViews)];\r\n                    case 2:\r\n                        newViews = _a.sent();\r\n                        return [2, newViews.filter(function (v) { return !!v; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/utils/sagas.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/dashboards.d.ts","writeByteOrderMark":false,"text":"import { Cell, CreateDashboardRequest, Dashboard, View } from '../api';\r\nimport { IDashboard, ILabel, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private cellsService;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    get(id: string): Promise<IDashboard>;\r\n    getAll(orgID?: string): Promise<IDashboard[]>;\r\n    create(props: CreateDashboardRequest): Promise<IDashboard>;\r\n    update(id: string, props: Partial<Dashboard>): Promise<IDashboard>;\r\n    delete(id: string): Promise<Response>;\r\n    deleteCell(dashboardID: string, cellID: string): Promise<Response>;\r\n    createCell(dashboardID: string, cell: Cell): Promise<Cell>;\r\n    updateAllCells(dashboardID: string, cells: Cell[]): Promise<Cell[]>;\r\n    addLabel(dashboardID: string, labelID: string): Promise<ILabel>;\r\n    addLabels(dashboardID: string, labelIDs: string[]): Promise<ILabel[]>;\r\n    removeLabel(dashboardID: string, labelID: string): Promise<Response>;\r\n    removeLabels(dashboardID: string, labelIDs: string[]): Promise<Response[]>;\r\n    getView(dashboardID: string, cellID: string): Promise<View>;\r\n    updateView(dashboardID: string, cellID: string, view: Partial<View>): Promise<View>;\r\n    clone(dashboardID: string, cloneName: string, orgID: string): Promise<IDashboard | null>;\r\n    private cloneLabels;\r\n    private cloneViews;\r\n}\r\n"}}
