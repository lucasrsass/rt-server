{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as url from \"url\";\r\nimport globalAxios from 'axios';\r\nvar BASE_PATH = \"http://localhost/api/v2\".replace(/\\/+$/, \"\");\r\nexport var COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\nvar BaseAPI = (function () {\r\n    function BaseAPI(configuration, basePath, axios) {\r\n        if (basePath === void 0) { basePath = BASE_PATH; }\r\n        if (axios === void 0) { axios = globalAxios; }\r\n        this.basePath = basePath;\r\n        this.axios = axios;\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n    return BaseAPI;\r\n}());\r\nexport { BaseAPI };\r\n;\r\nvar RequiredError = (function (_super) {\r\n    tslib_1.__extends(RequiredError, _super);\r\n    function RequiredError(field, msg) {\r\n        var _this = _super.call(this, msg) || this;\r\n        _this.field = field;\r\n        _this.name = \"RequiredError\";\r\n        return _this;\r\n    }\r\n    return RequiredError;\r\n}(Error));\r\nexport { RequiredError };\r\nexport var AuthorizationUpdateRequest;\r\n(function (AuthorizationUpdateRequest) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = AuthorizationUpdateRequest.StatusEnum || (AuthorizationUpdateRequest.StatusEnum = {}));\r\n})(AuthorizationUpdateRequest || (AuthorizationUpdateRequest = {}));\r\nexport var BucketRetentionRules;\r\n(function (BucketRetentionRules) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Expire\"] = \"expire\";\r\n    })(TypeEnum = BucketRetentionRules.TypeEnum || (BucketRetentionRules.TypeEnum = {}));\r\n})(BucketRetentionRules || (BucketRetentionRules = {}));\r\nexport var CheckBase;\r\n(function (CheckBase) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = CheckBase.StatusEnum || (CheckBase.StatusEnum = {}));\r\n})(CheckBase || (CheckBase = {}));\r\nexport var CheckStatusLevel;\r\n(function (CheckStatusLevel) {\r\n    CheckStatusLevel[\"UNKNOWN\"] = \"UNKNOWN\";\r\n    CheckStatusLevel[\"OK\"] = \"OK\";\r\n    CheckStatusLevel[\"INFO\"] = \"INFO\";\r\n    CheckStatusLevel[\"CRIT\"] = \"CRIT\";\r\n    CheckStatusLevel[\"WARN\"] = \"WARN\";\r\n})(CheckStatusLevel || (CheckStatusLevel = {}));\r\nexport var CheckType;\r\n(function (CheckType) {\r\n    CheckType[\"Deadman\"] = \"deadman\";\r\n    CheckType[\"Threshold\"] = \"threshold\";\r\n})(CheckType || (CheckType = {}));\r\nexport var CheckViewProperties;\r\n(function (CheckViewProperties) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Check\"] = \"check\";\r\n    })(TypeEnum = CheckViewProperties.TypeEnum || (CheckViewProperties.TypeEnum = {}));\r\n})(CheckViewProperties || (CheckViewProperties = {}));\r\nexport var ConstantVariableProperties;\r\n(function (ConstantVariableProperties) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Constant\"] = \"constant\";\r\n    })(TypeEnum = ConstantVariableProperties.TypeEnum || (ConstantVariableProperties.TypeEnum = {}));\r\n})(ConstantVariableProperties || (ConstantVariableProperties = {}));\r\nexport var DashboardColor;\r\n(function (DashboardColor) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Min\"] = \"min\";\r\n        TypeEnum[\"Max\"] = \"max\";\r\n        TypeEnum[\"Threshold\"] = \"threshold\";\r\n    })(TypeEnum = DashboardColor.TypeEnum || (DashboardColor.TypeEnum = {}));\r\n})(DashboardColor || (DashboardColor = {}));\r\nexport var Dialect;\r\n(function (Dialect) {\r\n    var AnnotationsEnum;\r\n    (function (AnnotationsEnum) {\r\n        AnnotationsEnum[\"Group\"] = \"group\";\r\n        AnnotationsEnum[\"Datatype\"] = \"datatype\";\r\n        AnnotationsEnum[\"Default\"] = \"default\";\r\n    })(AnnotationsEnum = Dialect.AnnotationsEnum || (Dialect.AnnotationsEnum = {}));\r\n    var DateTimeFormatEnum;\r\n    (function (DateTimeFormatEnum) {\r\n        DateTimeFormatEnum[\"RFC3339\"] = \"RFC3339\";\r\n        DateTimeFormatEnum[\"RFC3339Nano\"] = \"RFC3339Nano\";\r\n    })(DateTimeFormatEnum = Dialect.DateTimeFormatEnum || (Dialect.DateTimeFormatEnum = {}));\r\n})(Dialect || (Dialect = {}));\r\nexport var EmptyViewProperties;\r\n(function (EmptyViewProperties) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Empty\"] = \"empty\";\r\n    })(TypeEnum = EmptyViewProperties.TypeEnum || (EmptyViewProperties.TypeEnum = {}));\r\n})(EmptyViewProperties || (EmptyViewProperties = {}));\r\nexport var Field;\r\n(function (Field) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Func\"] = \"func\";\r\n        TypeEnum[\"Field\"] = \"field\";\r\n        TypeEnum[\"Integer\"] = \"integer\";\r\n        TypeEnum[\"Number\"] = \"number\";\r\n        TypeEnum[\"Regex\"] = \"regex\";\r\n        TypeEnum[\"Wildcard\"] = \"wildcard\";\r\n    })(TypeEnum = Field.TypeEnum || (Field.TypeEnum = {}));\r\n})(Field || (Field = {}));\r\nexport var HealthCheck;\r\n(function (HealthCheck) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Pass\"] = \"pass\";\r\n        StatusEnum[\"Fail\"] = \"fail\";\r\n    })(StatusEnum = HealthCheck.StatusEnum || (HealthCheck.StatusEnum = {}));\r\n})(HealthCheck || (HealthCheck = {}));\r\nexport var Legend;\r\n(function (Legend) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Static\"] = \"static\";\r\n    })(TypeEnum = Legend.TypeEnum || (Legend.TypeEnum = {}));\r\n    var OrientationEnum;\r\n    (function (OrientationEnum) {\r\n        OrientationEnum[\"Top\"] = \"top\";\r\n        OrientationEnum[\"Bottom\"] = \"bottom\";\r\n        OrientationEnum[\"Left\"] = \"left\";\r\n        OrientationEnum[\"Right\"] = \"right\";\r\n    })(OrientationEnum = Legend.OrientationEnum || (Legend.OrientationEnum = {}));\r\n})(Legend || (Legend = {}));\r\nexport var LevelRule;\r\n(function (LevelRule) {\r\n    var OperationEnum;\r\n    (function (OperationEnum) {\r\n        OperationEnum[\"Equal\"] = \"equal\";\r\n        OperationEnum[\"Notequal\"] = \"notequal\";\r\n    })(OperationEnum = LevelRule.OperationEnum || (LevelRule.OperationEnum = {}));\r\n})(LevelRule || (LevelRule = {}));\r\nexport var LineProtocolError;\r\n(function (LineProtocolError) {\r\n    var CodeEnum;\r\n    (function (CodeEnum) {\r\n        CodeEnum[\"InternalError\"] = \"internal error\";\r\n        CodeEnum[\"NotFound\"] = \"not found\";\r\n        CodeEnum[\"Conflict\"] = \"conflict\";\r\n        CodeEnum[\"Invalid\"] = \"invalid\";\r\n        CodeEnum[\"EmptyValue\"] = \"empty value\";\r\n        CodeEnum[\"Unavailable\"] = \"unavailable\";\r\n    })(CodeEnum = LineProtocolError.CodeEnum || (LineProtocolError.CodeEnum = {}));\r\n})(LineProtocolError || (LineProtocolError = {}));\r\nexport var LineProtocolLengthError;\r\n(function (LineProtocolLengthError) {\r\n    var CodeEnum;\r\n    (function (CodeEnum) {\r\n        CodeEnum[\"Invalid\"] = \"invalid\";\r\n    })(CodeEnum = LineProtocolLengthError.CodeEnum || (LineProtocolLengthError.CodeEnum = {}));\r\n})(LineProtocolLengthError || (LineProtocolLengthError = {}));\r\nexport var LogViewProperties;\r\n(function (LogViewProperties) {\r\n    var ShapeEnum;\r\n    (function (ShapeEnum) {\r\n        ShapeEnum[\"ChronografV2\"] = \"chronograf-v2\";\r\n    })(ShapeEnum = LogViewProperties.ShapeEnum || (LogViewProperties.ShapeEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"LogViewer\"] = \"log-viewer\";\r\n    })(TypeEnum = LogViewProperties.TypeEnum || (LogViewProperties.TypeEnum = {}));\r\n})(LogViewProperties || (LogViewProperties = {}));\r\nexport var MapVariableProperties;\r\n(function (MapVariableProperties) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Map\"] = \"map\";\r\n    })(TypeEnum = MapVariableProperties.TypeEnum || (MapVariableProperties.TypeEnum = {}));\r\n})(MapVariableProperties || (MapVariableProperties = {}));\r\nexport var ModelError;\r\n(function (ModelError) {\r\n    var CodeEnum;\r\n    (function (CodeEnum) {\r\n        CodeEnum[\"InternalError\"] = \"internal error\";\r\n        CodeEnum[\"NotFound\"] = \"not found\";\r\n        CodeEnum[\"Conflict\"] = \"conflict\";\r\n        CodeEnum[\"Invalid\"] = \"invalid\";\r\n        CodeEnum[\"UnprocessableEntity\"] = \"unprocessable entity\";\r\n        CodeEnum[\"EmptyValue\"] = \"empty value\";\r\n        CodeEnum[\"Unavailable\"] = \"unavailable\";\r\n        CodeEnum[\"Forbidden\"] = \"forbidden\";\r\n        CodeEnum[\"TooManyRequests\"] = \"too many requests\";\r\n        CodeEnum[\"Unauthorized\"] = \"unauthorized\";\r\n        CodeEnum[\"MethodNotAllowed\"] = \"method not allowed\";\r\n    })(CodeEnum = ModelError.CodeEnum || (ModelError.CodeEnum = {}));\r\n})(ModelError || (ModelError = {}));\r\nexport var NotificationEndpointBase;\r\n(function (NotificationEndpointBase) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = NotificationEndpointBase.StatusEnum || (NotificationEndpointBase.StatusEnum = {}));\r\n})(NotificationEndpointBase || (NotificationEndpointBase = {}));\r\nexport var NotificationEndpointType;\r\n(function (NotificationEndpointType) {\r\n    NotificationEndpointType[\"Slack\"] = \"slack\";\r\n    NotificationEndpointType[\"Smtp\"] = \"smtp\";\r\n    NotificationEndpointType[\"Pagerduty\"] = \"pagerduty\";\r\n    NotificationEndpointType[\"Webhook\"] = \"webhook\";\r\n})(NotificationEndpointType || (NotificationEndpointType = {}));\r\nexport var NotificationRuleBase;\r\n(function (NotificationRuleBase) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = NotificationRuleBase.StatusEnum || (NotificationRuleBase.StatusEnum = {}));\r\n})(NotificationRuleBase || (NotificationRuleBase = {}));\r\nexport var NotificationRuleType;\r\n(function (NotificationRuleType) {\r\n    NotificationRuleType[\"Slack\"] = \"slack\";\r\n    NotificationRuleType[\"Smtp\"] = \"smtp\";\r\n    NotificationRuleType[\"Pagerduty\"] = \"pagerduty\";\r\n})(NotificationRuleType || (NotificationRuleType = {}));\r\nexport var Organization;\r\n(function (Organization) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = Organization.StatusEnum || (Organization.StatusEnum = {}));\r\n})(Organization || (Organization = {}));\r\nexport var Permission;\r\n(function (Permission) {\r\n    var ActionEnum;\r\n    (function (ActionEnum) {\r\n        ActionEnum[\"Read\"] = \"read\";\r\n        ActionEnum[\"Write\"] = \"write\";\r\n    })(ActionEnum = Permission.ActionEnum || (Permission.ActionEnum = {}));\r\n})(Permission || (Permission = {}));\r\nexport var PermissionResource;\r\n(function (PermissionResource) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Authorizations\"] = \"authorizations\";\r\n        TypeEnum[\"Buckets\"] = \"buckets\";\r\n        TypeEnum[\"Dashboards\"] = \"dashboards\";\r\n        TypeEnum[\"Orgs\"] = \"orgs\";\r\n        TypeEnum[\"Sources\"] = \"sources\";\r\n        TypeEnum[\"Tasks\"] = \"tasks\";\r\n        TypeEnum[\"Telegrafs\"] = \"telegrafs\";\r\n        TypeEnum[\"Users\"] = \"users\";\r\n        TypeEnum[\"Variables\"] = \"variables\";\r\n        TypeEnum[\"Scrapers\"] = \"scrapers\";\r\n        TypeEnum[\"Secrets\"] = \"secrets\";\r\n        TypeEnum[\"Labels\"] = \"labels\";\r\n        TypeEnum[\"Views\"] = \"views\";\r\n        TypeEnum[\"Documents\"] = \"documents\";\r\n    })(TypeEnum = PermissionResource.TypeEnum || (PermissionResource.TypeEnum = {}));\r\n})(PermissionResource || (PermissionResource = {}));\r\nexport var Query;\r\n(function (Query) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Flux\"] = \"flux\";\r\n        TypeEnum[\"Influxql\"] = \"influxql\";\r\n    })(TypeEnum = Query.TypeEnum || (Query.TypeEnum = {}));\r\n})(Query || (Query = {}));\r\nexport var QueryVariableProperties;\r\n(function (QueryVariableProperties) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Query\"] = \"query\";\r\n    })(TypeEnum = QueryVariableProperties.TypeEnum || (QueryVariableProperties.TypeEnum = {}));\r\n})(QueryVariableProperties || (QueryVariableProperties = {}));\r\nexport var Ready;\r\n(function (Ready) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Ready\"] = \"ready\";\r\n    })(StatusEnum = Ready.StatusEnum || (Ready.StatusEnum = {}));\r\n})(Ready || (Ready = {}));\r\nexport var ResourceMember;\r\n(function (ResourceMember) {\r\n    var RoleEnum;\r\n    (function (RoleEnum) {\r\n        RoleEnum[\"Member\"] = \"member\";\r\n    })(RoleEnum = ResourceMember.RoleEnum || (ResourceMember.RoleEnum = {}));\r\n})(ResourceMember || (ResourceMember = {}));\r\nexport var ResourceOwner;\r\n(function (ResourceOwner) {\r\n    var RoleEnum;\r\n    (function (RoleEnum) {\r\n        RoleEnum[\"Owner\"] = \"owner\";\r\n    })(RoleEnum = ResourceOwner.RoleEnum || (ResourceOwner.RoleEnum = {}));\r\n})(ResourceOwner || (ResourceOwner = {}));\r\nexport var Run;\r\n(function (Run) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Scheduled\"] = \"scheduled\";\r\n        StatusEnum[\"Started\"] = \"started\";\r\n        StatusEnum[\"Failed\"] = \"failed\";\r\n        StatusEnum[\"Success\"] = \"success\";\r\n        StatusEnum[\"Canceled\"] = \"canceled\";\r\n    })(StatusEnum = Run.StatusEnum || (Run.StatusEnum = {}));\r\n})(Run || (Run = {}));\r\nexport var ScraperTargetRequest;\r\n(function (ScraperTargetRequest) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Prometheus\"] = \"prometheus\";\r\n    })(TypeEnum = ScraperTargetRequest.TypeEnum || (ScraperTargetRequest.TypeEnum = {}));\r\n})(ScraperTargetRequest || (ScraperTargetRequest = {}));\r\nexport var Source;\r\n(function (Source) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"V1\"] = \"v1\";\r\n        TypeEnum[\"V2\"] = \"v2\";\r\n        TypeEnum[\"Self\"] = \"self\";\r\n    })(TypeEnum = Source.TypeEnum || (Source.TypeEnum = {}));\r\n    var LanguagesEnum;\r\n    (function (LanguagesEnum) {\r\n        LanguagesEnum[\"Flux\"] = \"flux\";\r\n        LanguagesEnum[\"Influxql\"] = \"influxql\";\r\n    })(LanguagesEnum = Source.LanguagesEnum || (Source.LanguagesEnum = {}));\r\n})(Source || (Source = {}));\r\nexport var TagRule;\r\n(function (TagRule) {\r\n    var OperatorEnum;\r\n    (function (OperatorEnum) {\r\n        OperatorEnum[\"Equal\"] = \"equal\";\r\n        OperatorEnum[\"Notequal\"] = \"notequal\";\r\n        OperatorEnum[\"Equalregex\"] = \"equalregex\";\r\n        OperatorEnum[\"Notequalregex\"] = \"notequalregex\";\r\n    })(OperatorEnum = TagRule.OperatorEnum || (TagRule.OperatorEnum = {}));\r\n})(TagRule || (TagRule = {}));\r\nexport var Task;\r\n(function (Task) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = Task.StatusEnum || (Task.StatusEnum = {}));\r\n})(Task || (Task = {}));\r\nexport var TaskCreateRequest;\r\n(function (TaskCreateRequest) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = TaskCreateRequest.StatusEnum || (TaskCreateRequest.StatusEnum = {}));\r\n})(TaskCreateRequest || (TaskCreateRequest = {}));\r\nexport var TaskUpdateRequest;\r\n(function (TaskUpdateRequest) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = TaskUpdateRequest.StatusEnum || (TaskUpdateRequest.StatusEnum = {}));\r\n})(TaskUpdateRequest || (TaskUpdateRequest = {}));\r\nexport var TelegrafPluginInputCpu;\r\n(function (TelegrafPluginInputCpu) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Cpu\"] = \"cpu\";\r\n    })(NameEnum = TelegrafPluginInputCpu.NameEnum || (TelegrafPluginInputCpu.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputCpu.TypeEnum || (TelegrafPluginInputCpu.TypeEnum = {}));\r\n})(TelegrafPluginInputCpu || (TelegrafPluginInputCpu = {}));\r\nexport var TelegrafPluginInputDisk;\r\n(function (TelegrafPluginInputDisk) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Disk\"] = \"disk\";\r\n    })(NameEnum = TelegrafPluginInputDisk.NameEnum || (TelegrafPluginInputDisk.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputDisk.TypeEnum || (TelegrafPluginInputDisk.TypeEnum = {}));\r\n})(TelegrafPluginInputDisk || (TelegrafPluginInputDisk = {}));\r\nexport var TelegrafPluginInputDiskio;\r\n(function (TelegrafPluginInputDiskio) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Diskio\"] = \"diskio\";\r\n    })(NameEnum = TelegrafPluginInputDiskio.NameEnum || (TelegrafPluginInputDiskio.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputDiskio.TypeEnum || (TelegrafPluginInputDiskio.TypeEnum = {}));\r\n})(TelegrafPluginInputDiskio || (TelegrafPluginInputDiskio = {}));\r\nexport var TelegrafPluginInputDocker;\r\n(function (TelegrafPluginInputDocker) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Docker\"] = \"docker\";\r\n    })(NameEnum = TelegrafPluginInputDocker.NameEnum || (TelegrafPluginInputDocker.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputDocker.TypeEnum || (TelegrafPluginInputDocker.TypeEnum = {}));\r\n})(TelegrafPluginInputDocker || (TelegrafPluginInputDocker = {}));\r\nexport var TelegrafPluginInputFile;\r\n(function (TelegrafPluginInputFile) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"File\"] = \"file\";\r\n    })(NameEnum = TelegrafPluginInputFile.NameEnum || (TelegrafPluginInputFile.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputFile.TypeEnum || (TelegrafPluginInputFile.TypeEnum = {}));\r\n})(TelegrafPluginInputFile || (TelegrafPluginInputFile = {}));\r\nexport var TelegrafPluginInputKernel;\r\n(function (TelegrafPluginInputKernel) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Kernel\"] = \"kernel\";\r\n    })(NameEnum = TelegrafPluginInputKernel.NameEnum || (TelegrafPluginInputKernel.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputKernel.TypeEnum || (TelegrafPluginInputKernel.TypeEnum = {}));\r\n})(TelegrafPluginInputKernel || (TelegrafPluginInputKernel = {}));\r\nexport var TelegrafPluginInputKubernetes;\r\n(function (TelegrafPluginInputKubernetes) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Kubernetes\"] = \"kubernetes\";\r\n    })(NameEnum = TelegrafPluginInputKubernetes.NameEnum || (TelegrafPluginInputKubernetes.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputKubernetes.TypeEnum || (TelegrafPluginInputKubernetes.TypeEnum = {}));\r\n})(TelegrafPluginInputKubernetes || (TelegrafPluginInputKubernetes = {}));\r\nexport var TelegrafPluginInputLogParser;\r\n(function (TelegrafPluginInputLogParser) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Logparser\"] = \"logparser\";\r\n    })(NameEnum = TelegrafPluginInputLogParser.NameEnum || (TelegrafPluginInputLogParser.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputLogParser.TypeEnum || (TelegrafPluginInputLogParser.TypeEnum = {}));\r\n})(TelegrafPluginInputLogParser || (TelegrafPluginInputLogParser = {}));\r\nexport var TelegrafPluginInputMem;\r\n(function (TelegrafPluginInputMem) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Mem\"] = \"mem\";\r\n    })(NameEnum = TelegrafPluginInputMem.NameEnum || (TelegrafPluginInputMem.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputMem.TypeEnum || (TelegrafPluginInputMem.TypeEnum = {}));\r\n})(TelegrafPluginInputMem || (TelegrafPluginInputMem = {}));\r\nexport var TelegrafPluginInputNet;\r\n(function (TelegrafPluginInputNet) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Net\"] = \"net\";\r\n    })(NameEnum = TelegrafPluginInputNet.NameEnum || (TelegrafPluginInputNet.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputNet.TypeEnum || (TelegrafPluginInputNet.TypeEnum = {}));\r\n})(TelegrafPluginInputNet || (TelegrafPluginInputNet = {}));\r\nexport var TelegrafPluginInputNetResponse;\r\n(function (TelegrafPluginInputNetResponse) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"NetResponse\"] = \"net_response\";\r\n    })(NameEnum = TelegrafPluginInputNetResponse.NameEnum || (TelegrafPluginInputNetResponse.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputNetResponse.TypeEnum || (TelegrafPluginInputNetResponse.TypeEnum = {}));\r\n})(TelegrafPluginInputNetResponse || (TelegrafPluginInputNetResponse = {}));\r\nexport var TelegrafPluginInputNginx;\r\n(function (TelegrafPluginInputNginx) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Nginx\"] = \"nginx\";\r\n    })(NameEnum = TelegrafPluginInputNginx.NameEnum || (TelegrafPluginInputNginx.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputNginx.TypeEnum || (TelegrafPluginInputNginx.TypeEnum = {}));\r\n})(TelegrafPluginInputNginx || (TelegrafPluginInputNginx = {}));\r\nexport var TelegrafPluginInputProcesses;\r\n(function (TelegrafPluginInputProcesses) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Processes\"] = \"processes\";\r\n    })(NameEnum = TelegrafPluginInputProcesses.NameEnum || (TelegrafPluginInputProcesses.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputProcesses.TypeEnum || (TelegrafPluginInputProcesses.TypeEnum = {}));\r\n})(TelegrafPluginInputProcesses || (TelegrafPluginInputProcesses = {}));\r\nexport var TelegrafPluginInputProcstat;\r\n(function (TelegrafPluginInputProcstat) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Procstat\"] = \"procstat\";\r\n    })(NameEnum = TelegrafPluginInputProcstat.NameEnum || (TelegrafPluginInputProcstat.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputProcstat.TypeEnum || (TelegrafPluginInputProcstat.TypeEnum = {}));\r\n})(TelegrafPluginInputProcstat || (TelegrafPluginInputProcstat = {}));\r\nexport var TelegrafPluginInputPrometheus;\r\n(function (TelegrafPluginInputPrometheus) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Prometheus\"] = \"prometheus\";\r\n    })(NameEnum = TelegrafPluginInputPrometheus.NameEnum || (TelegrafPluginInputPrometheus.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputPrometheus.TypeEnum || (TelegrafPluginInputPrometheus.TypeEnum = {}));\r\n})(TelegrafPluginInputPrometheus || (TelegrafPluginInputPrometheus = {}));\r\nexport var TelegrafPluginInputRedis;\r\n(function (TelegrafPluginInputRedis) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Redis\"] = \"redis\";\r\n    })(NameEnum = TelegrafPluginInputRedis.NameEnum || (TelegrafPluginInputRedis.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputRedis.TypeEnum || (TelegrafPluginInputRedis.TypeEnum = {}));\r\n})(TelegrafPluginInputRedis || (TelegrafPluginInputRedis = {}));\r\nexport var TelegrafPluginInputSwap;\r\n(function (TelegrafPluginInputSwap) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Swap\"] = \"swap\";\r\n    })(NameEnum = TelegrafPluginInputSwap.NameEnum || (TelegrafPluginInputSwap.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputSwap.TypeEnum || (TelegrafPluginInputSwap.TypeEnum = {}));\r\n})(TelegrafPluginInputSwap || (TelegrafPluginInputSwap = {}));\r\nexport var TelegrafPluginInputSyslog;\r\n(function (TelegrafPluginInputSyslog) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Syslog\"] = \"syslog\";\r\n    })(NameEnum = TelegrafPluginInputSyslog.NameEnum || (TelegrafPluginInputSyslog.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputSyslog.TypeEnum || (TelegrafPluginInputSyslog.TypeEnum = {}));\r\n})(TelegrafPluginInputSyslog || (TelegrafPluginInputSyslog = {}));\r\nexport var TelegrafPluginInputSystem;\r\n(function (TelegrafPluginInputSystem) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"System\"] = \"system\";\r\n    })(NameEnum = TelegrafPluginInputSystem.NameEnum || (TelegrafPluginInputSystem.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputSystem.TypeEnum || (TelegrafPluginInputSystem.TypeEnum = {}));\r\n})(TelegrafPluginInputSystem || (TelegrafPluginInputSystem = {}));\r\nexport var TelegrafPluginInputTail;\r\n(function (TelegrafPluginInputTail) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"Tail\"] = \"tail\";\r\n    })(NameEnum = TelegrafPluginInputTail.NameEnum || (TelegrafPluginInputTail.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Input\"] = \"input\";\r\n    })(TypeEnum = TelegrafPluginInputTail.TypeEnum || (TelegrafPluginInputTail.TypeEnum = {}));\r\n})(TelegrafPluginInputTail || (TelegrafPluginInputTail = {}));\r\nexport var TelegrafPluginOutputFile;\r\n(function (TelegrafPluginOutputFile) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"File\"] = \"file\";\r\n    })(NameEnum = TelegrafPluginOutputFile.NameEnum || (TelegrafPluginOutputFile.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Output\"] = \"output\";\r\n    })(TypeEnum = TelegrafPluginOutputFile.TypeEnum || (TelegrafPluginOutputFile.TypeEnum = {}));\r\n})(TelegrafPluginOutputFile || (TelegrafPluginOutputFile = {}));\r\nexport var TelegrafPluginOutputFileConfigFiles;\r\n(function (TelegrafPluginOutputFileConfigFiles) {\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Stdout\"] = \"stdout\";\r\n        TypeEnum[\"Path\"] = \"path\";\r\n    })(TypeEnum = TelegrafPluginOutputFileConfigFiles.TypeEnum || (TelegrafPluginOutputFileConfigFiles.TypeEnum = {}));\r\n})(TelegrafPluginOutputFileConfigFiles || (TelegrafPluginOutputFileConfigFiles = {}));\r\nexport var TelegrafPluginOutputInfluxDBV2;\r\n(function (TelegrafPluginOutputInfluxDBV2) {\r\n    var NameEnum;\r\n    (function (NameEnum) {\r\n        NameEnum[\"InfluxdbV2\"] = \"influxdb_v2\";\r\n    })(NameEnum = TelegrafPluginOutputInfluxDBV2.NameEnum || (TelegrafPluginOutputInfluxDBV2.NameEnum = {}));\r\n    var TypeEnum;\r\n    (function (TypeEnum) {\r\n        TypeEnum[\"Output\"] = \"output\";\r\n    })(TypeEnum = TelegrafPluginOutputInfluxDBV2.TypeEnum || (TelegrafPluginOutputInfluxDBV2.TypeEnum = {}));\r\n})(TelegrafPluginOutputInfluxDBV2 || (TelegrafPluginOutputInfluxDBV2 = {}));\r\nexport var ThresholdType;\r\n(function (ThresholdType) {\r\n    ThresholdType[\"Greater\"] = \"greater\";\r\n    ThresholdType[\"Lesser\"] = \"lesser\";\r\n    ThresholdType[\"Range\"] = \"range\";\r\n})(ThresholdType || (ThresholdType = {}));\r\nexport var User;\r\n(function (User) {\r\n    var StatusEnum;\r\n    (function (StatusEnum) {\r\n        StatusEnum[\"Active\"] = \"active\";\r\n        StatusEnum[\"Inactive\"] = \"inactive\";\r\n    })(StatusEnum = User.StatusEnum || (User.StatusEnum = {}));\r\n})(User || (User = {}));\r\nexport var ViewProperties;\r\n(function (ViewProperties) {\r\n    var ShapeEnum;\r\n    (function (ShapeEnum) {\r\n        ShapeEnum[\"ChronografV2\"] = \"chronograf-v2\";\r\n    })(ShapeEnum = ViewProperties.ShapeEnum || (ViewProperties.ShapeEnum = {}));\r\n})(ViewProperties || (ViewProperties = {}));\r\nexport var ViewType;\r\n(function (ViewType) {\r\n    ViewType[\"Xy\"] = \"xy\";\r\n    ViewType[\"LinePlusSingleStat\"] = \"line-plus-single-stat\";\r\n    ViewType[\"SingleStat\"] = \"single-stat\";\r\n    ViewType[\"Gauge\"] = \"gauge\";\r\n    ViewType[\"Table\"] = \"table\";\r\n    ViewType[\"Markdown\"] = \"markdown\";\r\n    ViewType[\"LogViewer\"] = \"log-viewer\";\r\n    ViewType[\"Histogram\"] = \"histogram\";\r\n    ViewType[\"Heatmap\"] = \"heatmap\";\r\n    ViewType[\"Scatter\"] = \"scatter\";\r\n    ViewType[\"Check\"] = \"check\";\r\n})(ViewType || (ViewType = {}));\r\nexport var WritePrecision;\r\n(function (WritePrecision) {\r\n    WritePrecision[\"Ms\"] = \"ms\";\r\n    WritePrecision[\"S\"] = \"s\";\r\n    WritePrecision[\"Us\"] = \"us\";\r\n    WritePrecision[\"Ns\"] = \"ns\";\r\n})(WritePrecision || (WritePrecision = {}));\r\nexport var XYViewProperties;\r\n(function (XYViewProperties) {\r\n    var GeomEnum;\r\n    (function (GeomEnum) {\r\n        GeomEnum[\"Line\"] = \"line\";\r\n        GeomEnum[\"Step\"] = \"step\";\r\n        GeomEnum[\"Stacked\"] = \"stacked\";\r\n        GeomEnum[\"Bar\"] = \"bar\";\r\n    })(GeomEnum = XYViewProperties.GeomEnum || (XYViewProperties.GeomEnum = {}));\r\n})(XYViewProperties || (XYViewProperties = {}));\r\nexport var AuthorizationsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (authID === null || authID === undefined) {\r\n                throw new RequiredError('authID', 'Required parameter authID was null or undefined when calling deleteAuthorizationsID.');\r\n            }\r\n            var localVarPath = \"/authorizations/{authID}\"\r\n                .replace(\"{\" + \"authID\" + \"}\", encodeURIComponent(String(authID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getAuthorizations: function (zapTraceSpan, userID, user, orgID, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/authorizations\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (userID !== undefined) {\r\n                localVarQueryParameter['userID'] = userID;\r\n            }\r\n            if (user !== undefined) {\r\n                localVarQueryParameter['user'] = user;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (authID === null || authID === undefined) {\r\n                throw new RequiredError('authID', 'Required parameter authID was null or undefined when calling getAuthorizationsID.');\r\n            }\r\n            var localVarPath = \"/authorizations/{authID}\"\r\n                .replace(\"{\" + \"authID\" + \"}\", encodeURIComponent(String(authID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchAuthorizationsID: function (authID, authorizationUpdateRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (authID === null || authID === undefined) {\r\n                throw new RequiredError('authID', 'Required parameter authID was null or undefined when calling patchAuthorizationsID.');\r\n            }\r\n            if (authorizationUpdateRequest === null || authorizationUpdateRequest === undefined) {\r\n                throw new RequiredError('authorizationUpdateRequest', 'Required parameter authorizationUpdateRequest was null or undefined when calling patchAuthorizationsID.');\r\n            }\r\n            var localVarPath = \"/authorizations/{authID}\"\r\n                .replace(\"{\" + \"authID\" + \"}\", encodeURIComponent(String(authID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AuthorizationUpdateRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(authorizationUpdateRequest || {}) : (authorizationUpdateRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postAuthorizations: function (authorization, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (authorization === null || authorization === undefined) {\r\n                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling postAuthorizations.');\r\n            }\r\n            var localVarPath = \"/authorizations\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Authorization\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(authorization || {}) : (authorization || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var AuthorizationsApiFp = function (configuration) {\r\n    return {\r\n        deleteAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = AuthorizationsApiAxiosParamCreator(configuration).deleteAuthorizationsID(authID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getAuthorizations: function (zapTraceSpan, userID, user, orgID, org, options) {\r\n            var localVarAxiosArgs = AuthorizationsApiAxiosParamCreator(configuration).getAuthorizations(zapTraceSpan, userID, user, orgID, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = AuthorizationsApiAxiosParamCreator(configuration).getAuthorizationsID(authID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchAuthorizationsID: function (authID, authorizationUpdateRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = AuthorizationsApiAxiosParamCreator(configuration).patchAuthorizationsID(authID, authorizationUpdateRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postAuthorizations: function (authorization, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = AuthorizationsApiAxiosParamCreator(configuration).postAuthorizations(authorization, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var AuthorizationsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            return AuthorizationsApiFp(configuration).deleteAuthorizationsID(authID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getAuthorizations: function (zapTraceSpan, userID, user, orgID, org, options) {\r\n            return AuthorizationsApiFp(configuration).getAuthorizations(zapTraceSpan, userID, user, orgID, org, options)(axios, basePath);\r\n        },\r\n        getAuthorizationsID: function (authID, zapTraceSpan, options) {\r\n            return AuthorizationsApiFp(configuration).getAuthorizationsID(authID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchAuthorizationsID: function (authID, authorizationUpdateRequest, zapTraceSpan, options) {\r\n            return AuthorizationsApiFp(configuration).patchAuthorizationsID(authID, authorizationUpdateRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postAuthorizations: function (authorization, zapTraceSpan, options) {\r\n            return AuthorizationsApiFp(configuration).postAuthorizations(authorization, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar AuthorizationsApi = (function (_super) {\r\n    tslib_1.__extends(AuthorizationsApi, _super);\r\n    function AuthorizationsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AuthorizationsApi.prototype.deleteAuthorizationsID = function (authID, zapTraceSpan, options) {\r\n        return AuthorizationsApiFp(this.configuration).deleteAuthorizationsID(authID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    AuthorizationsApi.prototype.getAuthorizations = function (zapTraceSpan, userID, user, orgID, org, options) {\r\n        return AuthorizationsApiFp(this.configuration).getAuthorizations(zapTraceSpan, userID, user, orgID, org, options)(this.axios, this.basePath);\r\n    };\r\n    AuthorizationsApi.prototype.getAuthorizationsID = function (authID, zapTraceSpan, options) {\r\n        return AuthorizationsApiFp(this.configuration).getAuthorizationsID(authID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    AuthorizationsApi.prototype.patchAuthorizationsID = function (authID, authorizationUpdateRequest, zapTraceSpan, options) {\r\n        return AuthorizationsApiFp(this.configuration).patchAuthorizationsID(authID, authorizationUpdateRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    AuthorizationsApi.prototype.postAuthorizations = function (authorization, zapTraceSpan, options) {\r\n        return AuthorizationsApiFp(this.configuration).postAuthorizations(authorization, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return AuthorizationsApi;\r\n}(BaseAPI));\r\nexport { AuthorizationsApi };\r\nexport var BucketsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteBucketsIDLabelsID: function (bucketID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteBucketsIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteBucketsIDMembersID.');\r\n            }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteBucketsIDOwnersID.');\r\n            }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBuckets: function (zapTraceSpan, offset, limit, org, orgID, name, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/buckets\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (name !== undefined) {\r\n                localVarQueryParameter['name'] = name;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDLabels: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDLabels.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/labels\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDLogs.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/logs\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDMembers.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDOwners.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling getSourcesIDBuckets.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}/buckets\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchBucketsID: function (bucketID, bucket, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling patchBucketsID.');\r\n            }\r\n            if (bucket === null || bucket === undefined) {\r\n                throw new RequiredError('bucket', 'Required parameter bucket was null or undefined when calling patchBucketsID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Bucket\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bucket || {}) : (bucket || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBuckets: function (bucket, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucket === null || bucket === undefined) {\r\n                throw new RequiredError('bucket', 'Required parameter bucket was null or undefined when calling postBuckets.');\r\n            }\r\n            var localVarPath = \"/buckets\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Bucket\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(bucket || {}) : (bucket || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBucketsIDLabels: function (bucketID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling postBucketsIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postBucketsIDLabels.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/labels\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling postBucketsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postBucketsIDMembers.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling postBucketsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postBucketsIDOwners.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var BucketsApiFp = function (configuration) {\r\n    return {\r\n        deleteBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).deleteBucketsID(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteBucketsIDLabelsID: function (bucketID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).deleteBucketsIDLabelsID(bucketID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBuckets: function (zapTraceSpan, offset, limit, org, orgID, name, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBuckets(zapTraceSpan, offset, limit, org, orgID, name, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBucketsID(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDLabels: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBucketsIDLabels(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchBucketsID: function (bucketID, bucket, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).patchBucketsID(bucketID, bucket, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBuckets: function (bucket, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).postBuckets(bucket, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBucketsIDLabels: function (bucketID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).postBucketsIDLabels(bucketID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = BucketsApiAxiosParamCreator(configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var BucketsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).deleteBucketsID(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteBucketsIDLabelsID: function (bucketID, labelID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).deleteBucketsIDLabelsID(bucketID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBuckets: function (zapTraceSpan, offset, limit, org, orgID, name, options) {\r\n            return BucketsApiFp(configuration).getBuckets(zapTraceSpan, offset, limit, org, orgID, name, options)(axios, basePath);\r\n        },\r\n        getBucketsID: function (bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).getBucketsID(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBucketsIDLabels: function (bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).getBucketsIDLabels(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            return BucketsApiFp(configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            return BucketsApiFp(configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options)(axios, basePath);\r\n        },\r\n        patchBucketsID: function (bucketID, bucket, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).patchBucketsID(bucketID, bucket, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBuckets: function (bucket, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).postBuckets(bucket, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBucketsIDLabels: function (bucketID, labelMapping, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).postBucketsIDLabels(bucketID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return BucketsApiFp(configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar BucketsApi = (function (_super) {\r\n    tslib_1.__extends(BucketsApi, _super);\r\n    function BucketsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    BucketsApi.prototype.deleteBucketsID = function (bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).deleteBucketsID(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.deleteBucketsIDLabelsID = function (bucketID, labelID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).deleteBucketsIDLabelsID(bucketID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.deleteBucketsIDMembersID = function (userID, bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.deleteBucketsIDOwnersID = function (userID, bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBuckets = function (zapTraceSpan, offset, limit, org, orgID, name, options) {\r\n        return BucketsApiFp(this.configuration).getBuckets(zapTraceSpan, offset, limit, org, orgID, name, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBucketsID = function (bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).getBucketsID(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBucketsIDLabels = function (bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).getBucketsIDLabels(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBucketsIDLogs = function (bucketID, zapTraceSpan, offset, limit, options) {\r\n        return BucketsApiFp(this.configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBucketsIDMembers = function (bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getBucketsIDOwners = function (bucketID, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.getSourcesIDBuckets = function (sourceID, zapTraceSpan, org, options) {\r\n        return BucketsApiFp(this.configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.patchBucketsID = function (bucketID, bucket, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).patchBucketsID(bucketID, bucket, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.postBuckets = function (bucket, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).postBuckets(bucket, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.postBucketsIDLabels = function (bucketID, labelMapping, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).postBucketsIDLabels(bucketID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.postBucketsIDMembers = function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    BucketsApi.prototype.postBucketsIDOwners = function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return BucketsApiFp(this.configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return BucketsApi;\r\n}(BaseAPI));\r\nexport { BucketsApi };\r\nexport var CellsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDCellsID.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling deleteDashboardsIDCellsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            if (cellUpdate === null || cellUpdate === undefined) {\r\n                throw new RequiredError('cellUpdate', 'Required parameter cellUpdate was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"CellUpdate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cellUpdate || {}) : (cellUpdate || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (view === null || view === undefined) {\r\n                throw new RequiredError('view', 'Required parameter view was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"View\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(view || {}) : (view || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDCells.');\r\n            }\r\n            if (createCell === null || createCell === undefined) {\r\n                throw new RequiredError('createCell', 'Required parameter createCell was null or undefined when calling postDashboardsIDCells.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"CreateCell\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createCell || {}) : (createCell || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling putDashboardsIDCells.');\r\n            }\r\n            if (cell === null || cell === undefined) {\r\n                throw new RequiredError('cell', 'Required parameter cell was null or undefined when calling putDashboardsIDCells.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Array&lt;Cell&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cell || {}) : (cell || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var CellsApiFp = function (configuration) {\r\n    return {\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = CellsApiAxiosParamCreator(configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var CellsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            return CellsApiFp(configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar CellsApi = (function (_super) {\r\n    tslib_1.__extends(CellsApi, _super);\r\n    function CellsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CellsApi.prototype.deleteDashboardsIDCellsID = function (dashboardID, cellID, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    CellsApi.prototype.getDashboardsIDCellsIDView = function (dashboardID, cellID, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    CellsApi.prototype.patchDashboardsIDCellsID = function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    CellsApi.prototype.patchDashboardsIDCellsIDView = function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    CellsApi.prototype.postDashboardsIDCells = function (dashboardID, createCell, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    CellsApi.prototype.putDashboardsIDCells = function (dashboardID, cell, zapTraceSpan, options) {\r\n        return CellsApiFp(this.configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return CellsApi;\r\n}(BaseAPI));\r\nexport { CellsApi };\r\nexport var ChecksApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        createCheck: function (check, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (check === null || check === undefined) {\r\n                throw new RequiredError('check', 'Required parameter check was null or undefined when calling createCheck.');\r\n            }\r\n            var localVarPath = \"/checks\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Check\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(check || {}) : (check || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteChecksID: function (checkID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (checkID === null || checkID === undefined) {\r\n                throw new RequiredError('checkID', 'Required parameter checkID was null or undefined when calling deleteChecksID.');\r\n            }\r\n            var localVarPath = \"/checks/{checkID}\"\r\n                .replace(\"{\" + \"checkID\" + \"}\", encodeURIComponent(String(checkID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getChecks: function (orgID, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getChecks.');\r\n            }\r\n            var localVarPath = \"/checks\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getChecksID: function (checkID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (checkID === null || checkID === undefined) {\r\n                throw new RequiredError('checkID', 'Required parameter checkID was null or undefined when calling getChecksID.');\r\n            }\r\n            var localVarPath = \"/checks/{checkID}\"\r\n                .replace(\"{\" + \"checkID\" + \"}\", encodeURIComponent(String(checkID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchChecksID: function (checkID, check, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (checkID === null || checkID === undefined) {\r\n                throw new RequiredError('checkID', 'Required parameter checkID was null or undefined when calling patchChecksID.');\r\n            }\r\n            if (check === null || check === undefined) {\r\n                throw new RequiredError('check', 'Required parameter check was null or undefined when calling patchChecksID.');\r\n            }\r\n            var localVarPath = \"/checks/{checkID}\"\r\n                .replace(\"{\" + \"checkID\" + \"}\", encodeURIComponent(String(checkID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Check\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(check || {}) : (check || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ChecksApiFp = function (configuration) {\r\n    return {\r\n        createCheck: function (check, options) {\r\n            var localVarAxiosArgs = ChecksApiAxiosParamCreator(configuration).createCheck(check, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteChecksID: function (checkID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ChecksApiAxiosParamCreator(configuration).deleteChecksID(checkID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getChecks: function (orgID, offset, limit, options) {\r\n            var localVarAxiosArgs = ChecksApiAxiosParamCreator(configuration).getChecks(orgID, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getChecksID: function (checkID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ChecksApiAxiosParamCreator(configuration).getChecksID(checkID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchChecksID: function (checkID, check, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ChecksApiAxiosParamCreator(configuration).patchChecksID(checkID, check, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ChecksApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        createCheck: function (check, options) {\r\n            return ChecksApiFp(configuration).createCheck(check, options)(axios, basePath);\r\n        },\r\n        deleteChecksID: function (checkID, zapTraceSpan, options) {\r\n            return ChecksApiFp(configuration).deleteChecksID(checkID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getChecks: function (orgID, offset, limit, options) {\r\n            return ChecksApiFp(configuration).getChecks(orgID, offset, limit, options)(axios, basePath);\r\n        },\r\n        getChecksID: function (checkID, zapTraceSpan, options) {\r\n            return ChecksApiFp(configuration).getChecksID(checkID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchChecksID: function (checkID, check, zapTraceSpan, options) {\r\n            return ChecksApiFp(configuration).patchChecksID(checkID, check, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar ChecksApi = (function (_super) {\r\n    tslib_1.__extends(ChecksApi, _super);\r\n    function ChecksApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ChecksApi.prototype.createCheck = function (check, options) {\r\n        return ChecksApiFp(this.configuration).createCheck(check, options)(this.axios, this.basePath);\r\n    };\r\n    ChecksApi.prototype.deleteChecksID = function (checkID, zapTraceSpan, options) {\r\n        return ChecksApiFp(this.configuration).deleteChecksID(checkID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ChecksApi.prototype.getChecks = function (orgID, offset, limit, options) {\r\n        return ChecksApiFp(this.configuration).getChecks(orgID, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    ChecksApi.prototype.getChecksID = function (checkID, zapTraceSpan, options) {\r\n        return ChecksApiFp(this.configuration).getChecksID(checkID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ChecksApi.prototype.patchChecksID = function (checkID, check, zapTraceSpan, options) {\r\n        return ChecksApiFp(this.configuration).patchChecksID(checkID, check, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return ChecksApi;\r\n}(BaseAPI));\r\nexport { ChecksApi };\r\nexport var DashboardsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDCellsID.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling deleteDashboardsIDCellsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDLabelsID: function (dashboardID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteDashboardsIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteDashboardsIDMembersID.');\r\n            }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteDashboardsIDOwnersID.');\r\n            }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboards: function (zapTraceSpan, owner, sortBy, id, orgID, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/dashboards\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (owner !== undefined) {\r\n                localVarQueryParameter['owner'] = owner;\r\n            }\r\n            if (sortBy !== undefined) {\r\n                localVarQueryParameter['sortBy'] = sortBy;\r\n            }\r\n            if (id) {\r\n                localVarQueryParameter['id'] = id;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDLabels: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDLabels.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/labels\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDLogs.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/logs\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDMembers.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDOwners.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsID: function (dashboardID, dashboard, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsID.');\r\n            }\r\n            if (dashboard === null || dashboard === undefined) {\r\n                throw new RequiredError('dashboard', 'Required parameter dashboard was null or undefined when calling patchDashboardsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Dashboard\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(dashboard || {}) : (dashboard || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            if (cellUpdate === null || cellUpdate === undefined) {\r\n                throw new RequiredError('cellUpdate', 'Required parameter cellUpdate was null or undefined when calling patchDashboardsIDCellsID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"CellUpdate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cellUpdate || {}) : (cellUpdate || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (view === null || view === undefined) {\r\n                throw new RequiredError('view', 'Required parameter view was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"View\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(view || {}) : (view || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboards: function (createDashboardRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (createDashboardRequest === null || createDashboardRequest === undefined) {\r\n                throw new RequiredError('createDashboardRequest', 'Required parameter createDashboardRequest was null or undefined when calling postDashboards.');\r\n            }\r\n            var localVarPath = \"/dashboards\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"CreateDashboardRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createDashboardRequest || {}) : (createDashboardRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDCells.');\r\n            }\r\n            if (createCell === null || createCell === undefined) {\r\n                throw new RequiredError('createCell', 'Required parameter createCell was null or undefined when calling postDashboardsIDCells.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"CreateCell\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(createCell || {}) : (createCell || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDLabels: function (dashboardID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postDashboardsIDLabels.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/labels\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postDashboardsIDMembers.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postDashboardsIDOwners.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling putDashboardsIDCells.');\r\n            }\r\n            if (cell === null || cell === undefined) {\r\n                throw new RequiredError('cell', 'Required parameter cell was null or undefined when calling putDashboardsIDCells.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Array&lt;Cell&gt;\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(cell || {}) : (cell || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var DashboardsApiFp = function (configuration) {\r\n    return {\r\n        deleteDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).deleteDashboardsID(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDLabelsID: function (dashboardID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).deleteDashboardsIDLabelsID(dashboardID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboards: function (zapTraceSpan, owner, sortBy, id, orgID, org, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboards(zapTraceSpan, owner, sortBy, id, orgID, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsID(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDLabels: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsIDLabels(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsID: function (dashboardID, dashboard, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).patchDashboardsID(dashboardID, dashboard, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboards: function (createDashboardRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).postDashboards(createDashboardRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDLabels: function (dashboardID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).postDashboardsIDLabels(dashboardID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DashboardsApiAxiosParamCreator(configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var DashboardsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).deleteDashboardsID(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDCellsID: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDLabelsID: function (dashboardID, labelID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).deleteDashboardsIDLabelsID(dashboardID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboards: function (zapTraceSpan, owner, sortBy, id, orgID, org, options) {\r\n            return DashboardsApiFp(configuration).getDashboards(zapTraceSpan, owner, sortBy, id, orgID, org, options)(axios, basePath);\r\n        },\r\n        getDashboardsID: function (dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsID(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDLabels: function (dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsIDLabels(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsID: function (dashboardID, dashboard, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).patchDashboardsID(dashboardID, dashboard, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsIDCellsID: function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboards: function (createDashboardRequest, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).postDashboards(createDashboardRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDCells: function (dashboardID, createCell, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDLabels: function (dashboardID, labelMapping, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).postDashboardsIDLabels(dashboardID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putDashboardsIDCells: function (dashboardID, cell, zapTraceSpan, options) {\r\n            return DashboardsApiFp(configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar DashboardsApi = (function (_super) {\r\n    tslib_1.__extends(DashboardsApi, _super);\r\n    function DashboardsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DashboardsApi.prototype.deleteDashboardsID = function (dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).deleteDashboardsID(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.deleteDashboardsIDCellsID = function (dashboardID, cellID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).deleteDashboardsIDCellsID(dashboardID, cellID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.deleteDashboardsIDLabelsID = function (dashboardID, labelID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).deleteDashboardsIDLabelsID(dashboardID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.deleteDashboardsIDMembersID = function (userID, dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.deleteDashboardsIDOwnersID = function (userID, dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboards = function (zapTraceSpan, owner, sortBy, id, orgID, org, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboards(zapTraceSpan, owner, sortBy, id, orgID, org, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsID = function (dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsID(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsIDCellsIDView = function (dashboardID, cellID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsIDLabels = function (dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsIDLabels(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsIDLogs = function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsIDMembers = function (dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.getDashboardsIDOwners = function (dashboardID, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.patchDashboardsID = function (dashboardID, dashboard, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).patchDashboardsID(dashboardID, dashboard, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.patchDashboardsIDCellsID = function (dashboardID, cellID, cellUpdate, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).patchDashboardsIDCellsID(dashboardID, cellID, cellUpdate, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.patchDashboardsIDCellsIDView = function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.postDashboards = function (createDashboardRequest, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).postDashboards(createDashboardRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.postDashboardsIDCells = function (dashboardID, createCell, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).postDashboardsIDCells(dashboardID, createCell, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.postDashboardsIDLabels = function (dashboardID, labelMapping, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).postDashboardsIDLabels(dashboardID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.postDashboardsIDMembers = function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.postDashboardsIDOwners = function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DashboardsApi.prototype.putDashboardsIDCells = function (dashboardID, cell, zapTraceSpan, options) {\r\n        return DashboardsApiFp(this.configuration).putDashboardsIDCells(dashboardID, cell, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return DashboardsApi;\r\n}(BaseAPI));\r\nexport { DashboardsApi };\r\nexport var DefaultApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getRoutes: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postSignin: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/signin\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (configuration && (configuration.username || configuration.password)) {\r\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postSignout: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/signout\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var DefaultApiFp = function (configuration) {\r\n    return {\r\n        getRoutes: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getRoutes(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postSignin: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postSignin(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postSignout: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postSignout(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var DefaultApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getRoutes: function (zapTraceSpan, options) {\r\n            return DefaultApiFp(configuration).getRoutes(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postSignin: function (zapTraceSpan, options) {\r\n            return DefaultApiFp(configuration).postSignin(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postSignout: function (zapTraceSpan, options) {\r\n            return DefaultApiFp(configuration).postSignout(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar DefaultApi = (function (_super) {\r\n    tslib_1.__extends(DefaultApi, _super);\r\n    function DefaultApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultApi.prototype.getRoutes = function (zapTraceSpan, options) {\r\n        return DefaultApiFp(this.configuration).getRoutes(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DefaultApi.prototype.postSignin = function (zapTraceSpan, options) {\r\n        return DefaultApiFp(this.configuration).postSignin(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    DefaultApi.prototype.postSignout = function (zapTraceSpan, options) {\r\n        return DefaultApiFp(this.configuration).postSignout(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return DefaultApi;\r\n}(BaseAPI));\r\nexport { DefaultApi };\r\nexport var HealthApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getHealth: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/health\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var HealthApiFp = function (configuration) {\r\n    return {\r\n        getHealth: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = HealthApiAxiosParamCreator(configuration).getHealth(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var HealthApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getHealth: function (zapTraceSpan, options) {\r\n            return HealthApiFp(configuration).getHealth(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar HealthApi = (function (_super) {\r\n    tslib_1.__extends(HealthApi, _super);\r\n    function HealthApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    HealthApi.prototype.getHealth = function (zapTraceSpan, options) {\r\n        return HealthApiFp(this.configuration).getHealth(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return HealthApi;\r\n}(BaseAPI));\r\nexport { HealthApi };\r\nexport var LabelsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteLabelsID: function (labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteLabelsID.');\r\n            }\r\n            var localVarPath = \"/labels/{labelID}\"\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getLabels: function (zapTraceSpan, orgID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/labels\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getLabelsID: function (labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling getLabelsID.');\r\n            }\r\n            var localVarPath = \"/labels/{labelID}\"\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchLabelsID: function (labelID, labelUpdate, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling patchLabelsID.');\r\n            }\r\n            if (labelUpdate === null || labelUpdate === undefined) {\r\n                throw new RequiredError('labelUpdate', 'Required parameter labelUpdate was null or undefined when calling patchLabelsID.');\r\n            }\r\n            var localVarPath = \"/labels/{labelID}\"\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelUpdate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelUpdate || {}) : (labelUpdate || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postLabels: function (labelCreateRequest, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (labelCreateRequest === null || labelCreateRequest === undefined) {\r\n                throw new RequiredError('labelCreateRequest', 'Required parameter labelCreateRequest was null or undefined when calling postLabels.');\r\n            }\r\n            var localVarPath = \"/labels\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelCreateRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelCreateRequest || {}) : (labelCreateRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var LabelsApiFp = function (configuration) {\r\n    return {\r\n        deleteLabelsID: function (labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = LabelsApiAxiosParamCreator(configuration).deleteLabelsID(labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getLabels: function (zapTraceSpan, orgID, options) {\r\n            var localVarAxiosArgs = LabelsApiAxiosParamCreator(configuration).getLabels(zapTraceSpan, orgID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getLabelsID: function (labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = LabelsApiAxiosParamCreator(configuration).getLabelsID(labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchLabelsID: function (labelID, labelUpdate, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = LabelsApiAxiosParamCreator(configuration).patchLabelsID(labelID, labelUpdate, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postLabels: function (labelCreateRequest, options) {\r\n            var localVarAxiosArgs = LabelsApiAxiosParamCreator(configuration).postLabels(labelCreateRequest, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var LabelsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteLabelsID: function (labelID, zapTraceSpan, options) {\r\n            return LabelsApiFp(configuration).deleteLabelsID(labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getLabels: function (zapTraceSpan, orgID, options) {\r\n            return LabelsApiFp(configuration).getLabels(zapTraceSpan, orgID, options)(axios, basePath);\r\n        },\r\n        getLabelsID: function (labelID, zapTraceSpan, options) {\r\n            return LabelsApiFp(configuration).getLabelsID(labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchLabelsID: function (labelID, labelUpdate, zapTraceSpan, options) {\r\n            return LabelsApiFp(configuration).patchLabelsID(labelID, labelUpdate, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postLabels: function (labelCreateRequest, options) {\r\n            return LabelsApiFp(configuration).postLabels(labelCreateRequest, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar LabelsApi = (function (_super) {\r\n    tslib_1.__extends(LabelsApi, _super);\r\n    function LabelsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LabelsApi.prototype.deleteLabelsID = function (labelID, zapTraceSpan, options) {\r\n        return LabelsApiFp(this.configuration).deleteLabelsID(labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    LabelsApi.prototype.getLabels = function (zapTraceSpan, orgID, options) {\r\n        return LabelsApiFp(this.configuration).getLabels(zapTraceSpan, orgID, options)(this.axios, this.basePath);\r\n    };\r\n    LabelsApi.prototype.getLabelsID = function (labelID, zapTraceSpan, options) {\r\n        return LabelsApiFp(this.configuration).getLabelsID(labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    LabelsApi.prototype.patchLabelsID = function (labelID, labelUpdate, zapTraceSpan, options) {\r\n        return LabelsApiFp(this.configuration).patchLabelsID(labelID, labelUpdate, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    LabelsApi.prototype.postLabels = function (labelCreateRequest, options) {\r\n        return LabelsApiFp(this.configuration).postLabels(labelCreateRequest, options)(this.axios, this.basePath);\r\n    };\r\n    return LabelsApi;\r\n}(BaseAPI));\r\nexport { LabelsApi };\r\nexport var NotificationEndpointsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        createNotificationEndpoint: function (notificationEndpoint, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (notificationEndpoint === null || notificationEndpoint === undefined) {\r\n                throw new RequiredError('notificationEndpoint', 'Required parameter notificationEndpoint was null or undefined when calling createNotificationEndpoint.');\r\n            }\r\n            var localVarPath = \"/notificationEndpoints\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"NotificationEndpoint\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(notificationEndpoint || {}) : (notificationEndpoint || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (endpointID === null || endpointID === undefined) {\r\n                throw new RequiredError('endpointID', 'Required parameter endpointID was null or undefined when calling deleteNotificationEndpointsID.');\r\n            }\r\n            var localVarPath = \"/notificationEndpoints/{endpointID}\"\r\n                .replace(\"{\" + \"endpointID\" + \"}\", encodeURIComponent(String(endpointID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getNotificationEndpoints: function (orgID, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getNotificationEndpoints.');\r\n            }\r\n            var localVarPath = \"/notificationEndpoints\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (endpointID === null || endpointID === undefined) {\r\n                throw new RequiredError('endpointID', 'Required parameter endpointID was null or undefined when calling getNotificationEndpointsID.');\r\n            }\r\n            var localVarPath = \"/notificationEndpoints/{endpointID}\"\r\n                .replace(\"{\" + \"endpointID\" + \"}\", encodeURIComponent(String(endpointID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchNotificationEndpointsID: function (endpointID, notificationEndpoint, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (endpointID === null || endpointID === undefined) {\r\n                throw new RequiredError('endpointID', 'Required parameter endpointID was null or undefined when calling patchNotificationEndpointsID.');\r\n            }\r\n            if (notificationEndpoint === null || notificationEndpoint === undefined) {\r\n                throw new RequiredError('notificationEndpoint', 'Required parameter notificationEndpoint was null or undefined when calling patchNotificationEndpointsID.');\r\n            }\r\n            var localVarPath = \"/notificationEndpoints/{endpointID}\"\r\n                .replace(\"{\" + \"endpointID\" + \"}\", encodeURIComponent(String(endpointID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"NotificationEndpoint\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(notificationEndpoint || {}) : (notificationEndpoint || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var NotificationEndpointsApiFp = function (configuration) {\r\n    return {\r\n        createNotificationEndpoint: function (notificationEndpoint, options) {\r\n            var localVarAxiosArgs = NotificationEndpointsApiAxiosParamCreator(configuration).createNotificationEndpoint(notificationEndpoint, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationEndpointsApiAxiosParamCreator(configuration).deleteNotificationEndpointsID(endpointID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getNotificationEndpoints: function (orgID, offset, limit, options) {\r\n            var localVarAxiosArgs = NotificationEndpointsApiAxiosParamCreator(configuration).getNotificationEndpoints(orgID, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationEndpointsApiAxiosParamCreator(configuration).getNotificationEndpointsID(endpointID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchNotificationEndpointsID: function (endpointID, notificationEndpoint, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationEndpointsApiAxiosParamCreator(configuration).patchNotificationEndpointsID(endpointID, notificationEndpoint, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var NotificationEndpointsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        createNotificationEndpoint: function (notificationEndpoint, options) {\r\n            return NotificationEndpointsApiFp(configuration).createNotificationEndpoint(notificationEndpoint, options)(axios, basePath);\r\n        },\r\n        deleteNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            return NotificationEndpointsApiFp(configuration).deleteNotificationEndpointsID(endpointID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getNotificationEndpoints: function (orgID, offset, limit, options) {\r\n            return NotificationEndpointsApiFp(configuration).getNotificationEndpoints(orgID, offset, limit, options)(axios, basePath);\r\n        },\r\n        getNotificationEndpointsID: function (endpointID, zapTraceSpan, options) {\r\n            return NotificationEndpointsApiFp(configuration).getNotificationEndpointsID(endpointID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchNotificationEndpointsID: function (endpointID, notificationEndpoint, zapTraceSpan, options) {\r\n            return NotificationEndpointsApiFp(configuration).patchNotificationEndpointsID(endpointID, notificationEndpoint, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar NotificationEndpointsApi = (function (_super) {\r\n    tslib_1.__extends(NotificationEndpointsApi, _super);\r\n    function NotificationEndpointsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NotificationEndpointsApi.prototype.createNotificationEndpoint = function (notificationEndpoint, options) {\r\n        return NotificationEndpointsApiFp(this.configuration).createNotificationEndpoint(notificationEndpoint, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationEndpointsApi.prototype.deleteNotificationEndpointsID = function (endpointID, zapTraceSpan, options) {\r\n        return NotificationEndpointsApiFp(this.configuration).deleteNotificationEndpointsID(endpointID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationEndpointsApi.prototype.getNotificationEndpoints = function (orgID, offset, limit, options) {\r\n        return NotificationEndpointsApiFp(this.configuration).getNotificationEndpoints(orgID, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationEndpointsApi.prototype.getNotificationEndpointsID = function (endpointID, zapTraceSpan, options) {\r\n        return NotificationEndpointsApiFp(this.configuration).getNotificationEndpointsID(endpointID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationEndpointsApi.prototype.patchNotificationEndpointsID = function (endpointID, notificationEndpoint, zapTraceSpan, options) {\r\n        return NotificationEndpointsApiFp(this.configuration).patchNotificationEndpointsID(endpointID, notificationEndpoint, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return NotificationEndpointsApi;\r\n}(BaseAPI));\r\nexport { NotificationEndpointsApi };\r\nexport var NotificationRulesApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        createNotificationRule: function (notificationRule, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (notificationRule === null || notificationRule === undefined) {\r\n                throw new RequiredError('notificationRule', 'Required parameter notificationRule was null or undefined when calling createNotificationRule.');\r\n            }\r\n            var localVarPath = \"/notificationRules\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"NotificationRule\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(notificationRule || {}) : (notificationRule || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (ruleID === null || ruleID === undefined) {\r\n                throw new RequiredError('ruleID', 'Required parameter ruleID was null or undefined when calling deleteNotificationRulesID.');\r\n            }\r\n            var localVarPath = \"/notificationRules/{ruleID}\"\r\n                .replace(\"{\" + \"ruleID\" + \"}\", encodeURIComponent(String(ruleID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getNotificationRules: function (orgID, offset, limit, checkID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getNotificationRules.');\r\n            }\r\n            var localVarPath = \"/notificationRules\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (checkID !== undefined) {\r\n                localVarQueryParameter['checkID'] = checkID;\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (ruleID === null || ruleID === undefined) {\r\n                throw new RequiredError('ruleID', 'Required parameter ruleID was null or undefined when calling getNotificationRulesID.');\r\n            }\r\n            var localVarPath = \"/notificationRules/{ruleID}\"\r\n                .replace(\"{\" + \"ruleID\" + \"}\", encodeURIComponent(String(ruleID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchNotificationRulesID: function (ruleID, notificationRule, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (ruleID === null || ruleID === undefined) {\r\n                throw new RequiredError('ruleID', 'Required parameter ruleID was null or undefined when calling patchNotificationRulesID.');\r\n            }\r\n            if (notificationRule === null || notificationRule === undefined) {\r\n                throw new RequiredError('notificationRule', 'Required parameter notificationRule was null or undefined when calling patchNotificationRulesID.');\r\n            }\r\n            var localVarPath = \"/notificationRules/{ruleID}\"\r\n                .replace(\"{\" + \"ruleID\" + \"}\", encodeURIComponent(String(ruleID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"NotificationRule\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(notificationRule || {}) : (notificationRule || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var NotificationRulesApiFp = function (configuration) {\r\n    return {\r\n        createNotificationRule: function (notificationRule, options) {\r\n            var localVarAxiosArgs = NotificationRulesApiAxiosParamCreator(configuration).createNotificationRule(notificationRule, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationRulesApiAxiosParamCreator(configuration).deleteNotificationRulesID(ruleID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getNotificationRules: function (orgID, offset, limit, checkID, options) {\r\n            var localVarAxiosArgs = NotificationRulesApiAxiosParamCreator(configuration).getNotificationRules(orgID, offset, limit, checkID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationRulesApiAxiosParamCreator(configuration).getNotificationRulesID(ruleID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchNotificationRulesID: function (ruleID, notificationRule, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = NotificationRulesApiAxiosParamCreator(configuration).patchNotificationRulesID(ruleID, notificationRule, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var NotificationRulesApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        createNotificationRule: function (notificationRule, options) {\r\n            return NotificationRulesApiFp(configuration).createNotificationRule(notificationRule, options)(axios, basePath);\r\n        },\r\n        deleteNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            return NotificationRulesApiFp(configuration).deleteNotificationRulesID(ruleID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getNotificationRules: function (orgID, offset, limit, checkID, options) {\r\n            return NotificationRulesApiFp(configuration).getNotificationRules(orgID, offset, limit, checkID, options)(axios, basePath);\r\n        },\r\n        getNotificationRulesID: function (ruleID, zapTraceSpan, options) {\r\n            return NotificationRulesApiFp(configuration).getNotificationRulesID(ruleID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchNotificationRulesID: function (ruleID, notificationRule, zapTraceSpan, options) {\r\n            return NotificationRulesApiFp(configuration).patchNotificationRulesID(ruleID, notificationRule, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar NotificationRulesApi = (function (_super) {\r\n    tslib_1.__extends(NotificationRulesApi, _super);\r\n    function NotificationRulesApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NotificationRulesApi.prototype.createNotificationRule = function (notificationRule, options) {\r\n        return NotificationRulesApiFp(this.configuration).createNotificationRule(notificationRule, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationRulesApi.prototype.deleteNotificationRulesID = function (ruleID, zapTraceSpan, options) {\r\n        return NotificationRulesApiFp(this.configuration).deleteNotificationRulesID(ruleID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationRulesApi.prototype.getNotificationRules = function (orgID, offset, limit, checkID, options) {\r\n        return NotificationRulesApiFp(this.configuration).getNotificationRules(orgID, offset, limit, checkID, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationRulesApi.prototype.getNotificationRulesID = function (ruleID, zapTraceSpan, options) {\r\n        return NotificationRulesApiFp(this.configuration).getNotificationRulesID(ruleID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    NotificationRulesApi.prototype.patchNotificationRulesID = function (ruleID, notificationRule, zapTraceSpan, options) {\r\n        return NotificationRulesApiFp(this.configuration).patchNotificationRulesID(ruleID, notificationRule, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return NotificationRulesApi;\r\n}(BaseAPI));\r\nexport { NotificationRulesApi };\r\nexport var OperationLogsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDLogs.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/logs\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDLogs.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/logs\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDLogs.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/logs\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling getUsersIDLogs.');\r\n            }\r\n            var localVarPath = \"/users/{userID}/logs\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var OperationLogsApiFp = function (configuration) {\r\n    return {\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = OperationLogsApiAxiosParamCreator(configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = OperationLogsApiAxiosParamCreator(configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = OperationLogsApiAxiosParamCreator(configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = OperationLogsApiAxiosParamCreator(configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var OperationLogsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getBucketsIDLogs: function (bucketID, zapTraceSpan, offset, limit, options) {\r\n            return OperationLogsApiFp(configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDLogs: function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n            return OperationLogsApiFp(configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            return OperationLogsApiFp(configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            return OperationLogsApiFp(configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar OperationLogsApi = (function (_super) {\r\n    tslib_1.__extends(OperationLogsApi, _super);\r\n    function OperationLogsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    OperationLogsApi.prototype.getBucketsIDLogs = function (bucketID, zapTraceSpan, offset, limit, options) {\r\n        return OperationLogsApiFp(this.configuration).getBucketsIDLogs(bucketID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    OperationLogsApi.prototype.getDashboardsIDLogs = function (dashboardID, zapTraceSpan, offset, limit, options) {\r\n        return OperationLogsApiFp(this.configuration).getDashboardsIDLogs(dashboardID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    OperationLogsApi.prototype.getOrgsIDLogs = function (orgID, zapTraceSpan, offset, limit, options) {\r\n        return OperationLogsApiFp(this.configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    OperationLogsApi.prototype.getUsersIDLogs = function (userID, zapTraceSpan, offset, limit, options) {\r\n        return OperationLogsApiFp(this.configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    return OperationLogsApi;\r\n}(BaseAPI));\r\nexport { OperationLogsApi };\r\nexport var OrganizationsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteOrgsID: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteOrgsIDLabelsID: function (orgID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteOrgsIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteOrgsIDMembersID.');\r\n            }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteOrgsIDOwnersID.');\r\n            }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgs: function (zapTraceSpan, org, orgID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/orgs\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsID: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDLabels: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDLabels.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/labels\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDLogs.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/logs\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDMembers.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDOwners.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchOrgsID: function (orgID, organization, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling patchOrgsID.');\r\n            }\r\n            if (organization === null || organization === undefined) {\r\n                throw new RequiredError('organization', 'Required parameter organization was null or undefined when calling patchOrgsID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Organization\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(organization || {}) : (organization || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling patchOrgsIDSecrets.');\r\n            }\r\n            if (requestBody === null || requestBody === undefined) {\r\n                throw new RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling patchOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"{ [key: string]: string; }\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody || {}) : (requestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgs: function (organization, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (organization === null || organization === undefined) {\r\n                throw new RequiredError('organization', 'Required parameter organization was null or undefined when calling postOrgs.');\r\n            }\r\n            var localVarPath = \"/orgs\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Organization\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(organization || {}) : (organization || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDLabels: function (orgID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postOrgsIDLabels.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/labels\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postOrgsIDMembers.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postOrgsIDOwners.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDSecrets.');\r\n            }\r\n            if (secretKeys === null || secretKeys === undefined) {\r\n                throw new RequiredError('secretKeys', 'Required parameter secretKeys was null or undefined when calling postOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets/delete\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"SecretKeys\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(secretKeys || {}) : (secretKeys || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var OrganizationsApiFp = function (configuration) {\r\n    return {\r\n        deleteOrgsID: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).deleteOrgsID(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteOrgsIDLabelsID: function (orgID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).deleteOrgsIDLabelsID(orgID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgs: function (zapTraceSpan, org, orgID, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgs(zapTraceSpan, org, orgID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsID: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsID(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDLabels: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsIDLabels(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsIDMembers(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsIDOwners(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchOrgsID: function (orgID, organization, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).patchOrgsID(orgID, organization, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgs: function (organization, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).postOrgs(organization, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDLabels: function (orgID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).postOrgsIDLabels(orgID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = OrganizationsApiAxiosParamCreator(configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var OrganizationsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteOrgsID: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).deleteOrgsID(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteOrgsIDLabelsID: function (orgID, labelID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).deleteOrgsIDLabelsID(orgID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgs: function (zapTraceSpan, org, orgID, options) {\r\n            return OrganizationsApiFp(configuration).getOrgs(zapTraceSpan, org, orgID, options)(axios, basePath);\r\n        },\r\n        getOrgsID: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsID(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDLabels: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsIDLabels(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDLogs: function (orgID, zapTraceSpan, offset, limit, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsIDMembers(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsIDOwners(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchOrgsID: function (orgID, organization, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).patchOrgsID(orgID, organization, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgs: function (organization, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).postOrgs(organization, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDLabels: function (orgID, labelMapping, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).postOrgsIDLabels(orgID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            return OrganizationsApiFp(configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar OrganizationsApi = (function (_super) {\r\n    tslib_1.__extends(OrganizationsApi, _super);\r\n    function OrganizationsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    OrganizationsApi.prototype.deleteOrgsID = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).deleteOrgsID(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.deleteOrgsIDLabelsID = function (orgID, labelID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).deleteOrgsIDLabelsID(orgID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.deleteOrgsIDMembersID = function (userID, orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.deleteOrgsIDOwnersID = function (userID, orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgs = function (zapTraceSpan, org, orgID, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgs(zapTraceSpan, org, orgID, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsID = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsID(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsIDLabels = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsIDLabels(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsIDLogs = function (orgID, zapTraceSpan, offset, limit, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsIDLogs(orgID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsIDMembers = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsIDMembers(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsIDOwners = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsIDOwners(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.getOrgsIDSecrets = function (orgID, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.patchOrgsID = function (orgID, organization, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).patchOrgsID(orgID, organization, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.patchOrgsIDSecrets = function (orgID, requestBody, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.postOrgs = function (organization, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).postOrgs(organization, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.postOrgsIDLabels = function (orgID, labelMapping, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).postOrgsIDLabels(orgID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.postOrgsIDMembers = function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.postOrgsIDOwners = function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    OrganizationsApi.prototype.postOrgsIDSecrets = function (orgID, secretKeys, zapTraceSpan, options) {\r\n        return OrganizationsApiFp(this.configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return OrganizationsApi;\r\n}(BaseAPI));\r\nexport { OrganizationsApi };\r\nexport var QueryApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getQuerySuggestions: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/query/suggestions\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getQuerySuggestionsName: function (name, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (name === null || name === undefined) {\r\n                throw new RequiredError('name', 'Required parameter name was null or undefined when calling getQuerySuggestionsName.');\r\n            }\r\n            var localVarPath = \"/query/suggestions/{name}\"\r\n                .replace(\"{\" + \"name\" + \"}\", encodeURIComponent(String(name)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postQuery: function (zapTraceSpan, contentType, org, orgID, query, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/query\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            if (contentType !== undefined && contentType !== null) {\r\n                localVarHeaderParameter['Content-Type'] = String(contentType);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Query\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(query || {}) : (query || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postQueryAnalyze: function (zapTraceSpan, contentType, query, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/query/analyze\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            if (contentType !== undefined && contentType !== null) {\r\n                localVarHeaderParameter['Content-Type'] = String(contentType);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Query\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(query || {}) : (query || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postQueryAst: function (zapTraceSpan, contentType, languageRequest, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/query/ast\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            if (contentType !== undefined && contentType !== null) {\r\n                localVarHeaderParameter['Content-Type'] = String(contentType);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LanguageRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(languageRequest || {}) : (languageRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var QueryApiFp = function (configuration) {\r\n    return {\r\n        getQuerySuggestions: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = QueryApiAxiosParamCreator(configuration).getQuerySuggestions(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getQuerySuggestionsName: function (name, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = QueryApiAxiosParamCreator(configuration).getQuerySuggestionsName(name, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postQuery: function (zapTraceSpan, contentType, org, orgID, query, options) {\r\n            var localVarAxiosArgs = QueryApiAxiosParamCreator(configuration).postQuery(zapTraceSpan, contentType, org, orgID, query, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postQueryAnalyze: function (zapTraceSpan, contentType, query, options) {\r\n            var localVarAxiosArgs = QueryApiAxiosParamCreator(configuration).postQueryAnalyze(zapTraceSpan, contentType, query, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postQueryAst: function (zapTraceSpan, contentType, languageRequest, options) {\r\n            var localVarAxiosArgs = QueryApiAxiosParamCreator(configuration).postQueryAst(zapTraceSpan, contentType, languageRequest, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var QueryApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getQuerySuggestions: function (zapTraceSpan, options) {\r\n            return QueryApiFp(configuration).getQuerySuggestions(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getQuerySuggestionsName: function (name, zapTraceSpan, options) {\r\n            return QueryApiFp(configuration).getQuerySuggestionsName(name, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postQuery: function (zapTraceSpan, contentType, org, orgID, query, options) {\r\n            return QueryApiFp(configuration).postQuery(zapTraceSpan, contentType, org, orgID, query, options)(axios, basePath);\r\n        },\r\n        postQueryAnalyze: function (zapTraceSpan, contentType, query, options) {\r\n            return QueryApiFp(configuration).postQueryAnalyze(zapTraceSpan, contentType, query, options)(axios, basePath);\r\n        },\r\n        postQueryAst: function (zapTraceSpan, contentType, languageRequest, options) {\r\n            return QueryApiFp(configuration).postQueryAst(zapTraceSpan, contentType, languageRequest, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar QueryApi = (function (_super) {\r\n    tslib_1.__extends(QueryApi, _super);\r\n    function QueryApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QueryApi.prototype.getQuerySuggestions = function (zapTraceSpan, options) {\r\n        return QueryApiFp(this.configuration).getQuerySuggestions(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    QueryApi.prototype.getQuerySuggestionsName = function (name, zapTraceSpan, options) {\r\n        return QueryApiFp(this.configuration).getQuerySuggestionsName(name, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    QueryApi.prototype.postQuery = function (zapTraceSpan, contentType, org, orgID, query, options) {\r\n        return QueryApiFp(this.configuration).postQuery(zapTraceSpan, contentType, org, orgID, query, options)(this.axios, this.basePath);\r\n    };\r\n    QueryApi.prototype.postQueryAnalyze = function (zapTraceSpan, contentType, query, options) {\r\n        return QueryApiFp(this.configuration).postQueryAnalyze(zapTraceSpan, contentType, query, options)(this.axios, this.basePath);\r\n    };\r\n    QueryApi.prototype.postQueryAst = function (zapTraceSpan, contentType, languageRequest, options) {\r\n        return QueryApiFp(this.configuration).postQueryAst(zapTraceSpan, contentType, languageRequest, options)(this.axios, this.basePath);\r\n    };\r\n    return QueryApi;\r\n}(BaseAPI));\r\nexport { QueryApi };\r\nexport var ReadyApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getReady: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/ready\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ReadyApiFp = function (configuration) {\r\n    return {\r\n        getReady: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ReadyApiAxiosParamCreator(configuration).getReady(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ReadyApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getReady: function (zapTraceSpan, options) {\r\n            return ReadyApiFp(configuration).getReady(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar ReadyApi = (function (_super) {\r\n    tslib_1.__extends(ReadyApi, _super);\r\n    function ReadyApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReadyApi.prototype.getReady = function (zapTraceSpan, options) {\r\n        return ReadyApiFp(this.configuration).getReady(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return ReadyApi;\r\n}(BaseAPI));\r\nexport { ReadyApi };\r\nexport var ScraperTargetsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteScrapersIDLabelsID: function (scraperTargetID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteScrapersIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteScrapersIDMembersID.');\r\n            }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersIDMembersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteScrapersIDOwnersID.');\r\n            }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapers: function (zapTraceSpan, name, id, orgID, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/scrapers\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (name !== undefined) {\r\n                localVarQueryParameter['name'] = name;\r\n            }\r\n            if (id) {\r\n                localVarQueryParameter['id'] = id;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersIDLabels: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersIDLabels.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/labels\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersIDMembers.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersIDOwners.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchScrapersID: function (scraperTargetID, scraperTargetRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling patchScrapersID.');\r\n            }\r\n            if (scraperTargetRequest === null || scraperTargetRequest === undefined) {\r\n                throw new RequiredError('scraperTargetRequest', 'Required parameter scraperTargetRequest was null or undefined when calling patchScrapersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"ScraperTargetRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(scraperTargetRequest || {}) : (scraperTargetRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchScrapersIDLabelsID: function (scraperTargetID, labelID, label, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling patchScrapersIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling patchScrapersIDLabelsID.');\r\n            }\r\n            if (label === null || label === undefined) {\r\n                throw new RequiredError('label', 'Required parameter label was null or undefined when calling patchScrapersIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Label\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(label || {}) : (label || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapers: function (scraperTargetRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetRequest === null || scraperTargetRequest === undefined) {\r\n                throw new RequiredError('scraperTargetRequest', 'Required parameter scraperTargetRequest was null or undefined when calling postScrapers.');\r\n            }\r\n            var localVarPath = \"/scrapers\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"ScraperTargetRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(scraperTargetRequest || {}) : (scraperTargetRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapersIDLabels: function (scraperTargetID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling postScrapersIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postScrapersIDLabels.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/labels\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling postScrapersIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postScrapersIDMembers.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling postScrapersIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postScrapersIDOwners.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ScraperTargetsApiFp = function (configuration) {\r\n    return {\r\n        deleteScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).deleteScrapersID(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteScrapersIDLabelsID: function (scraperTargetID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).deleteScrapersIDLabelsID(scraperTargetID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapers: function (zapTraceSpan, name, id, orgID, org, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).getScrapers(zapTraceSpan, name, id, orgID, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).getScrapersID(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersIDLabels: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).getScrapersIDLabels(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchScrapersID: function (scraperTargetID, scraperTargetRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).patchScrapersID(scraperTargetID, scraperTargetRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchScrapersIDLabelsID: function (scraperTargetID, labelID, label, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).patchScrapersIDLabelsID(scraperTargetID, labelID, label, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapers: function (scraperTargetRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).postScrapers(scraperTargetRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapersIDLabels: function (scraperTargetID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).postScrapersIDLabels(scraperTargetID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ScraperTargetsApiAxiosParamCreator(configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ScraperTargetsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).deleteScrapersID(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteScrapersIDLabelsID: function (scraperTargetID, labelID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).deleteScrapersIDLabelsID(scraperTargetID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapers: function (zapTraceSpan, name, id, orgID, org, options) {\r\n            return ScraperTargetsApiFp(configuration).getScrapers(zapTraceSpan, name, id, orgID, org, options)(axios, basePath);\r\n        },\r\n        getScrapersID: function (scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).getScrapersID(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapersIDLabels: function (scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).getScrapersIDLabels(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchScrapersID: function (scraperTargetID, scraperTargetRequest, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).patchScrapersID(scraperTargetID, scraperTargetRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchScrapersIDLabelsID: function (scraperTargetID, labelID, label, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).patchScrapersIDLabelsID(scraperTargetID, labelID, label, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapers: function (scraperTargetRequest, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).postScrapers(scraperTargetRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapersIDLabels: function (scraperTargetID, labelMapping, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).postScrapersIDLabels(scraperTargetID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return ScraperTargetsApiFp(configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar ScraperTargetsApi = (function (_super) {\r\n    tslib_1.__extends(ScraperTargetsApi, _super);\r\n    function ScraperTargetsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ScraperTargetsApi.prototype.deleteScrapersID = function (scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).deleteScrapersID(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.deleteScrapersIDLabelsID = function (scraperTargetID, labelID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).deleteScrapersIDLabelsID(scraperTargetID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.deleteScrapersIDMembersID = function (userID, scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.deleteScrapersIDOwnersID = function (userID, scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.getScrapers = function (zapTraceSpan, name, id, orgID, org, options) {\r\n        return ScraperTargetsApiFp(this.configuration).getScrapers(zapTraceSpan, name, id, orgID, org, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.getScrapersID = function (scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).getScrapersID(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.getScrapersIDLabels = function (scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).getScrapersIDLabels(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.getScrapersIDMembers = function (scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.getScrapersIDOwners = function (scraperTargetID, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.patchScrapersID = function (scraperTargetID, scraperTargetRequest, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).patchScrapersID(scraperTargetID, scraperTargetRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.patchScrapersIDLabelsID = function (scraperTargetID, labelID, label, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).patchScrapersIDLabelsID(scraperTargetID, labelID, label, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.postScrapers = function (scraperTargetRequest, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).postScrapers(scraperTargetRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.postScrapersIDLabels = function (scraperTargetID, labelMapping, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).postScrapersIDLabels(scraperTargetID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.postScrapersIDMembers = function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ScraperTargetsApi.prototype.postScrapersIDOwners = function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return ScraperTargetsApiFp(this.configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return ScraperTargetsApi;\r\n}(BaseAPI));\r\nexport { ScraperTargetsApi };\r\nexport var SecretsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling patchOrgsIDSecrets.');\r\n            }\r\n            if (requestBody === null || requestBody === undefined) {\r\n                throw new RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling patchOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"{ [key: string]: string; }\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody || {}) : (requestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDSecrets.');\r\n            }\r\n            if (secretKeys === null || secretKeys === undefined) {\r\n                throw new RequiredError('secretKeys', 'Required parameter secretKeys was null or undefined when calling postOrgsIDSecrets.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/secrets/delete\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"SecretKeys\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(secretKeys || {}) : (secretKeys || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SecretsApiFp = function (configuration) {\r\n    return {\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SecretsApiAxiosParamCreator(configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SecretsApiAxiosParamCreator(configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SecretsApiAxiosParamCreator(configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SecretsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getOrgsIDSecrets: function (orgID, zapTraceSpan, options) {\r\n            return SecretsApiFp(configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchOrgsIDSecrets: function (orgID, requestBody, zapTraceSpan, options) {\r\n            return SecretsApiFp(configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDSecrets: function (orgID, secretKeys, zapTraceSpan, options) {\r\n            return SecretsApiFp(configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar SecretsApi = (function (_super) {\r\n    tslib_1.__extends(SecretsApi, _super);\r\n    function SecretsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SecretsApi.prototype.getOrgsIDSecrets = function (orgID, zapTraceSpan, options) {\r\n        return SecretsApiFp(this.configuration).getOrgsIDSecrets(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SecretsApi.prototype.patchOrgsIDSecrets = function (orgID, requestBody, zapTraceSpan, options) {\r\n        return SecretsApiFp(this.configuration).patchOrgsIDSecrets(orgID, requestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SecretsApi.prototype.postOrgsIDSecrets = function (orgID, secretKeys, zapTraceSpan, options) {\r\n        return SecretsApiFp(this.configuration).postOrgsIDSecrets(orgID, secretKeys, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return SecretsApi;\r\n}(BaseAPI));\r\nexport { SecretsApi };\r\nexport var SetupApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getSetup: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/setup\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postSetup: function (onboardingRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (onboardingRequest === null || onboardingRequest === undefined) {\r\n                throw new RequiredError('onboardingRequest', 'Required parameter onboardingRequest was null or undefined when calling postSetup.');\r\n            }\r\n            var localVarPath = \"/setup\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"OnboardingRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(onboardingRequest || {}) : (onboardingRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SetupApiFp = function (configuration) {\r\n    return {\r\n        getSetup: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SetupApiAxiosParamCreator(configuration).getSetup(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postSetup: function (onboardingRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SetupApiAxiosParamCreator(configuration).postSetup(onboardingRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SetupApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getSetup: function (zapTraceSpan, options) {\r\n            return SetupApiFp(configuration).getSetup(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postSetup: function (onboardingRequest, zapTraceSpan, options) {\r\n            return SetupApiFp(configuration).postSetup(onboardingRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar SetupApi = (function (_super) {\r\n    tslib_1.__extends(SetupApi, _super);\r\n    function SetupApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SetupApi.prototype.getSetup = function (zapTraceSpan, options) {\r\n        return SetupApiFp(this.configuration).getSetup(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SetupApi.prototype.postSetup = function (onboardingRequest, zapTraceSpan, options) {\r\n        return SetupApiFp(this.configuration).postSetup(onboardingRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return SetupApi;\r\n}(BaseAPI));\r\nexport { SetupApi };\r\nexport var SourcesApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling deleteSourcesID.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getSources: function (zapTraceSpan, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/sources\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling getSourcesID.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling getSourcesIDBuckets.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}/buckets\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getSourcesIDHealth: function (sourceID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling getSourcesIDHealth.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}/health\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchSourcesID: function (sourceID, source, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (sourceID === null || sourceID === undefined) {\r\n                throw new RequiredError('sourceID', 'Required parameter sourceID was null or undefined when calling patchSourcesID.');\r\n            }\r\n            if (source === null || source === undefined) {\r\n                throw new RequiredError('source', 'Required parameter source was null or undefined when calling patchSourcesID.');\r\n            }\r\n            var localVarPath = \"/sources/{sourceID}\"\r\n                .replace(\"{\" + \"sourceID\" + \"}\", encodeURIComponent(String(sourceID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Source\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(source || {}) : (source || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postSources: function (source, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (source === null || source === undefined) {\r\n                throw new RequiredError('source', 'Required parameter source was null or undefined when calling postSources.');\r\n            }\r\n            var localVarPath = \"/sources\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Source\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(source || {}) : (source || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SourcesApiFp = function (configuration) {\r\n    return {\r\n        deleteSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).deleteSourcesID(sourceID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getSources: function (zapTraceSpan, org, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSources(zapTraceSpan, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSourcesID(sourceID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getSourcesIDHealth: function (sourceID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).getSourcesIDHealth(sourceID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchSourcesID: function (sourceID, source, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).patchSourcesID(sourceID, source, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postSources: function (source, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = SourcesApiAxiosParamCreator(configuration).postSources(source, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var SourcesApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            return SourcesApiFp(configuration).deleteSourcesID(sourceID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getSources: function (zapTraceSpan, org, options) {\r\n            return SourcesApiFp(configuration).getSources(zapTraceSpan, org, options)(axios, basePath);\r\n        },\r\n        getSourcesID: function (sourceID, zapTraceSpan, options) {\r\n            return SourcesApiFp(configuration).getSourcesID(sourceID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getSourcesIDBuckets: function (sourceID, zapTraceSpan, org, options) {\r\n            return SourcesApiFp(configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options)(axios, basePath);\r\n        },\r\n        getSourcesIDHealth: function (sourceID, zapTraceSpan, options) {\r\n            return SourcesApiFp(configuration).getSourcesIDHealth(sourceID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchSourcesID: function (sourceID, source, zapTraceSpan, options) {\r\n            return SourcesApiFp(configuration).patchSourcesID(sourceID, source, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postSources: function (source, zapTraceSpan, options) {\r\n            return SourcesApiFp(configuration).postSources(source, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar SourcesApi = (function (_super) {\r\n    tslib_1.__extends(SourcesApi, _super);\r\n    function SourcesApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    SourcesApi.prototype.deleteSourcesID = function (sourceID, zapTraceSpan, options) {\r\n        return SourcesApiFp(this.configuration).deleteSourcesID(sourceID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.getSources = function (zapTraceSpan, org, options) {\r\n        return SourcesApiFp(this.configuration).getSources(zapTraceSpan, org, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.getSourcesID = function (sourceID, zapTraceSpan, options) {\r\n        return SourcesApiFp(this.configuration).getSourcesID(sourceID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.getSourcesIDBuckets = function (sourceID, zapTraceSpan, org, options) {\r\n        return SourcesApiFp(this.configuration).getSourcesIDBuckets(sourceID, zapTraceSpan, org, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.getSourcesIDHealth = function (sourceID, zapTraceSpan, options) {\r\n        return SourcesApiFp(this.configuration).getSourcesIDHealth(sourceID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.patchSourcesID = function (sourceID, source, zapTraceSpan, options) {\r\n        return SourcesApiFp(this.configuration).patchSourcesID(sourceID, source, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    SourcesApi.prototype.postSources = function (source, zapTraceSpan, options) {\r\n        return SourcesApiFp(this.configuration).postSources(source, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return SourcesApi;\r\n}(BaseAPI));\r\nexport { SourcesApi };\r\nexport var TasksApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteTasksID: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTasksIDLabelsID: function (taskID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteTasksIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTasksIDMembersID.');\r\n            }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksIDMembersID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTasksIDOwnersID.');\r\n            }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasks: function (zapTraceSpan, after, user, org, orgID, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/tasks\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (after !== undefined) {\r\n                localVarQueryParameter['after'] = after;\r\n            }\r\n            if (user !== undefined) {\r\n                localVarQueryParameter['user'] = user;\r\n            }\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksID: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDLabels: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDLabels.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/labels\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDLogs: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDLogs.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/logs\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDMembers.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDOwners.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDRuns: function (taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDRuns.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/runs\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (after !== undefined) {\r\n                localVarQueryParameter['after'] = after;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (afterTime !== undefined) {\r\n                localVarQueryParameter['afterTime'] = afterTime.toISOString();\r\n            }\r\n            if (beforeTime !== undefined) {\r\n                localVarQueryParameter['beforeTime'] = beforeTime.toISOString();\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDRunsID: function (taskID, runID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDRunsID.');\r\n            }\r\n            if (runID === null || runID === undefined) {\r\n                throw new RequiredError('runID', 'Required parameter runID was null or undefined when calling getTasksIDRunsID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/runs/{runID}\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)))\r\n                .replace(\"{\" + \"runID\" + \"}\", encodeURIComponent(String(runID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDRunsIDLogs: function (taskID, runID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDRunsIDLogs.');\r\n            }\r\n            if (runID === null || runID === undefined) {\r\n                throw new RequiredError('runID', 'Required parameter runID was null or undefined when calling getTasksIDRunsIDLogs.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/runs/{runID}/logs\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)))\r\n                .replace(\"{\" + \"runID\" + \"}\", encodeURIComponent(String(runID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchTasksID: function (taskID, taskUpdateRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling patchTasksID.');\r\n            }\r\n            if (taskUpdateRequest === null || taskUpdateRequest === undefined) {\r\n                throw new RequiredError('taskUpdateRequest', 'Required parameter taskUpdateRequest was null or undefined when calling patchTasksID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"TaskUpdateRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(taskUpdateRequest || {}) : (taskUpdateRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasks: function (taskCreateRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskCreateRequest === null || taskCreateRequest === undefined) {\r\n                throw new RequiredError('taskCreateRequest', 'Required parameter taskCreateRequest was null or undefined when calling postTasks.');\r\n            }\r\n            var localVarPath = \"/tasks\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"TaskCreateRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(taskCreateRequest || {}) : (taskCreateRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDLabels: function (taskID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postTasksIDLabels.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/labels\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTasksIDMembers.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTasksIDOwners.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDRuns: function (taskID, zapTraceSpan, runManually, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDRuns.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/runs\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"RunManually\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(runManually || {}) : (runManually || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDRunsIDRetry: function (taskID, runID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDRunsIDRetry.');\r\n            }\r\n            if (runID === null || runID === undefined) {\r\n                throw new RequiredError('runID', 'Required parameter runID was null or undefined when calling postTasksIDRunsIDRetry.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/runs/{runID}/retry\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)))\r\n                .replace(\"{\" + \"runID\" + \"}\", encodeURIComponent(String(runID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TasksApiFp = function (configuration) {\r\n    return {\r\n        deleteTasksID: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).deleteTasksID(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTasksIDLabelsID: function (taskID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).deleteTasksIDLabelsID(taskID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasks: function (zapTraceSpan, after, user, org, orgID, limit, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasks(zapTraceSpan, after, user, org, orgID, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksID: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksID(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDLabels: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDLabels(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDLogs: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDLogs(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDMembers(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDOwners(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDRuns: function (taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDRuns(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDRunsID: function (taskID, runID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDRunsID(taskID, runID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDRunsIDLogs: function (taskID, runID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).getTasksIDRunsIDLogs(taskID, runID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchTasksID: function (taskID, taskUpdateRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).patchTasksID(taskID, taskUpdateRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasks: function (taskCreateRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasks(taskCreateRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDLabels: function (taskID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasksIDLabels(taskID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDRuns: function (taskID, zapTraceSpan, runManually, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasksIDRuns(taskID, zapTraceSpan, runManually, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDRunsIDRetry: function (taskID, runID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TasksApiAxiosParamCreator(configuration).postTasksIDRunsIDRetry(taskID, runID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TasksApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteTasksID: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).deleteTasksID(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTasksIDLabelsID: function (taskID, labelID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).deleteTasksIDLabelsID(taskID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasks: function (zapTraceSpan, after, user, org, orgID, limit, options) {\r\n            return TasksApiFp(configuration).getTasks(zapTraceSpan, after, user, org, orgID, limit, options)(axios, basePath);\r\n        },\r\n        getTasksID: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksID(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDLabels: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDLabels(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDLogs: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDLogs(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDMembers(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDOwners(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDRuns: function (taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options) {\r\n            return TasksApiFp(configuration).getTasksIDRuns(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options)(axios, basePath);\r\n        },\r\n        getTasksIDRunsID: function (taskID, runID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDRunsID(taskID, runID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDRunsIDLogs: function (taskID, runID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).getTasksIDRunsIDLogs(taskID, runID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchTasksID: function (taskID, taskUpdateRequest, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).patchTasksID(taskID, taskUpdateRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasks: function (taskCreateRequest, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).postTasks(taskCreateRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDLabels: function (taskID, labelMapping, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).postTasksIDLabels(taskID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDRuns: function (taskID, zapTraceSpan, runManually, options) {\r\n            return TasksApiFp(configuration).postTasksIDRuns(taskID, zapTraceSpan, runManually, options)(axios, basePath);\r\n        },\r\n        postTasksIDRunsIDRetry: function (taskID, runID, zapTraceSpan, options) {\r\n            return TasksApiFp(configuration).postTasksIDRunsIDRetry(taskID, runID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar TasksApi = (function (_super) {\r\n    tslib_1.__extends(TasksApi, _super);\r\n    function TasksApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TasksApi.prototype.deleteTasksID = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).deleteTasksID(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.deleteTasksIDLabelsID = function (taskID, labelID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).deleteTasksIDLabelsID(taskID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.deleteTasksIDMembersID = function (userID, taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.deleteTasksIDOwnersID = function (userID, taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasks = function (zapTraceSpan, after, user, org, orgID, limit, options) {\r\n        return TasksApiFp(this.configuration).getTasks(zapTraceSpan, after, user, org, orgID, limit, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksID = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksID(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDLabels = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDLabels(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDLogs = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDLogs(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDMembers = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDMembers(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDOwners = function (taskID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDOwners(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDRuns = function (taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDRuns(taskID, zapTraceSpan, after, limit, afterTime, beforeTime, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDRunsID = function (taskID, runID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDRunsID(taskID, runID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.getTasksIDRunsIDLogs = function (taskID, runID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).getTasksIDRunsIDLogs(taskID, runID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.patchTasksID = function (taskID, taskUpdateRequest, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).patchTasksID(taskID, taskUpdateRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasks = function (taskCreateRequest, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).postTasks(taskCreateRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasksIDLabels = function (taskID, labelMapping, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).postTasksIDLabels(taskID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasksIDMembers = function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasksIDOwners = function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasksIDRuns = function (taskID, zapTraceSpan, runManually, options) {\r\n        return TasksApiFp(this.configuration).postTasksIDRuns(taskID, zapTraceSpan, runManually, options)(this.axios, this.basePath);\r\n    };\r\n    TasksApi.prototype.postTasksIDRunsIDRetry = function (taskID, runID, zapTraceSpan, options) {\r\n        return TasksApiFp(this.configuration).postTasksIDRunsIDRetry(taskID, runID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return TasksApi;\r\n}(BaseAPI));\r\nexport { TasksApi };\r\nexport var TelegrafsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteTelegrafsID: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTelegrafsIDLabelsID: function (telegrafID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteTelegrafsIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTelegrafsIDMembersID.');\r\n            }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTelegrafsIDOwnersID.');\r\n            }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafs: function (zapTraceSpan, orgID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/telegrafs\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsID: function (telegrafID, zapTraceSpan, accept, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            if (accept !== undefined && accept !== null) {\r\n                localVarHeaderParameter['Accept'] = String(accept);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsIDLabels: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsIDLabels.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/labels\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsIDMembers.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsIDOwners.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafs: function (telegrafRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafRequest === null || telegrafRequest === undefined) {\r\n                throw new RequiredError('telegrafRequest', 'Required parameter telegrafRequest was null or undefined when calling postTelegrafs.');\r\n            }\r\n            var localVarPath = \"/telegrafs\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"TelegrafRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(telegrafRequest || {}) : (telegrafRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafsIDLabels: function (telegrafID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling postTelegrafsIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postTelegrafsIDLabels.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/labels\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling postTelegrafsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTelegrafsIDMembers.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling postTelegrafsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTelegrafsIDOwners.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putTelegrafsID: function (telegrafID, telegrafRequest, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling putTelegrafsID.');\r\n            }\r\n            if (telegrafRequest === null || telegrafRequest === undefined) {\r\n                throw new RequiredError('telegrafRequest', 'Required parameter telegrafRequest was null or undefined when calling putTelegrafsID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"TelegrafRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(telegrafRequest || {}) : (telegrafRequest || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TelegrafsApiFp = function (configuration) {\r\n    return {\r\n        deleteTelegrafsID: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).deleteTelegrafsID(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTelegrafsIDLabelsID: function (telegrafID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).deleteTelegrafsIDLabelsID(telegrafID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafs: function (zapTraceSpan, orgID, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).getTelegrafs(zapTraceSpan, orgID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsID: function (telegrafID, zapTraceSpan, accept, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).getTelegrafsID(telegrafID, zapTraceSpan, accept, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsIDLabels: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).getTelegrafsIDLabels(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafs: function (telegrafRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).postTelegrafs(telegrafRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafsIDLabels: function (telegrafID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).postTelegrafsIDLabels(telegrafID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putTelegrafsID: function (telegrafID, telegrafRequest, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TelegrafsApiAxiosParamCreator(configuration).putTelegrafsID(telegrafID, telegrafRequest, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TelegrafsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteTelegrafsID: function (telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).deleteTelegrafsID(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTelegrafsIDLabelsID: function (telegrafID, labelID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).deleteTelegrafsIDLabelsID(telegrafID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTelegrafs: function (zapTraceSpan, orgID, options) {\r\n            return TelegrafsApiFp(configuration).getTelegrafs(zapTraceSpan, orgID, options)(axios, basePath);\r\n        },\r\n        getTelegrafsID: function (telegrafID, zapTraceSpan, accept, options) {\r\n            return TelegrafsApiFp(configuration).getTelegrafsID(telegrafID, zapTraceSpan, accept, options)(axios, basePath);\r\n        },\r\n        getTelegrafsIDLabels: function (telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).getTelegrafsIDLabels(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafs: function (telegrafRequest, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).postTelegrafs(telegrafRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafsIDLabels: function (telegrafID, labelMapping, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).postTelegrafsIDLabels(telegrafID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putTelegrafsID: function (telegrafID, telegrafRequest, zapTraceSpan, options) {\r\n            return TelegrafsApiFp(configuration).putTelegrafsID(telegrafID, telegrafRequest, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar TelegrafsApi = (function (_super) {\r\n    tslib_1.__extends(TelegrafsApi, _super);\r\n    function TelegrafsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TelegrafsApi.prototype.deleteTelegrafsID = function (telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).deleteTelegrafsID(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.deleteTelegrafsIDLabelsID = function (telegrafID, labelID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).deleteTelegrafsIDLabelsID(telegrafID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.deleteTelegrafsIDMembersID = function (userID, telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.deleteTelegrafsIDOwnersID = function (userID, telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.getTelegrafs = function (zapTraceSpan, orgID, options) {\r\n        return TelegrafsApiFp(this.configuration).getTelegrafs(zapTraceSpan, orgID, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.getTelegrafsID = function (telegrafID, zapTraceSpan, accept, options) {\r\n        return TelegrafsApiFp(this.configuration).getTelegrafsID(telegrafID, zapTraceSpan, accept, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.getTelegrafsIDLabels = function (telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).getTelegrafsIDLabels(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.getTelegrafsIDMembers = function (telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.getTelegrafsIDOwners = function (telegrafID, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.postTelegrafs = function (telegrafRequest, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).postTelegrafs(telegrafRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.postTelegrafsIDLabels = function (telegrafID, labelMapping, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).postTelegrafsIDLabels(telegrafID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.postTelegrafsIDMembers = function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.postTelegrafsIDOwners = function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TelegrafsApi.prototype.putTelegrafsID = function (telegrafID, telegrafRequest, zapTraceSpan, options) {\r\n        return TelegrafsApiFp(this.configuration).putTelegrafsID(telegrafID, telegrafRequest, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return TelegrafsApi;\r\n}(BaseAPI));\r\nexport { TelegrafsApi };\r\nexport var TemplatesApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling deleteDocumentsTemplatesID.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDocumentsTemplatesIDLabelsID: function (templateID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling deleteDocumentsTemplatesIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteDocumentsTemplatesIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDocumentsTemplates: function (zapTraceSpan, org, orgID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/documents/templates\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling getDocumentsTemplatesID.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDocumentsTemplatesIDLabels: function (templateID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling getDocumentsTemplatesIDLabels.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}/labels\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDocumentsTemplates: function (documentCreate, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (documentCreate === null || documentCreate === undefined) {\r\n                throw new RequiredError('documentCreate', 'Required parameter documentCreate was null or undefined when calling postDocumentsTemplates.');\r\n            }\r\n            var localVarPath = \"/documents/templates\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"DocumentCreate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(documentCreate || {}) : (documentCreate || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDocumentsTemplatesIDLabels: function (templateID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling postDocumentsTemplatesIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postDocumentsTemplatesIDLabels.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}/labels\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putDocumentsTemplatesID: function (templateID, documentUpdate, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (templateID === null || templateID === undefined) {\r\n                throw new RequiredError('templateID', 'Required parameter templateID was null or undefined when calling putDocumentsTemplatesID.');\r\n            }\r\n            if (documentUpdate === null || documentUpdate === undefined) {\r\n                throw new RequiredError('documentUpdate', 'Required parameter documentUpdate was null or undefined when calling putDocumentsTemplatesID.');\r\n            }\r\n            var localVarPath = \"/documents/templates/{templateID}\"\r\n                .replace(\"{\" + \"templateID\" + \"}\", encodeURIComponent(String(templateID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"DocumentUpdate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(documentUpdate || {}) : (documentUpdate || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TemplatesApiFp = function (configuration) {\r\n    return {\r\n        deleteDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).deleteDocumentsTemplatesID(templateID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDocumentsTemplatesIDLabelsID: function (templateID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).deleteDocumentsTemplatesIDLabelsID(templateID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDocumentsTemplates: function (zapTraceSpan, org, orgID, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).getDocumentsTemplates(zapTraceSpan, org, orgID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).getDocumentsTemplatesID(templateID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDocumentsTemplatesIDLabels: function (templateID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).getDocumentsTemplatesIDLabels(templateID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDocumentsTemplates: function (documentCreate, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).postDocumentsTemplates(documentCreate, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDocumentsTemplatesIDLabels: function (templateID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).postDocumentsTemplatesIDLabels(templateID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putDocumentsTemplatesID: function (templateID, documentUpdate, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = TemplatesApiAxiosParamCreator(configuration).putDocumentsTemplatesID(templateID, documentUpdate, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var TemplatesApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).deleteDocumentsTemplatesID(templateID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDocumentsTemplatesIDLabelsID: function (templateID, labelID, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).deleteDocumentsTemplatesIDLabelsID(templateID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDocumentsTemplates: function (zapTraceSpan, org, orgID, options) {\r\n            return TemplatesApiFp(configuration).getDocumentsTemplates(zapTraceSpan, org, orgID, options)(axios, basePath);\r\n        },\r\n        getDocumentsTemplatesID: function (templateID, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).getDocumentsTemplatesID(templateID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDocumentsTemplatesIDLabels: function (templateID, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).getDocumentsTemplatesIDLabels(templateID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDocumentsTemplates: function (documentCreate, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).postDocumentsTemplates(documentCreate, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDocumentsTemplatesIDLabels: function (templateID, labelMapping, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).postDocumentsTemplatesIDLabels(templateID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putDocumentsTemplatesID: function (templateID, documentUpdate, zapTraceSpan, options) {\r\n            return TemplatesApiFp(configuration).putDocumentsTemplatesID(templateID, documentUpdate, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar TemplatesApi = (function (_super) {\r\n    tslib_1.__extends(TemplatesApi, _super);\r\n    function TemplatesApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TemplatesApi.prototype.deleteDocumentsTemplatesID = function (templateID, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).deleteDocumentsTemplatesID(templateID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.deleteDocumentsTemplatesIDLabelsID = function (templateID, labelID, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).deleteDocumentsTemplatesIDLabelsID(templateID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.getDocumentsTemplates = function (zapTraceSpan, org, orgID, options) {\r\n        return TemplatesApiFp(this.configuration).getDocumentsTemplates(zapTraceSpan, org, orgID, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.getDocumentsTemplatesID = function (templateID, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).getDocumentsTemplatesID(templateID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.getDocumentsTemplatesIDLabels = function (templateID, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).getDocumentsTemplatesIDLabels(templateID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.postDocumentsTemplates = function (documentCreate, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).postDocumentsTemplates(documentCreate, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.postDocumentsTemplatesIDLabels = function (templateID, labelMapping, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).postDocumentsTemplatesIDLabels(templateID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    TemplatesApi.prototype.putDocumentsTemplatesID = function (templateID, documentUpdate, zapTraceSpan, options) {\r\n        return TemplatesApiFp(this.configuration).putDocumentsTemplatesID(templateID, documentUpdate, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return TemplatesApi;\r\n}(BaseAPI));\r\nexport { TemplatesApi };\r\nexport var UsersApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteBucketsIDMembersID.');\r\n            }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteBucketsIDOwnersID.');\r\n            }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling deleteBucketsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteDashboardsIDMembersID.');\r\n            }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteDashboardsIDOwnersID.');\r\n            }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling deleteDashboardsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteOrgsIDMembersID.');\r\n            }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteOrgsIDOwnersID.');\r\n            }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling deleteOrgsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteScrapersIDMembersID.');\r\n            }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersIDMembersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteScrapersIDOwnersID.');\r\n            }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling deleteScrapersIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTasksIDMembersID.');\r\n            }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksIDMembersID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTasksIDOwnersID.');\r\n            }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling deleteTasksIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTelegrafsIDMembersID.');\r\n            }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsIDMembersID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteTelegrafsIDOwnersID.');\r\n            }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling deleteTelegrafsIDOwnersID.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)))\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteUsersID: function (userID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling deleteUsersID.');\r\n            }\r\n            var localVarPath = \"/users/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDMembers.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling getBucketsIDOwners.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDMembers.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDOwners.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getMe: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/me\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDMembers.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling getOrgsIDOwners.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersIDMembers.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling getScrapersIDOwners.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDMembers.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling getTasksIDOwners.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsIDMembers.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling getTelegrafsIDOwners.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getUsers: function (zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/users\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getUsersID: function (userID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling getUsersID.');\r\n            }\r\n            var localVarPath = \"/users/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling getUsersIDLogs.');\r\n            }\r\n            var localVarPath = \"/users/{userID}/logs\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchUsersID: function (userID, user, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling patchUsersID.');\r\n            }\r\n            if (user === null || user === undefined) {\r\n                throw new RequiredError('user', 'Required parameter user was null or undefined when calling patchUsersID.');\r\n            }\r\n            var localVarPath = \"/users/{userID}\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(user || {}) : (user || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling postBucketsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postBucketsIDMembers.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/members\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (bucketID === null || bucketID === undefined) {\r\n                throw new RequiredError('bucketID', 'Required parameter bucketID was null or undefined when calling postBucketsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postBucketsIDOwners.');\r\n            }\r\n            var localVarPath = \"/buckets/{bucketID}/owners\"\r\n                .replace(\"{\" + \"bucketID\" + \"}\", encodeURIComponent(String(bucketID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postDashboardsIDMembers.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/members\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling postDashboardsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postDashboardsIDOwners.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/owners\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postOrgsIDMembers.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/members\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (orgID === null || orgID === undefined) {\r\n                throw new RequiredError('orgID', 'Required parameter orgID was null or undefined when calling postOrgsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postOrgsIDOwners.');\r\n            }\r\n            var localVarPath = \"/orgs/{orgID}/owners\"\r\n                .replace(\"{\" + \"orgID\" + \"}\", encodeURIComponent(String(orgID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling postScrapersIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postScrapersIDMembers.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/members\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (scraperTargetID === null || scraperTargetID === undefined) {\r\n                throw new RequiredError('scraperTargetID', 'Required parameter scraperTargetID was null or undefined when calling postScrapersIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postScrapersIDOwners.');\r\n            }\r\n            var localVarPath = \"/scrapers/{scraperTargetID}/owners\"\r\n                .replace(\"{\" + \"scraperTargetID\" + \"}\", encodeURIComponent(String(scraperTargetID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTasksIDMembers.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/members\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (taskID === null || taskID === undefined) {\r\n                throw new RequiredError('taskID', 'Required parameter taskID was null or undefined when calling postTasksIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTasksIDOwners.');\r\n            }\r\n            var localVarPath = \"/tasks/{taskID}/owners\"\r\n                .replace(\"{\" + \"taskID\" + \"}\", encodeURIComponent(String(taskID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling postTelegrafsIDMembers.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTelegrafsIDMembers.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/members\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (telegrafID === null || telegrafID === undefined) {\r\n                throw new RequiredError('telegrafID', 'Required parameter telegrafID was null or undefined when calling postTelegrafsIDOwners.');\r\n            }\r\n            if (addResourceMemberRequestBody === null || addResourceMemberRequestBody === undefined) {\r\n                throw new RequiredError('addResourceMemberRequestBody', 'Required parameter addResourceMemberRequestBody was null or undefined when calling postTelegrafsIDOwners.');\r\n            }\r\n            var localVarPath = \"/telegrafs/{telegrafID}/owners\"\r\n                .replace(\"{\" + \"telegrafID\" + \"}\", encodeURIComponent(String(telegrafID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"AddResourceMemberRequestBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(addResourceMemberRequestBody || {}) : (addResourceMemberRequestBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postUsers: function (user, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (user === null || user === undefined) {\r\n                throw new RequiredError('user', 'Required parameter user was null or undefined when calling postUsers.');\r\n            }\r\n            var localVarPath = \"/users\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(user || {}) : (user || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putMePassword: function (passwordResetBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (passwordResetBody === null || passwordResetBody === undefined) {\r\n                throw new RequiredError('passwordResetBody', 'Required parameter passwordResetBody was null or undefined when calling putMePassword.');\r\n            }\r\n            var localVarPath = \"/me/password\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (configuration && (configuration.username || configuration.password)) {\r\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"PasswordResetBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(passwordResetBody || {}) : (passwordResetBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putUsersIDPassword: function (userID, passwordResetBody, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (userID === null || userID === undefined) {\r\n                throw new RequiredError('userID', 'Required parameter userID was null or undefined when calling putUsersIDPassword.');\r\n            }\r\n            if (passwordResetBody === null || passwordResetBody === undefined) {\r\n                throw new RequiredError('passwordResetBody', 'Required parameter passwordResetBody was null or undefined when calling putUsersIDPassword.');\r\n            }\r\n            var localVarPath = \"/users/{userID}/password\"\r\n                .replace(\"{\" + \"userID\" + \"}\", encodeURIComponent(String(userID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (configuration && (configuration.username || configuration.password)) {\r\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"PasswordResetBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(passwordResetBody || {}) : (passwordResetBody || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var UsersApiFp = function (configuration) {\r\n    return {\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteUsersID: function (userID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).deleteUsersID(userID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getMe: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getMe(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getOrgsIDMembers(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getOrgsIDOwners(orgID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getTasksIDMembers(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getTasksIDOwners(taskID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getUsers: function (zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUsers(zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getUsersID: function (userID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUsersID(userID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchUsersID: function (userID, user, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).patchUsersID(userID, user, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postUsers: function (user, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).postUsers(user, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putMePassword: function (passwordResetBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).putMePassword(passwordResetBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putUsersIDPassword: function (userID, passwordResetBody, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).putUsersIDPassword(userID, passwordResetBody, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var UsersApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteBucketsIDMembersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteBucketsIDOwnersID: function (userID, bucketID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDMembersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteDashboardsIDOwnersID: function (userID, dashboardID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteOrgsIDMembersID: function (userID, orgID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteOrgsIDOwnersID: function (userID, orgID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteScrapersIDMembersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteScrapersIDOwnersID: function (userID, scraperTargetID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTasksIDMembersID: function (userID, taskID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTasksIDOwnersID: function (userID, taskID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTelegrafsIDMembersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteTelegrafsIDOwnersID: function (userID, telegrafID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteUsersID: function (userID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).deleteUsersID(userID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBucketsIDMembers: function (bucketID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getBucketsIDOwners: function (bucketID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDMembers: function (dashboardID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getDashboardsIDOwners: function (dashboardID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getMe: function (zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getMe(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDMembers: function (orgID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getOrgsIDMembers(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getOrgsIDOwners: function (orgID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getOrgsIDOwners(orgID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapersIDMembers: function (scraperTargetID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getScrapersIDOwners: function (scraperTargetID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDMembers: function (taskID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getTasksIDMembers(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTasksIDOwners: function (taskID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getTasksIDOwners(taskID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTelegrafsIDMembers: function (telegrafID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getTelegrafsIDOwners: function (telegrafID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getUsers: function (zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getUsers(zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getUsersID: function (userID, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).getUsersID(userID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getUsersIDLogs: function (userID, zapTraceSpan, offset, limit, options) {\r\n            return UsersApiFp(configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options)(axios, basePath);\r\n        },\r\n        patchUsersID: function (userID, user, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).patchUsersID(userID, user, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBucketsIDMembers: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postBucketsIDOwners: function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDMembers: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postDashboardsIDOwners: function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDMembers: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postOrgsIDOwners: function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapersIDMembers: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postScrapersIDOwners: function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDMembers: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTasksIDOwners: function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafsIDMembers: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postTelegrafsIDOwners: function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postUsers: function (user, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).postUsers(user, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putMePassword: function (passwordResetBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).putMePassword(passwordResetBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putUsersIDPassword: function (userID, passwordResetBody, zapTraceSpan, options) {\r\n            return UsersApiFp(configuration).putUsersIDPassword(userID, passwordResetBody, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar UsersApi = (function (_super) {\r\n    tslib_1.__extends(UsersApi, _super);\r\n    function UsersApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    UsersApi.prototype.deleteBucketsIDMembersID = function (userID, bucketID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteBucketsIDMembersID(userID, bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteBucketsIDOwnersID = function (userID, bucketID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteBucketsIDOwnersID(userID, bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteDashboardsIDMembersID = function (userID, dashboardID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteDashboardsIDMembersID(userID, dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteDashboardsIDOwnersID = function (userID, dashboardID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteDashboardsIDOwnersID(userID, dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteOrgsIDMembersID = function (userID, orgID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteOrgsIDMembersID(userID, orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteOrgsIDOwnersID = function (userID, orgID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteOrgsIDOwnersID(userID, orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteScrapersIDMembersID = function (userID, scraperTargetID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteScrapersIDMembersID(userID, scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteScrapersIDOwnersID = function (userID, scraperTargetID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteScrapersIDOwnersID(userID, scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteTasksIDMembersID = function (userID, taskID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteTasksIDMembersID(userID, taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteTasksIDOwnersID = function (userID, taskID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteTasksIDOwnersID(userID, taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteTelegrafsIDMembersID = function (userID, telegrafID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteTelegrafsIDMembersID(userID, telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteTelegrafsIDOwnersID = function (userID, telegrafID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteTelegrafsIDOwnersID(userID, telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.deleteUsersID = function (userID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).deleteUsersID(userID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getBucketsIDMembers = function (bucketID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getBucketsIDMembers(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getBucketsIDOwners = function (bucketID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getBucketsIDOwners(bucketID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getDashboardsIDMembers = function (dashboardID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getDashboardsIDMembers(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getDashboardsIDOwners = function (dashboardID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getDashboardsIDOwners(dashboardID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getMe = function (zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getMe(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getOrgsIDMembers = function (orgID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getOrgsIDMembers(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getOrgsIDOwners = function (orgID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getOrgsIDOwners(orgID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getScrapersIDMembers = function (scraperTargetID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getScrapersIDMembers(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getScrapersIDOwners = function (scraperTargetID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getScrapersIDOwners(scraperTargetID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getTasksIDMembers = function (taskID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getTasksIDMembers(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getTasksIDOwners = function (taskID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getTasksIDOwners(taskID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getTelegrafsIDMembers = function (telegrafID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getTelegrafsIDMembers(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getTelegrafsIDOwners = function (telegrafID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getTelegrafsIDOwners(telegrafID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getUsers = function (zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getUsers(zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getUsersID = function (userID, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).getUsersID(userID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.getUsersIDLogs = function (userID, zapTraceSpan, offset, limit, options) {\r\n        return UsersApiFp(this.configuration).getUsersIDLogs(userID, zapTraceSpan, offset, limit, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.patchUsersID = function (userID, user, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).patchUsersID(userID, user, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postBucketsIDMembers = function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postBucketsIDMembers(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postBucketsIDOwners = function (bucketID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postBucketsIDOwners(bucketID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postDashboardsIDMembers = function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postDashboardsIDMembers(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postDashboardsIDOwners = function (dashboardID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postDashboardsIDOwners(dashboardID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postOrgsIDMembers = function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postOrgsIDMembers(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postOrgsIDOwners = function (orgID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postOrgsIDOwners(orgID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postScrapersIDMembers = function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postScrapersIDMembers(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postScrapersIDOwners = function (scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postScrapersIDOwners(scraperTargetID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postTasksIDMembers = function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postTasksIDMembers(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postTasksIDOwners = function (taskID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postTasksIDOwners(taskID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postTelegrafsIDMembers = function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postTelegrafsIDMembers(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postTelegrafsIDOwners = function (telegrafID, addResourceMemberRequestBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postTelegrafsIDOwners(telegrafID, addResourceMemberRequestBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.postUsers = function (user, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).postUsers(user, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.putMePassword = function (passwordResetBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).putMePassword(passwordResetBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    UsersApi.prototype.putUsersIDPassword = function (userID, passwordResetBody, zapTraceSpan, options) {\r\n        return UsersApiFp(this.configuration).putUsersIDPassword(userID, passwordResetBody, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return UsersApi;\r\n}(BaseAPI));\r\nexport { UsersApi };\r\nexport var VariablesApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        deleteVariablesID: function (variableID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling deleteVariablesID.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        deleteVariablesIDLabelsID: function (variableID, labelID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling deleteVariablesIDLabelsID.');\r\n            }\r\n            if (labelID === null || labelID === undefined) {\r\n                throw new RequiredError('labelID', 'Required parameter labelID was null or undefined when calling deleteVariablesIDLabelsID.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}/labels/{labelID}\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)))\r\n                .replace(\"{\" + \"labelID\" + \"}\", encodeURIComponent(String(labelID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getVariables: function (zapTraceSpan, org, orgID, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var localVarPath = \"/variables\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (orgID !== undefined) {\r\n                localVarQueryParameter['orgID'] = orgID;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getVariablesID: function (variableID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling getVariablesID.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        getVariablesIDLabels: function (variableID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling getVariablesIDLabels.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}/labels\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling patchVariablesID.');\r\n            }\r\n            if (variable === null || variable === undefined) {\r\n                throw new RequiredError('variable', 'Required parameter variable was null or undefined when calling patchVariablesID.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Variable\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variable || {}) : (variable || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postVariables: function (variable, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variable === null || variable === undefined) {\r\n                throw new RequiredError('variable', 'Required parameter variable was null or undefined when calling postVariables.');\r\n            }\r\n            var localVarPath = \"/variables\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Variable\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variable || {}) : (variable || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        postVariablesIDLabels: function (variableID, labelMapping, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling postVariablesIDLabels.');\r\n            }\r\n            if (labelMapping === null || labelMapping === undefined) {\r\n                throw new RequiredError('labelMapping', 'Required parameter labelMapping was null or undefined when calling postVariablesIDLabels.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}/labels\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"LabelMapping\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(labelMapping || {}) : (labelMapping || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        putVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (variableID === null || variableID === undefined) {\r\n                throw new RequiredError('variableID', 'Required parameter variableID was null or undefined when calling putVariablesID.');\r\n            }\r\n            if (variable === null || variable === undefined) {\r\n                throw new RequiredError('variable', 'Required parameter variable was null or undefined when calling putVariablesID.');\r\n            }\r\n            var localVarPath = \"/variables/{variableID}\"\r\n                .replace(\"{\" + \"variableID\" + \"}\", encodeURIComponent(String(variableID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"Variable\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(variable || {}) : (variable || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var VariablesApiFp = function (configuration) {\r\n    return {\r\n        deleteVariablesID: function (variableID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).deleteVariablesID(variableID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        deleteVariablesIDLabelsID: function (variableID, labelID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).deleteVariablesIDLabelsID(variableID, labelID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getVariables: function (zapTraceSpan, org, orgID, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).getVariables(zapTraceSpan, org, orgID, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getVariablesID: function (variableID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).getVariablesID(variableID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        getVariablesIDLabels: function (variableID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).getVariablesIDLabels(variableID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).patchVariablesID(variableID, variable, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postVariables: function (variable, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).postVariables(variable, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        postVariablesIDLabels: function (variableID, labelMapping, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).postVariablesIDLabels(variableID, labelMapping, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        putVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = VariablesApiAxiosParamCreator(configuration).putVariablesID(variableID, variable, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var VariablesApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        deleteVariablesID: function (variableID, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).deleteVariablesID(variableID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        deleteVariablesIDLabelsID: function (variableID, labelID, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).deleteVariablesIDLabelsID(variableID, labelID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getVariables: function (zapTraceSpan, org, orgID, options) {\r\n            return VariablesApiFp(configuration).getVariables(zapTraceSpan, org, orgID, options)(axios, basePath);\r\n        },\r\n        getVariablesID: function (variableID, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).getVariablesID(variableID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        getVariablesIDLabels: function (variableID, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).getVariablesIDLabels(variableID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).patchVariablesID(variableID, variable, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postVariables: function (variable, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).postVariables(variable, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        postVariablesIDLabels: function (variableID, labelMapping, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).postVariablesIDLabels(variableID, labelMapping, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        putVariablesID: function (variableID, variable, zapTraceSpan, options) {\r\n            return VariablesApiFp(configuration).putVariablesID(variableID, variable, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar VariablesApi = (function (_super) {\r\n    tslib_1.__extends(VariablesApi, _super);\r\n    function VariablesApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    VariablesApi.prototype.deleteVariablesID = function (variableID, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).deleteVariablesID(variableID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.deleteVariablesIDLabelsID = function (variableID, labelID, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).deleteVariablesIDLabelsID(variableID, labelID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.getVariables = function (zapTraceSpan, org, orgID, options) {\r\n        return VariablesApiFp(this.configuration).getVariables(zapTraceSpan, org, orgID, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.getVariablesID = function (variableID, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).getVariablesID(variableID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.getVariablesIDLabels = function (variableID, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).getVariablesIDLabels(variableID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.patchVariablesID = function (variableID, variable, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).patchVariablesID(variableID, variable, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.postVariables = function (variable, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).postVariables(variable, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.postVariablesIDLabels = function (variableID, labelMapping, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).postVariablesIDLabels(variableID, labelMapping, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    VariablesApi.prototype.putVariablesID = function (variableID, variable, zapTraceSpan, options) {\r\n        return VariablesApiFp(this.configuration).putVariablesID(variableID, variable, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return VariablesApi;\r\n}(BaseAPI));\r\nexport { VariablesApi };\r\nexport var ViewsApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling getDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (dashboardID === null || dashboardID === undefined) {\r\n                throw new RequiredError('dashboardID', 'Required parameter dashboardID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (cellID === null || cellID === undefined) {\r\n                throw new RequiredError('cellID', 'Required parameter cellID was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            if (view === null || view === undefined) {\r\n                throw new RequiredError('view', 'Required parameter view was null or undefined when calling patchDashboardsIDCellsIDView.');\r\n            }\r\n            var localVarPath = \"/dashboards/{dashboardID}/cells/{cellID}/view\"\r\n                .replace(\"{\" + \"dashboardID\" + \"}\", encodeURIComponent(String(dashboardID)))\r\n                .replace(\"{\" + \"cellID\" + \"}\", encodeURIComponent(String(cellID)));\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"View\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(view || {}) : (view || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ViewsApiFp = function (configuration) {\r\n    return {\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ViewsApiAxiosParamCreator(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            var localVarAxiosArgs = ViewsApiAxiosParamCreator(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var ViewsApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        getDashboardsIDCellsIDView: function (dashboardID, cellID, zapTraceSpan, options) {\r\n            return ViewsApiFp(configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n        patchDashboardsIDCellsIDView: function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n            return ViewsApiFp(configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar ViewsApi = (function (_super) {\r\n    tslib_1.__extends(ViewsApi, _super);\r\n    function ViewsApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ViewsApi.prototype.getDashboardsIDCellsIDView = function (dashboardID, cellID, zapTraceSpan, options) {\r\n        return ViewsApiFp(this.configuration).getDashboardsIDCellsIDView(dashboardID, cellID, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    ViewsApi.prototype.patchDashboardsIDCellsIDView = function (dashboardID, cellID, view, zapTraceSpan, options) {\r\n        return ViewsApiFp(this.configuration).patchDashboardsIDCellsIDView(dashboardID, cellID, view, zapTraceSpan, options)(this.axios, this.basePath);\r\n    };\r\n    return ViewsApi;\r\n}(BaseAPI));\r\nexport { ViewsApi };\r\nexport var WriteApiAxiosParamCreator = function (configuration) {\r\n    return {\r\n        postWrite: function (org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (org === null || org === undefined) {\r\n                throw new RequiredError('org', 'Required parameter org was null or undefined when calling postWrite.');\r\n            }\r\n            if (bucket === null || bucket === undefined) {\r\n                throw new RequiredError('bucket', 'Required parameter bucket was null or undefined when calling postWrite.');\r\n            }\r\n            if (body === null || body === undefined) {\r\n                throw new RequiredError('body', 'Required parameter body was null or undefined when calling postWrite.');\r\n            }\r\n            var localVarPath = \"/write\";\r\n            var localVarUrlObj = url.parse(localVarPath, true);\r\n            var baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            var localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);\r\n            var localVarHeaderParameter = {};\r\n            var localVarQueryParameter = {};\r\n            if (org !== undefined) {\r\n                localVarQueryParameter['org'] = org;\r\n            }\r\n            if (bucket !== undefined) {\r\n                localVarQueryParameter['bucket'] = bucket;\r\n            }\r\n            if (precision !== undefined) {\r\n                localVarQueryParameter['precision'] = precision;\r\n            }\r\n            if (zapTraceSpan !== undefined && zapTraceSpan !== null) {\r\n                localVarHeaderParameter['Zap-Trace-Span'] = String(zapTraceSpan);\r\n            }\r\n            if (contentEncoding !== undefined && contentEncoding !== null) {\r\n                localVarHeaderParameter['Content-Encoding'] = String(contentEncoding);\r\n            }\r\n            if (contentType !== undefined && contentType !== null) {\r\n                localVarHeaderParameter['Content-Type'] = String(contentType);\r\n            }\r\n            if (contentLength !== undefined && contentLength !== null) {\r\n                localVarHeaderParameter['Content-Length'] = String(contentLength);\r\n            }\r\n            if (accept !== undefined && accept !== null) {\r\n                localVarHeaderParameter['Accept'] = String(accept);\r\n            }\r\n            localVarHeaderParameter['Content-Type'] = 'text/plain';\r\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\r\n            var needsSerialization = (\"string\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var WriteApiFp = function (configuration) {\r\n    return {\r\n        postWrite: function (org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options) {\r\n            var localVarAxiosArgs = WriteApiAxiosParamCreator(configuration).postWrite(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options);\r\n            return function (axios, basePath) {\r\n                if (axios === void 0) { axios = globalAxios; }\r\n                if (basePath === void 0) { basePath = BASE_PATH; }\r\n                var axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    };\r\n};\r\nexport var WriteApiFactory = function (configuration, basePath, axios) {\r\n    return {\r\n        postWrite: function (org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options) {\r\n            return WriteApiFp(configuration).postWrite(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\nvar WriteApi = (function (_super) {\r\n    tslib_1.__extends(WriteApi, _super);\r\n    function WriteApi() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    WriteApi.prototype.postWrite = function (org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options) {\r\n        return WriteApiFp(this.configuration).postWrite(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, precision, options)(this.axios, this.basePath);\r\n    };\r\n    return WriteApi;\r\n}(BaseAPI));\r\nexport { WriteApi };\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/configuration.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/node_modules/axios/index.d.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/api/api.d.ts","writeByteOrderMark":false,"text":"/// <reference path=\"../src/api/custom.d.ts\" />\r\nimport { Configuration } from \"./configuration\";\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nexport declare const COLLECTION_FORMATS: {\r\n    csv: string;\r\n    ssv: string;\r\n    tsv: string;\r\n    pipes: string;\r\n};\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\nexport declare class BaseAPI {\r\n    protected basePath: string;\r\n    protected axios: AxiosInstance;\r\n    protected configuration: Configuration | undefined;\r\n    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);\r\n}\r\nexport declare class RequiredError extends Error {\r\n    field: string;\r\n    name: \"RequiredError\";\r\n    constructor(field: string, msg?: string);\r\n}\r\nexport interface ASTResponse {\r\n    ast?: Package;\r\n}\r\nexport interface AddResourceMemberRequestBody {\r\n    id: string;\r\n    name?: string;\r\n}\r\nexport interface AnalyzeQueryResponse {\r\n    errors?: Array<AnalyzeQueryResponseErrors>;\r\n}\r\nexport interface AnalyzeQueryResponseErrors {\r\n    line?: number;\r\n    column?: number;\r\n    character?: number;\r\n    message?: string;\r\n}\r\nexport interface ArrayExpression {\r\n    type?: string;\r\n    elements?: Array<Expression>;\r\n}\r\nexport interface Authorization extends AuthorizationUpdateRequest {\r\n    orgID?: string;\r\n    permissions?: Array<Permission>;\r\n    id?: string;\r\n    token?: string;\r\n    userID?: string;\r\n    user?: string;\r\n    org?: string;\r\n    links?: any;\r\n}\r\nexport declare namespace Authorization {\r\n}\r\nexport interface AuthorizationUpdateRequest {\r\n    status?: AuthorizationUpdateRequest.StatusEnum;\r\n    description?: string;\r\n}\r\nexport declare namespace AuthorizationUpdateRequest {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface Authorizations {\r\n    links?: Links;\r\n    authorizations?: Array<Authorization>;\r\n}\r\nexport interface Axes {\r\n    x?: Axis;\r\n    y?: Axis;\r\n    y2?: Axis;\r\n}\r\nexport interface Axis {\r\n    bounds?: Array<number>;\r\n    label?: string;\r\n    prefix?: string;\r\n    suffix?: string;\r\n    base?: string;\r\n    scale?: string;\r\n}\r\nexport interface BadStatement {\r\n    type?: string;\r\n    text?: string;\r\n}\r\nexport interface BinaryExpression {\r\n    type?: string;\r\n    operator?: string;\r\n    left?: Expression;\r\n    right?: Expression;\r\n}\r\nexport interface Block {\r\n    type?: string;\r\n    body?: Array<Statement>;\r\n}\r\nexport interface BooleanLiteral {\r\n    type?: string;\r\n    value?: boolean;\r\n}\r\nexport interface Bucket {\r\n    links?: BucketLinks;\r\n    id?: string;\r\n    name: string;\r\n    description?: string;\r\n    orgID?: string;\r\n    rp?: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    retentionRules: Array<BucketRetentionRules>;\r\n    labels?: Array<Label>;\r\n}\r\nexport interface BucketLinks {\r\n    labels?: string;\r\n    logs?: string;\r\n    members?: string;\r\n    org?: string;\r\n    owners?: string;\r\n    self?: string;\r\n    write?: string;\r\n}\r\nexport interface BucketRetentionRules {\r\n    type: BucketRetentionRules.TypeEnum;\r\n    everySeconds: number;\r\n}\r\nexport declare namespace BucketRetentionRules {\r\n    enum TypeEnum {\r\n        Expire = \"expire\"\r\n    }\r\n}\r\nexport interface Buckets {\r\n    links?: Links;\r\n    buckets?: Array<Bucket>;\r\n}\r\nexport interface BuiltinStatement {\r\n    type?: string;\r\n    id?: Identifier;\r\n}\r\nexport interface CallExpression {\r\n    type?: string;\r\n    callee?: Expression;\r\n    arguments?: Array<Expression>;\r\n}\r\nexport interface Cell {\r\n    id?: string;\r\n    links?: CellLinks;\r\n    x?: number;\r\n    y?: number;\r\n    w?: number;\r\n    h?: number;\r\n    viewID?: string;\r\n}\r\nexport interface CellLinks {\r\n    self?: string;\r\n    view?: string;\r\n}\r\nexport interface CellUpdate {\r\n    x?: number;\r\n    y?: number;\r\n    w?: number;\r\n    h?: number;\r\n}\r\nexport interface Check {\r\n}\r\nexport declare namespace Check {\r\n}\r\nexport interface CheckBase {\r\n    id?: string;\r\n    type: CheckType;\r\n    name: string;\r\n    orgID: string;\r\n    authorizationID?: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    query: DashboardQuery;\r\n    status?: CheckBase.StatusEnum;\r\n    every?: string;\r\n    offset?: string;\r\n    cron?: string;\r\n    tags?: Array<CheckBaseTags>;\r\n    statusMessageTemplate?: string;\r\n    labels?: Array<Label>;\r\n}\r\nexport declare namespace CheckBase {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface CheckBaseTags {\r\n    key?: string;\r\n    value?: string;\r\n}\r\nexport declare enum CheckStatusLevel {\r\n    UNKNOWN = \"UNKNOWN\",\r\n    OK = \"OK\",\r\n    INFO = \"INFO\",\r\n    CRIT = \"CRIT\",\r\n    WARN = \"WARN\"\r\n}\r\nexport declare enum CheckType {\r\n    Deadman = \"deadman\",\r\n    Threshold = \"threshold\"\r\n}\r\nexport interface CheckViewProperties {\r\n    type?: CheckViewProperties.TypeEnum;\r\n    checkID?: string;\r\n    check?: Check;\r\n}\r\nexport declare namespace CheckViewProperties {\r\n    enum TypeEnum {\r\n        Check = \"check\"\r\n    }\r\n}\r\nexport interface Checks {\r\n    checks?: Array<Check>;\r\n    links?: Links;\r\n}\r\nexport interface ConditionalExpression {\r\n    type?: string;\r\n    test?: Expression;\r\n    alternate?: Expression;\r\n    consequent?: Expression;\r\n}\r\nexport interface ConstantVariableProperties {\r\n    type?: ConstantVariableProperties.TypeEnum;\r\n    values?: Array<string>;\r\n}\r\nexport declare namespace ConstantVariableProperties {\r\n    enum TypeEnum {\r\n        Constant = \"constant\"\r\n    }\r\n}\r\nexport interface CreateCell {\r\n    name?: string;\r\n    x?: number;\r\n    y?: number;\r\n    w?: number;\r\n    h?: number;\r\n    usingView?: string;\r\n}\r\nexport interface CreateDashboardRequest {\r\n    orgID: string;\r\n    name: string;\r\n    description?: string;\r\n}\r\nexport interface Dashboard extends CreateDashboardRequest {\r\n    links?: any;\r\n    id?: string;\r\n    meta?: any;\r\n    cells?: Array<Cell>;\r\n    labels?: Array<Label>;\r\n}\r\nexport interface DashboardColor {\r\n    id?: string;\r\n    type?: DashboardColor.TypeEnum;\r\n    hex?: string;\r\n    name?: string;\r\n    value?: string;\r\n}\r\nexport declare namespace DashboardColor {\r\n    enum TypeEnum {\r\n        Min = \"min\",\r\n        Max = \"max\",\r\n        Threshold = \"threshold\"\r\n    }\r\n}\r\nexport interface DashboardQuery {\r\n    label?: string;\r\n    range?: DashboardQueryRange;\r\n    query: string;\r\n    source?: string;\r\n    queryConfig?: QueryConfig;\r\n}\r\nexport interface DashboardQueryRange {\r\n    upper: number;\r\n    lower: number;\r\n}\r\nexport interface Dashboards {\r\n    links?: Links;\r\n    dashboards?: Array<Dashboard>;\r\n}\r\nexport interface DateTimeLiteral {\r\n    type?: string;\r\n    value?: string;\r\n}\r\nexport interface DeadmanCheck extends CheckBase {\r\n    timeSince?: number;\r\n    reportZero?: boolean;\r\n    level?: CheckStatusLevel;\r\n}\r\nexport declare namespace DeadmanCheck {\r\n}\r\nexport interface DecimalPlaces {\r\n    isEnforced?: boolean;\r\n    digits?: number;\r\n}\r\nexport interface Dialect {\r\n    header?: boolean;\r\n    delimiter?: string;\r\n    annotations?: Array<Dialect.AnnotationsEnum>;\r\n    commentPrefix?: string;\r\n    dateTimeFormat?: Dialect.DateTimeFormatEnum;\r\n}\r\nexport declare namespace Dialect {\r\n    enum AnnotationsEnum {\r\n        Group = \"group\",\r\n        Datatype = \"datatype\",\r\n        Default = \"default\"\r\n    }\r\n    enum DateTimeFormatEnum {\r\n        RFC3339 = \"RFC3339\",\r\n        RFC3339Nano = \"RFC3339Nano\"\r\n    }\r\n}\r\nexport interface Document {\r\n    id: string;\r\n    meta: DocumentMeta;\r\n    content: any;\r\n    labels?: Array<Label>;\r\n    links?: DocumentLinks;\r\n}\r\nexport interface DocumentCreate {\r\n    meta: DocumentMeta;\r\n    content: any;\r\n    org?: string;\r\n    orgID?: string;\r\n    labels?: Array<string>;\r\n}\r\nexport interface DocumentLinks {\r\n    self?: string;\r\n}\r\nexport interface DocumentListEntry {\r\n    id: string;\r\n    meta: DocumentMeta;\r\n    labels?: Array<Label>;\r\n    links?: DocumentLinks;\r\n}\r\nexport interface DocumentMeta {\r\n    name: string;\r\n    type?: string;\r\n    description?: string;\r\n    version: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n}\r\nexport interface DocumentUpdate {\r\n    meta?: DocumentMeta;\r\n    content?: any;\r\n}\r\nexport interface Documents {\r\n    documents?: Array<DocumentListEntry>;\r\n}\r\nexport interface Duration {\r\n    type?: string;\r\n    magnitude?: number;\r\n    unit?: string;\r\n}\r\nexport interface DurationLiteral {\r\n    type?: string;\r\n    values?: Array<Duration>;\r\n}\r\nexport interface EmptyViewProperties {\r\n    type?: EmptyViewProperties.TypeEnum;\r\n}\r\nexport declare namespace EmptyViewProperties {\r\n    enum TypeEnum {\r\n        Empty = \"empty\"\r\n    }\r\n}\r\nexport interface Expression {\r\n}\r\nexport interface ExpressionStatement {\r\n    type?: string;\r\n    expression?: Expression;\r\n}\r\nexport interface Field {\r\n    value?: string;\r\n    type?: Field.TypeEnum;\r\n    alias?: string;\r\n    args?: Array<Field>;\r\n}\r\nexport declare namespace Field {\r\n    enum TypeEnum {\r\n        Func = \"func\",\r\n        Field = \"field\",\r\n        Integer = \"integer\",\r\n        Number = \"number\",\r\n        Regex = \"regex\",\r\n        Wildcard = \"wildcard\"\r\n    }\r\n}\r\nexport interface FloatLiteral {\r\n    type?: string;\r\n    value?: number;\r\n}\r\nexport interface FluxSuggestions {\r\n    funcs?: FluxSuggestionsFuncs;\r\n}\r\nexport interface FluxSuggestionsFuncs {\r\n    name?: string;\r\n    params?: any;\r\n}\r\nexport interface FunctionExpression {\r\n    type?: string;\r\n    params?: Array<Property>;\r\n    body?: Node;\r\n}\r\nexport interface GaugeViewProperties extends ViewProperties {\r\n    prefix?: string;\r\n    suffix?: string;\r\n    legend?: Legend;\r\n    decimalPlaces?: DecimalPlaces;\r\n}\r\nexport declare namespace GaugeViewProperties {\r\n}\r\nexport interface GreaterThreshold extends ThresholdBase {\r\n    value?: number;\r\n}\r\nexport interface HealthCheck {\r\n    name: string;\r\n    message?: string;\r\n    checks?: Array<HealthCheck>;\r\n    status: HealthCheck.StatusEnum;\r\n}\r\nexport declare namespace HealthCheck {\r\n    enum StatusEnum {\r\n        Pass = \"pass\",\r\n        Fail = \"fail\"\r\n    }\r\n}\r\nexport interface HeatmapViewProperties extends ViewProperties {\r\n    xColumn?: string;\r\n    yColumn?: string;\r\n    xDomain?: Array<number>;\r\n    yDomain?: Array<number>;\r\n    xAxisLabel?: string;\r\n    yAxisLabel?: string;\r\n    xPrefix?: string;\r\n    xSuffix?: string;\r\n    yPrefix?: string;\r\n    ySuffix?: string;\r\n    binSize?: number;\r\n}\r\nexport declare namespace HeatmapViewProperties {\r\n}\r\nexport interface HistogramViewProperties extends ViewProperties {\r\n    xColumn?: string;\r\n    fillColumns?: Array<string>;\r\n    xDomain?: Array<number>;\r\n    xAxisLabel?: string;\r\n    position?: string;\r\n    binCount?: number;\r\n}\r\nexport declare namespace HistogramViewProperties {\r\n}\r\nexport interface Identifier {\r\n    type?: string;\r\n    name?: string;\r\n}\r\nexport interface ImportDeclaration {\r\n    type?: string;\r\n    as?: Identifier;\r\n    path?: StringLiteral;\r\n}\r\nexport interface IndexExpression {\r\n    type?: string;\r\n    array?: Expression;\r\n    index?: Expression;\r\n}\r\nexport interface IntegerLiteral {\r\n    type?: string;\r\n    value?: string;\r\n}\r\nexport interface IsOnboarding {\r\n    allowed?: boolean;\r\n}\r\nexport interface Label {\r\n    id?: string;\r\n    orgID?: string;\r\n    name?: string;\r\n    properties?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface LabelCreateRequest {\r\n    orgID: string;\r\n    name?: string;\r\n    properties?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface LabelMapping {\r\n    labelID?: string;\r\n}\r\nexport interface LabelResponse {\r\n    label?: Label;\r\n    links?: Links;\r\n}\r\nexport interface LabelUpdate {\r\n    name?: string;\r\n    properties?: any;\r\n}\r\nexport interface LabelsResponse {\r\n    labels?: Array<Label>;\r\n    links?: Links;\r\n}\r\nexport interface LanguageRequest {\r\n    query: string;\r\n}\r\nexport interface Legend {\r\n    type?: Legend.TypeEnum;\r\n    orientation?: Legend.OrientationEnum;\r\n}\r\nexport declare namespace Legend {\r\n    enum TypeEnum {\r\n        Static = \"static\"\r\n    }\r\n    enum OrientationEnum {\r\n        Top = \"top\",\r\n        Bottom = \"bottom\",\r\n        Left = \"left\",\r\n        Right = \"right\"\r\n    }\r\n}\r\nexport interface LesserThreshold extends ThresholdBase {\r\n    value?: number;\r\n}\r\nexport interface LevelRule {\r\n    level?: CheckStatusLevel;\r\n    operation?: LevelRule.OperationEnum;\r\n}\r\nexport declare namespace LevelRule {\r\n    enum OperationEnum {\r\n        Equal = \"equal\",\r\n        Notequal = \"notequal\"\r\n    }\r\n}\r\nexport interface LinePlusSingleStatProperties extends ViewProperties {\r\n    axes?: Axes;\r\n    legend?: Legend;\r\n    prefix?: string;\r\n    suffix?: string;\r\n    decimalPlaces?: DecimalPlaces;\r\n}\r\nexport declare namespace LinePlusSingleStatProperties {\r\n}\r\nexport interface LineProtocolError {\r\n    code: LineProtocolError.CodeEnum;\r\n    message: string;\r\n    op: string;\r\n    err: string;\r\n    line?: number;\r\n}\r\nexport declare namespace LineProtocolError {\r\n    enum CodeEnum {\r\n        InternalError = \"internal error\",\r\n        NotFound = \"not found\",\r\n        Conflict = \"conflict\",\r\n        Invalid = \"invalid\",\r\n        EmptyValue = \"empty value\",\r\n        Unavailable = \"unavailable\"\r\n    }\r\n}\r\nexport interface LineProtocolLengthError {\r\n    code: LineProtocolLengthError.CodeEnum;\r\n    message: string;\r\n    maxLength: number;\r\n}\r\nexport declare namespace LineProtocolLengthError {\r\n    enum CodeEnum {\r\n        Invalid = \"invalid\"\r\n    }\r\n}\r\nexport interface Links {\r\n    next?: string;\r\n    self: string;\r\n    prev?: string;\r\n}\r\nexport interface LogEvent {\r\n    time?: Date;\r\n    message?: string;\r\n}\r\nexport interface LogViewProperties {\r\n    shape: LogViewProperties.ShapeEnum;\r\n    type: LogViewProperties.TypeEnum;\r\n    columns: Array<LogViewerColumn>;\r\n}\r\nexport declare namespace LogViewProperties {\r\n    enum ShapeEnum {\r\n        ChronografV2 = \"chronograf-v2\"\r\n    }\r\n    enum TypeEnum {\r\n        LogViewer = \"log-viewer\"\r\n    }\r\n}\r\nexport interface LogViewerColumn {\r\n    name: string;\r\n    position: number;\r\n    settings: Array<LogViewerColumnSettings>;\r\n}\r\nexport interface LogViewerColumnSettings {\r\n    type: string;\r\n    value: string;\r\n    name?: string;\r\n}\r\nexport interface LogicalExpression {\r\n    type?: string;\r\n    operator?: string;\r\n    left?: Expression;\r\n    right?: Expression;\r\n}\r\nexport interface Logs {\r\n    events?: Array<LogEvent>;\r\n}\r\nexport interface MapVariableProperties {\r\n    type?: MapVariableProperties.TypeEnum;\r\n    values?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport declare namespace MapVariableProperties {\r\n    enum TypeEnum {\r\n        Map = \"map\"\r\n    }\r\n}\r\nexport interface MarkdownViewProperties {\r\n    note?: string;\r\n}\r\nexport interface MemberAssignment {\r\n    type?: string;\r\n    member?: MemberExpression;\r\n    init?: Expression;\r\n}\r\nexport interface MemberExpression {\r\n    type?: string;\r\n    object?: Expression;\r\n    property?: PropertyKey;\r\n}\r\nexport interface ModelError {\r\n    code: ModelError.CodeEnum;\r\n    message: string;\r\n    op?: string;\r\n    err?: string;\r\n}\r\nexport declare namespace ModelError {\r\n    enum CodeEnum {\r\n        InternalError = \"internal error\",\r\n        NotFound = \"not found\",\r\n        Conflict = \"conflict\",\r\n        Invalid = \"invalid\",\r\n        UnprocessableEntity = \"unprocessable entity\",\r\n        EmptyValue = \"empty value\",\r\n        Unavailable = \"unavailable\",\r\n        Forbidden = \"forbidden\",\r\n        TooManyRequests = \"too many requests\",\r\n        Unauthorized = \"unauthorized\",\r\n        MethodNotAllowed = \"method not allowed\"\r\n    }\r\n}\r\nexport interface ModelFile {\r\n    type?: string;\r\n    name?: string;\r\n    _package?: PackageClause;\r\n    imports?: Array<ImportDeclaration>;\r\n    body?: Array<Statement>;\r\n}\r\nexport interface Node {\r\n}\r\nexport interface NotificationEndpoint {\r\n}\r\nexport declare namespace NotificationEndpoint {\r\n}\r\nexport interface NotificationEndpointBase {\r\n    id?: string;\r\n    orgID?: string;\r\n    userID?: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    name?: string;\r\n    status?: NotificationEndpointBase.StatusEnum;\r\n    labels?: Array<Label>;\r\n    type: NotificationEndpointType;\r\n}\r\nexport declare namespace NotificationEndpointBase {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport declare enum NotificationEndpointType {\r\n    Slack = \"slack\",\r\n    Smtp = \"smtp\",\r\n    Pagerduty = \"pagerduty\",\r\n    Webhook = \"webhook\"\r\n}\r\nexport interface NotificationEndpoints {\r\n    notificationEndpoints?: Array<NotificationEndpoint>;\r\n    links?: Links;\r\n}\r\nexport interface NotificationRule {\r\n}\r\nexport declare namespace NotificationRule {\r\n}\r\nexport interface NotificationRuleBase {\r\n    notifyEndpointID?: string;\r\n    orgID?: string;\r\n    authorizationID?: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    status?: NotificationRuleBase.StatusEnum;\r\n    name?: string;\r\n    type: NotificationRuleType;\r\n    sleepUntil?: string;\r\n    every?: string;\r\n    offset?: string;\r\n    cron?: string;\r\n    runbookLink?: string;\r\n    limitEvery?: number;\r\n    limit?: number;\r\n    tagRules?: Array<TagRule>;\r\n    statusRules?: Array<StatusRule>;\r\n    labels?: Array<Label>;\r\n}\r\nexport declare namespace NotificationRuleBase {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport declare enum NotificationRuleType {\r\n    Slack = \"slack\",\r\n    Smtp = \"smtp\",\r\n    Pagerduty = \"pagerduty\"\r\n}\r\nexport interface NotificationRules {\r\n    notificationRules?: Array<NotificationRule>;\r\n    links?: Links;\r\n}\r\nexport interface ObjectExpression {\r\n    type?: string;\r\n    properties?: Array<Property>;\r\n}\r\nexport interface OnboardingRequest {\r\n    username: string;\r\n    password: string;\r\n    org: string;\r\n    bucket: string;\r\n    retentionPeriodHrs?: number;\r\n}\r\nexport interface OnboardingResponse {\r\n    user?: User;\r\n    org?: Organization;\r\n    bucket?: Bucket;\r\n    auth?: Authorization;\r\n}\r\nexport interface OperationLog {\r\n    description?: string;\r\n    time?: Date;\r\n    userID?: string;\r\n    links?: OperationLogLinks;\r\n}\r\nexport interface OperationLogLinks {\r\n    user?: string;\r\n}\r\nexport interface OperationLogs {\r\n    logs?: Array<OperationLog>;\r\n    links?: Links;\r\n}\r\nexport interface OptionStatement {\r\n    type?: string;\r\n    assignment?: any;\r\n}\r\nexport interface Organization {\r\n    links?: OrganizationLinks;\r\n    id?: string;\r\n    name: string;\r\n    description?: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    status?: Organization.StatusEnum;\r\n}\r\nexport declare namespace Organization {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface OrganizationLinks {\r\n    self?: string;\r\n    members?: string;\r\n    owners?: string;\r\n    labels?: string;\r\n    secrets?: string;\r\n    buckets?: string;\r\n    tasks?: string;\r\n    dashboards?: string;\r\n    logs?: string;\r\n}\r\nexport interface Organizations {\r\n    links?: Links;\r\n    orgs?: Array<Organization>;\r\n}\r\nexport interface Package {\r\n    type?: string;\r\n    path?: string;\r\n    _package?: string;\r\n    files?: Array<any>;\r\n}\r\nexport interface PackageClause {\r\n    type?: string;\r\n    name?: Identifier;\r\n}\r\nexport interface PagerDutyNotificationEndpoint extends NotificationEndpointBase {\r\n}\r\nexport declare namespace PagerDutyNotificationEndpoint {\r\n}\r\nexport interface PagerDutyNotificationRule extends NotificationRuleBase {\r\n    messageTemplate?: string;\r\n}\r\nexport declare namespace PagerDutyNotificationRule {\r\n}\r\nexport interface PasswordResetBody {\r\n    password: string;\r\n}\r\nexport interface Permission {\r\n    action: Permission.ActionEnum;\r\n    resource: PermissionResource;\r\n}\r\nexport declare namespace Permission {\r\n    enum ActionEnum {\r\n        Read = \"read\",\r\n        Write = \"write\"\r\n    }\r\n}\r\nexport interface PermissionResource {\r\n    type: PermissionResource.TypeEnum;\r\n    id?: string;\r\n    name?: string;\r\n    orgID?: string;\r\n    org?: string;\r\n}\r\nexport declare namespace PermissionResource {\r\n    enum TypeEnum {\r\n        Authorizations = \"authorizations\",\r\n        Buckets = \"buckets\",\r\n        Dashboards = \"dashboards\",\r\n        Orgs = \"orgs\",\r\n        Sources = \"sources\",\r\n        Tasks = \"tasks\",\r\n        Telegrafs = \"telegrafs\",\r\n        Users = \"users\",\r\n        Variables = \"variables\",\r\n        Scrapers = \"scrapers\",\r\n        Secrets = \"secrets\",\r\n        Labels = \"labels\",\r\n        Views = \"views\",\r\n        Documents = \"documents\"\r\n    }\r\n}\r\nexport interface PipeExpression {\r\n    type?: string;\r\n    argument?: Expression;\r\n    call?: CallExpression;\r\n}\r\nexport interface PipeLiteral {\r\n    type?: string;\r\n}\r\nexport interface Property {\r\n    type?: string;\r\n    key?: PropertyKey;\r\n    value?: Expression;\r\n}\r\nexport interface PropertyKey {\r\n}\r\nexport interface Query {\r\n    extern?: any;\r\n    query: string;\r\n    type?: Query.TypeEnum;\r\n    db?: string;\r\n    rp?: string;\r\n    cluster?: string;\r\n    dialect?: Dialect;\r\n}\r\nexport declare namespace Query {\r\n    enum TypeEnum {\r\n        Flux = \"flux\",\r\n        Influxql = \"influxql\"\r\n    }\r\n}\r\nexport interface QueryConfig {\r\n    id?: string;\r\n    database: string;\r\n    measurement: string;\r\n    retentionPolicy: string;\r\n    areTagsAccepted: boolean;\r\n    rawText?: string;\r\n    tags: any;\r\n    groupBy: QueryConfigGroupBy;\r\n    fields: Array<Field>;\r\n    range?: QueryConfigRange;\r\n}\r\nexport interface QueryConfigGroupBy {\r\n    time: string;\r\n    tags: Array<string>;\r\n}\r\nexport interface QueryConfigRange {\r\n    lower: string;\r\n    upper: string;\r\n}\r\nexport interface QueryVariableProperties {\r\n    type?: QueryVariableProperties.TypeEnum;\r\n    values?: QueryVariablePropertiesValues;\r\n}\r\nexport declare namespace QueryVariableProperties {\r\n    enum TypeEnum {\r\n        Query = \"query\"\r\n    }\r\n}\r\nexport interface QueryVariablePropertiesValues {\r\n    query?: string;\r\n    language?: string;\r\n}\r\nexport interface RangeThreshold extends ThresholdBase {\r\n    min?: number;\r\n    max?: number;\r\n    within?: boolean;\r\n}\r\nexport interface Ready {\r\n    status?: Ready.StatusEnum;\r\n    started?: Date;\r\n    up?: string;\r\n}\r\nexport declare namespace Ready {\r\n    enum StatusEnum {\r\n        Ready = \"ready\"\r\n    }\r\n}\r\nexport interface RegexpLiteral {\r\n    type?: string;\r\n    value?: string;\r\n}\r\nexport interface RenamableField {\r\n    internalName?: string;\r\n    displayName?: string;\r\n    visible?: boolean;\r\n}\r\nexport interface ResourceMember extends User {\r\n    role?: ResourceMember.RoleEnum;\r\n}\r\nexport declare namespace ResourceMember {\r\n    enum RoleEnum {\r\n        Member = \"member\"\r\n    }\r\n}\r\nexport interface ResourceMembers {\r\n    links?: UsersLinks;\r\n    users?: Array<ResourceMember>;\r\n}\r\nexport interface ResourceOwner extends User {\r\n    role?: ResourceOwner.RoleEnum;\r\n}\r\nexport declare namespace ResourceOwner {\r\n    enum RoleEnum {\r\n        Owner = \"owner\"\r\n    }\r\n}\r\nexport interface ResourceOwners {\r\n    links?: UsersLinks;\r\n    users?: Array<ResourceOwner>;\r\n}\r\nexport interface ReturnStatement {\r\n    type?: string;\r\n    argument?: Expression;\r\n}\r\nexport interface Routes {\r\n    authorizations?: string;\r\n    buckets?: string;\r\n    dashboards?: string;\r\n    external?: RoutesExternal;\r\n    variables?: string;\r\n    me?: string;\r\n    orgs?: string;\r\n    query?: RoutesQuery;\r\n    setup?: string;\r\n    signin?: string;\r\n    signout?: string;\r\n    sources?: string;\r\n    system?: RoutesSystem;\r\n    tasks?: string;\r\n    telegrafs?: string;\r\n    users?: string;\r\n    write?: string;\r\n}\r\nexport interface RoutesExternal {\r\n    statusFeed?: string;\r\n}\r\nexport interface RoutesQuery {\r\n    self?: string;\r\n    ast?: string;\r\n    analyze?: string;\r\n    suggestions?: string;\r\n}\r\nexport interface RoutesSystem {\r\n    metrics?: string;\r\n    debug?: string;\r\n    health?: string;\r\n}\r\nexport interface Run {\r\n    id?: string;\r\n    taskID?: string;\r\n    status?: Run.StatusEnum;\r\n    scheduledFor?: Date;\r\n    log?: Array<RunLog>;\r\n    startedAt?: Date;\r\n    finishedAt?: Date;\r\n    requestedAt?: Date;\r\n    links?: RunLinks;\r\n}\r\nexport declare namespace Run {\r\n    enum StatusEnum {\r\n        Scheduled = \"scheduled\",\r\n        Started = \"started\",\r\n        Failed = \"failed\",\r\n        Success = \"success\",\r\n        Canceled = \"canceled\"\r\n    }\r\n}\r\nexport interface RunLinks {\r\n    self?: string;\r\n    task?: string;\r\n    logs?: string;\r\n    retry?: string;\r\n}\r\nexport interface RunLog {\r\n    runID?: string;\r\n    time?: string;\r\n    message?: string;\r\n}\r\nexport interface RunManually {\r\n    scheduledFor?: Date;\r\n}\r\nexport interface Runs {\r\n    links?: Links;\r\n    runs?: Array<Run>;\r\n}\r\nexport interface SMTPNotificationEndpoint extends NotificationEndpointBase {\r\n}\r\nexport declare namespace SMTPNotificationEndpoint {\r\n}\r\nexport interface SMTPNotificationRule extends NotificationRuleBase {\r\n    subjectTemplate?: string;\r\n    bodyTemplate?: string;\r\n    to?: string;\r\n}\r\nexport declare namespace SMTPNotificationRule {\r\n}\r\nexport interface ScatterViewProperties extends ViewProperties {\r\n    xColumn?: string;\r\n    yColumn?: string;\r\n    fillColumns?: Array<string>;\r\n    symbolColumns?: Array<string>;\r\n    xDomain?: Array<number>;\r\n    yDomain?: Array<number>;\r\n    xAxisLabel?: string;\r\n    yAxisLabel?: string;\r\n    xPrefix?: string;\r\n    xSuffix?: string;\r\n    yPrefix?: string;\r\n    ySuffix?: string;\r\n}\r\nexport declare namespace ScatterViewProperties {\r\n}\r\nexport interface ScraperTargetRequest {\r\n    name?: string;\r\n    type?: ScraperTargetRequest.TypeEnum;\r\n    url?: string;\r\n    orgID?: string;\r\n    bucketID?: string;\r\n}\r\nexport declare namespace ScraperTargetRequest {\r\n    enum TypeEnum {\r\n        Prometheus = \"prometheus\"\r\n    }\r\n}\r\nexport interface ScraperTargetResponse extends ScraperTargetRequest {\r\n    id?: string;\r\n    org?: string;\r\n    bucket?: string;\r\n    links?: any;\r\n}\r\nexport declare namespace ScraperTargetResponse {\r\n}\r\nexport interface ScraperTargetResponses {\r\n    configurations?: Array<ScraperTargetResponse>;\r\n}\r\nexport interface SecretKeys {\r\n    secrets?: Array<string>;\r\n}\r\nexport interface SecretKeysResponse extends SecretKeys {\r\n    links?: any;\r\n}\r\nexport interface SingleStatViewProperties extends ViewProperties {\r\n    prefix?: string;\r\n    suffix?: string;\r\n    legend?: Legend;\r\n    decimalPlaces?: DecimalPlaces;\r\n}\r\nexport declare namespace SingleStatViewProperties {\r\n}\r\nexport interface SlackNotificationEndpoint extends NotificationEndpointBase {\r\n}\r\nexport declare namespace SlackNotificationEndpoint {\r\n}\r\nexport interface SlackNotificationRule extends NotificationRuleBase {\r\n    channel?: string;\r\n    messageTemplate?: string;\r\n}\r\nexport declare namespace SlackNotificationRule {\r\n}\r\nexport interface Source {\r\n    links?: SourceLinks;\r\n    id?: string;\r\n    orgID?: string;\r\n    _default?: boolean;\r\n    name?: string;\r\n    type?: Source.TypeEnum;\r\n    url?: string;\r\n    insecureSkipVerify?: boolean;\r\n    telegraf?: string;\r\n    token?: string;\r\n    username?: string;\r\n    password?: string;\r\n    sharedSecret?: string;\r\n    metaUrl?: string;\r\n    defaultRP?: string;\r\n    languages?: Array<Source.LanguagesEnum>;\r\n}\r\nexport declare namespace Source {\r\n    enum TypeEnum {\r\n        V1 = \"v1\",\r\n        V2 = \"v2\",\r\n        Self = \"self\"\r\n    }\r\n    enum LanguagesEnum {\r\n        Flux = \"flux\",\r\n        Influxql = \"influxql\"\r\n    }\r\n}\r\nexport interface SourceLinks {\r\n    self?: string;\r\n    query?: string;\r\n    health?: string;\r\n    buckets?: string;\r\n}\r\nexport interface Sources {\r\n    links?: UsersLinks;\r\n    sources?: Array<Source>;\r\n}\r\nexport interface Statement {\r\n}\r\nexport interface StatusRule {\r\n    currentLevel?: LevelRule;\r\n    previousLevel?: LevelRule;\r\n    count?: number;\r\n    period?: string;\r\n}\r\nexport interface StringLiteral {\r\n    type?: string;\r\n    value?: string;\r\n}\r\nexport interface TableViewProperties extends ViewProperties {\r\n    tableOptions?: any;\r\n    fieldOptions?: Array<RenamableField>;\r\n    timeFormat?: string;\r\n    decimalPlaces?: DecimalPlaces;\r\n}\r\nexport declare namespace TableViewProperties {\r\n}\r\nexport interface TagRule {\r\n    key?: string;\r\n    value?: string;\r\n    operator?: TagRule.OperatorEnum;\r\n}\r\nexport declare namespace TagRule {\r\n    enum OperatorEnum {\r\n        Equal = \"equal\",\r\n        Notequal = \"notequal\",\r\n        Equalregex = \"equalregex\",\r\n        Notequalregex = \"notequalregex\"\r\n    }\r\n}\r\nexport interface Task {\r\n    id: string;\r\n    orgID: string;\r\n    org?: string;\r\n    name: string;\r\n    description?: string;\r\n    status?: Task.StatusEnum;\r\n    labels?: Array<Label>;\r\n    authorizationID?: string;\r\n    flux: string;\r\n    every?: string;\r\n    cron?: string;\r\n    offset?: string;\r\n    latestCompleted?: Date;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    links?: TaskLinks;\r\n}\r\nexport declare namespace Task {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface TaskCreateRequest {\r\n    orgID?: string;\r\n    org?: string;\r\n    status?: TaskCreateRequest.StatusEnum;\r\n    flux: string;\r\n    token?: string;\r\n}\r\nexport declare namespace TaskCreateRequest {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface TaskLinks {\r\n    self?: string;\r\n    owners?: string;\r\n    members?: string;\r\n    runs?: string;\r\n    logs?: string;\r\n    labels?: string;\r\n}\r\nexport interface TaskUpdateRequest {\r\n    status?: TaskUpdateRequest.StatusEnum;\r\n    flux?: string;\r\n    name?: string;\r\n    every?: string;\r\n    cron?: string;\r\n    offset?: string;\r\n    token?: string;\r\n}\r\nexport declare namespace TaskUpdateRequest {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface Tasks {\r\n    links?: Links;\r\n    tasks?: Array<Task>;\r\n}\r\nexport interface Telegraf extends TelegrafRequest {\r\n    id?: string;\r\n    links?: any;\r\n    labels?: Array<Label>;\r\n}\r\nexport interface TelegrafPluginInputCpu {\r\n    name: TelegrafPluginInputCpu.NameEnum;\r\n    type: TelegrafPluginInputCpu.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputCpu {\r\n    enum NameEnum {\r\n        Cpu = \"cpu\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputDisk {\r\n    name: TelegrafPluginInputDisk.NameEnum;\r\n    type: TelegrafPluginInputDisk.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputDisk {\r\n    enum NameEnum {\r\n        Disk = \"disk\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputDiskio {\r\n    name: TelegrafPluginInputDiskio.NameEnum;\r\n    type: TelegrafPluginInputDiskio.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputDiskio {\r\n    enum NameEnum {\r\n        Diskio = \"diskio\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputDocker {\r\n    name: TelegrafPluginInputDocker.NameEnum;\r\n    type: TelegrafPluginInputDocker.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputDockerConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputDocker {\r\n    enum NameEnum {\r\n        Docker = \"docker\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputDockerConfig {\r\n    endpoint: string;\r\n}\r\nexport interface TelegrafPluginInputFile {\r\n    name: TelegrafPluginInputFile.NameEnum;\r\n    type: TelegrafPluginInputFile.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputFileConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputFile {\r\n    enum NameEnum {\r\n        File = \"file\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputFileConfig {\r\n    files?: Array<string>;\r\n}\r\nexport interface TelegrafPluginInputKernel {\r\n    name: TelegrafPluginInputKernel.NameEnum;\r\n    type: TelegrafPluginInputKernel.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputKernel {\r\n    enum NameEnum {\r\n        Kernel = \"kernel\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputKubernetes {\r\n    name: TelegrafPluginInputKubernetes.NameEnum;\r\n    type: TelegrafPluginInputKubernetes.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputKubernetesConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputKubernetes {\r\n    enum NameEnum {\r\n        Kubernetes = \"kubernetes\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputKubernetesConfig {\r\n    url?: string;\r\n}\r\nexport interface TelegrafPluginInputLogParser {\r\n    name: TelegrafPluginInputLogParser.NameEnum;\r\n    type: TelegrafPluginInputLogParser.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputLogParserConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputLogParser {\r\n    enum NameEnum {\r\n        Logparser = \"logparser\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputLogParserConfig {\r\n    files?: Array<string>;\r\n}\r\nexport interface TelegrafPluginInputMem {\r\n    name: TelegrafPluginInputMem.NameEnum;\r\n    type: TelegrafPluginInputMem.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputMem {\r\n    enum NameEnum {\r\n        Mem = \"mem\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputNet {\r\n    name: TelegrafPluginInputNet.NameEnum;\r\n    type: TelegrafPluginInputNet.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputNet {\r\n    enum NameEnum {\r\n        Net = \"net\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputNetResponse {\r\n    name: TelegrafPluginInputNetResponse.NameEnum;\r\n    type: TelegrafPluginInputNetResponse.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputNetResponse {\r\n    enum NameEnum {\r\n        NetResponse = \"net_response\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputNginx {\r\n    name: TelegrafPluginInputNginx.NameEnum;\r\n    type: TelegrafPluginInputNginx.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputNginx {\r\n    enum NameEnum {\r\n        Nginx = \"nginx\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputProcesses {\r\n    name: TelegrafPluginInputProcesses.NameEnum;\r\n    type: TelegrafPluginInputProcesses.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputProcesses {\r\n    enum NameEnum {\r\n        Processes = \"processes\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputProcstat {\r\n    name: TelegrafPluginInputProcstat.NameEnum;\r\n    type: TelegrafPluginInputProcstat.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputProcstatConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputProcstat {\r\n    enum NameEnum {\r\n        Procstat = \"procstat\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputProcstatConfig {\r\n    exe?: string;\r\n}\r\nexport interface TelegrafPluginInputPrometheus {\r\n    name: TelegrafPluginInputPrometheus.NameEnum;\r\n    type: TelegrafPluginInputPrometheus.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputPrometheusConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputPrometheus {\r\n    enum NameEnum {\r\n        Prometheus = \"prometheus\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputPrometheusConfig {\r\n    urls?: Array<string>;\r\n}\r\nexport interface TelegrafPluginInputRedis {\r\n    name: TelegrafPluginInputRedis.NameEnum;\r\n    type: TelegrafPluginInputRedis.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputRedisConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputRedis {\r\n    enum NameEnum {\r\n        Redis = \"redis\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputRedisConfig {\r\n    servers?: Array<string>;\r\n    password?: string;\r\n}\r\nexport interface TelegrafPluginInputSwap {\r\n    name: TelegrafPluginInputSwap.NameEnum;\r\n    type: TelegrafPluginInputSwap.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputSwap {\r\n    enum NameEnum {\r\n        Swap = \"swap\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputSyslog {\r\n    name: TelegrafPluginInputSyslog.NameEnum;\r\n    type: TelegrafPluginInputSyslog.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginInputSyslogConfig;\r\n}\r\nexport declare namespace TelegrafPluginInputSyslog {\r\n    enum NameEnum {\r\n        Syslog = \"syslog\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputSyslogConfig {\r\n    server?: string;\r\n}\r\nexport interface TelegrafPluginInputSystem {\r\n    name: TelegrafPluginInputSystem.NameEnum;\r\n    type: TelegrafPluginInputSystem.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputSystem {\r\n    enum NameEnum {\r\n        System = \"system\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginInputTail {\r\n    name: TelegrafPluginInputTail.NameEnum;\r\n    type: TelegrafPluginInputTail.TypeEnum;\r\n    comment?: string;\r\n}\r\nexport declare namespace TelegrafPluginInputTail {\r\n    enum NameEnum {\r\n        Tail = \"tail\"\r\n    }\r\n    enum TypeEnum {\r\n        Input = \"input\"\r\n    }\r\n}\r\nexport interface TelegrafPluginOutputFile {\r\n    name: TelegrafPluginOutputFile.NameEnum;\r\n    type: TelegrafPluginOutputFile.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginOutputFileConfig;\r\n}\r\nexport declare namespace TelegrafPluginOutputFile {\r\n    enum NameEnum {\r\n        File = \"file\"\r\n    }\r\n    enum TypeEnum {\r\n        Output = \"output\"\r\n    }\r\n}\r\nexport interface TelegrafPluginOutputFileConfig {\r\n    files: Array<TelegrafPluginOutputFileConfigFiles>;\r\n}\r\nexport interface TelegrafPluginOutputFileConfigFiles {\r\n    type?: TelegrafPluginOutputFileConfigFiles.TypeEnum;\r\n    path?: string;\r\n}\r\nexport declare namespace TelegrafPluginOutputFileConfigFiles {\r\n    enum TypeEnum {\r\n        Stdout = \"stdout\",\r\n        Path = \"path\"\r\n    }\r\n}\r\nexport interface TelegrafPluginOutputInfluxDBV2 {\r\n    name: TelegrafPluginOutputInfluxDBV2.NameEnum;\r\n    type: TelegrafPluginOutputInfluxDBV2.TypeEnum;\r\n    comment?: string;\r\n    config: TelegrafPluginOutputInfluxDBV2Config;\r\n}\r\nexport declare namespace TelegrafPluginOutputInfluxDBV2 {\r\n    enum NameEnum {\r\n        InfluxdbV2 = \"influxdb_v2\"\r\n    }\r\n    enum TypeEnum {\r\n        Output = \"output\"\r\n    }\r\n}\r\nexport interface TelegrafPluginOutputInfluxDBV2Config {\r\n    urls: Array<string>;\r\n    token: string;\r\n    organization: string;\r\n    bucket: string;\r\n}\r\nexport interface TelegrafRequest {\r\n    name?: string;\r\n    description?: string;\r\n    agent?: TelegrafRequestAgent;\r\n    plugins?: Array<TelegrafRequestPlugin>;\r\n    orgID?: string;\r\n}\r\nexport interface TelegrafRequestAgent {\r\n    collectionInterval?: number;\r\n}\r\nexport interface TelegrafRequestPlugin {\r\n}\r\nexport declare namespace TelegrafRequestPlugin {\r\n}\r\nexport interface Telegrafs {\r\n    configurations?: Array<Telegraf>;\r\n}\r\nexport interface TestStatement {\r\n    type?: string;\r\n    assignment?: VariableAssignment;\r\n}\r\nexport interface ThresholdBase {\r\n    level?: CheckStatusLevel;\r\n    allValues?: boolean;\r\n    type: ThresholdType;\r\n}\r\nexport interface ThresholdCheck extends CheckBase {\r\n    thresholds?: Array<any>;\r\n}\r\nexport declare namespace ThresholdCheck {\r\n}\r\nexport declare enum ThresholdType {\r\n    Greater = \"greater\",\r\n    Lesser = \"lesser\",\r\n    Range = \"range\"\r\n}\r\nexport interface UnaryExpression {\r\n    type?: string;\r\n    operator?: string;\r\n    argument?: Expression;\r\n}\r\nexport interface UnsignedIntegerLiteral {\r\n    type?: string;\r\n    value?: string;\r\n}\r\nexport interface User {\r\n    id?: string;\r\n    oauthID?: string;\r\n    name: string;\r\n    status?: User.StatusEnum;\r\n    links?: UserLinks;\r\n}\r\nexport declare namespace User {\r\n    enum StatusEnum {\r\n        Active = \"active\",\r\n        Inactive = \"inactive\"\r\n    }\r\n}\r\nexport interface UserLinks {\r\n    self?: string;\r\n    logs?: string;\r\n}\r\nexport interface Users {\r\n    links?: UsersLinks;\r\n    users?: Array<User>;\r\n}\r\nexport interface UsersLinks {\r\n    self?: string;\r\n}\r\nexport interface Variable {\r\n    links?: VariableLinks;\r\n    id?: string;\r\n    orgID: string;\r\n    name: string;\r\n    description?: string;\r\n    selected?: Array<string>;\r\n    labels?: Array<Label>;\r\n    arguments: any;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n}\r\nexport interface VariableAssignment {\r\n    type?: string;\r\n    id?: Identifier;\r\n    init?: Expression;\r\n}\r\nexport interface VariableLinks {\r\n    self?: string;\r\n    org?: string;\r\n    labels?: string;\r\n}\r\nexport interface Variables {\r\n    variables?: Array<Variable>;\r\n}\r\nexport interface View {\r\n    links?: ViewLinks;\r\n    id?: string;\r\n    name?: string;\r\n    properties?: any;\r\n}\r\nexport interface ViewLinks {\r\n    self?: string;\r\n}\r\nexport interface ViewProperties {\r\n    queries?: Array<DashboardQuery>;\r\n    colors?: Array<DashboardColor>;\r\n    shape?: ViewProperties.ShapeEnum;\r\n    note?: string;\r\n    type: ViewType;\r\n    showNoteWhenEmpty?: boolean;\r\n}\r\nexport declare namespace ViewProperties {\r\n    enum ShapeEnum {\r\n        ChronografV2 = \"chronograf-v2\"\r\n    }\r\n}\r\nexport declare enum ViewType {\r\n    Xy = \"xy\",\r\n    LinePlusSingleStat = \"line-plus-single-stat\",\r\n    SingleStat = \"single-stat\",\r\n    Gauge = \"gauge\",\r\n    Table = \"table\",\r\n    Markdown = \"markdown\",\r\n    LogViewer = \"log-viewer\",\r\n    Histogram = \"histogram\",\r\n    Heatmap = \"heatmap\",\r\n    Scatter = \"scatter\",\r\n    Check = \"check\"\r\n}\r\nexport interface Views {\r\n    links?: ViewLinks;\r\n    views?: Array<View>;\r\n}\r\nexport interface WebhookNotificationEndpoint extends NotificationEndpointBase {\r\n}\r\nexport declare namespace WebhookNotificationEndpoint {\r\n}\r\nexport declare enum WritePrecision {\r\n    Ms = \"ms\",\r\n    S = \"s\",\r\n    Us = \"us\",\r\n    Ns = \"ns\"\r\n}\r\nexport interface XYViewProperties extends ViewProperties {\r\n    axes?: Axes;\r\n    legend?: Legend;\r\n    geom?: XYViewProperties.GeomEnum;\r\n}\r\nexport declare namespace XYViewProperties {\r\n    enum GeomEnum {\r\n        Line = \"line\",\r\n        Step = \"step\",\r\n        Stacked = \"stacked\",\r\n        Bar = \"bar\"\r\n    }\r\n}\r\nexport declare const AuthorizationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getAuthorizations(zapTraceSpan?: string | undefined, userID?: string | undefined, user?: string | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    getAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchAuthorizationsID(authID: string, authorizationUpdateRequest: AuthorizationUpdateRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postAuthorizations(authorization: Authorization, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const AuthorizationsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getAuthorizations(zapTraceSpan?: string | undefined, userID?: string | undefined, user?: string | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Authorizations>;\r\n    getAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Authorization>;\r\n    patchAuthorizationsID(authID: string, authorizationUpdateRequest: AuthorizationUpdateRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Authorization>;\r\n    postAuthorizations(authorization: Authorization, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Authorization>;\r\n};\r\nexport declare const AuthorizationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getAuthorizations(zapTraceSpan?: string | undefined, userID?: string | undefined, user?: string | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<Authorizations>;\r\n    getAuthorizationsID(authID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Authorization>;\r\n    patchAuthorizationsID(authID: string, authorizationUpdateRequest: AuthorizationUpdateRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Authorization>;\r\n    postAuthorizations(authorization: Authorization, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Authorization>;\r\n};\r\nexport declare class AuthorizationsApi extends BaseAPI {\r\n    deleteAuthorizationsID(authID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getAuthorizations(zapTraceSpan?: string, userID?: string, user?: string, orgID?: string, org?: string, options?: any): AxiosPromise<Authorizations>;\r\n    getAuthorizationsID(authID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Authorization>;\r\n    patchAuthorizationsID(authID: string, authorizationUpdateRequest: AuthorizationUpdateRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Authorization>;\r\n    postAuthorizations(authorization: Authorization, zapTraceSpan?: string, options?: any): AxiosPromise<Authorization>;\r\n}\r\nexport declare const BucketsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteBucketsIDLabelsID(bucketID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBuckets(zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, org?: string | undefined, orgID?: string | undefined, name?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsIDLabels(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    patchBucketsID(bucketID: string, bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBuckets(bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBucketsIDLabels(bucketID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const BucketsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteBucketsIDLabelsID(bucketID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getBuckets(zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, org?: string | undefined, orgID?: string | undefined, name?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Buckets>;\r\n    getBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Bucket>;\r\n    getBucketsIDLabels(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Buckets>;\r\n    patchBucketsID(bucketID: string, bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Bucket>;\r\n    postBuckets(bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Bucket>;\r\n    postBucketsIDLabels(bucketID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n};\r\nexport declare const BucketsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDLabelsID(bucketID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getBuckets(zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, org?: string | undefined, orgID?: string | undefined, name?: string | undefined, options?: any): AxiosPromise<Buckets>;\r\n    getBucketsID(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Bucket>;\r\n    getBucketsIDLabels(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<Buckets>;\r\n    patchBucketsID(bucketID: string, bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Bucket>;\r\n    postBuckets(bucket: Bucket, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Bucket>;\r\n    postBucketsIDLabels(bucketID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n};\r\nexport declare class BucketsApi extends BaseAPI {\r\n    deleteBucketsID(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDLabelsID(bucketID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getBuckets(zapTraceSpan?: string, offset?: number, limit?: number, org?: string, orgID?: string, name?: string, options?: any): AxiosPromise<Buckets>;\r\n    getBucketsID(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Bucket>;\r\n    getBucketsIDLabels(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string, org?: string, options?: any): AxiosPromise<Buckets>;\r\n    patchBucketsID(bucketID: string, bucket: Bucket, zapTraceSpan?: string, options?: any): AxiosPromise<Bucket>;\r\n    postBuckets(bucket: Bucket, zapTraceSpan?: string, options?: any): AxiosPromise<Bucket>;\r\n    postBucketsIDLabels(bucketID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n}\r\nexport declare const CellsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const CellsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Cell>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboard>;\r\n};\r\nexport declare const CellsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Cell>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Dashboard>;\r\n};\r\nexport declare class CellsApi extends BaseAPI {\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string, options?: any): AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string, options?: any): AxiosPromise<Cell>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Array<Cell>, zapTraceSpan?: string, options?: any): AxiosPromise<Dashboard>;\r\n}\r\nexport declare const ChecksApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    createCheck(check: Check, options?: any): RequestArgs;\r\n    deleteChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getChecks(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchChecksID(checkID: string, check: Check, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const ChecksApiFp: (configuration?: Configuration | undefined) => {\r\n    createCheck(check: Check, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Check>;\r\n    deleteChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getChecks(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Checks>;\r\n    getChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Check>;\r\n    patchChecksID(checkID: string, check: Check, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Check>;\r\n};\r\nexport declare const ChecksApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    createCheck(check: Check, options?: any): AxiosPromise<Check>;\r\n    deleteChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getChecks(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<Checks>;\r\n    getChecksID(checkID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Check>;\r\n    patchChecksID(checkID: string, check: Check, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Check>;\r\n};\r\nexport declare class ChecksApi extends BaseAPI {\r\n    createCheck(check: Check, options?: any): AxiosPromise<Check>;\r\n    deleteChecksID(checkID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getChecks(orgID: string, offset?: number, limit?: number, options?: any): AxiosPromise<Checks>;\r\n    getChecksID(checkID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Check>;\r\n    patchChecksID(checkID: string, check: Check, zapTraceSpan?: string, options?: any): AxiosPromise<Check>;\r\n}\r\nexport declare const DashboardsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDLabelsID(dashboardID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboards(zapTraceSpan?: string | undefined, owner?: string | undefined, sortBy?: \"ID\" | \"CreatedAt\" | \"UpdatedAt\" | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDLabels(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsID(dashboardID: string, dashboard: Dashboard, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboards(createDashboardRequest: CreateDashboardRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDLabels(dashboardID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const DashboardsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDLabelsID(dashboardID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getDashboards(zapTraceSpan?: string | undefined, owner?: string | undefined, sortBy?: \"ID\" | \"CreatedAt\" | \"UpdatedAt\" | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboards>;\r\n    getDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboard>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n    getDashboardsIDLabels(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    patchDashboardsID(dashboardID: string, dashboard: Dashboard, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboard>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n    postDashboards(createDashboardRequest: CreateDashboardRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboard>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Cell>;\r\n    postDashboardsIDLabels(dashboardID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Dashboard>;\r\n};\r\nexport declare const DashboardsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDLabelsID(dashboardID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getDashboards(zapTraceSpan?: string | undefined, owner?: string | undefined, sortBy?: \"ID\" | \"CreatedAt\" | \"UpdatedAt\" | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<Dashboards>;\r\n    getDashboardsID(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Dashboard>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n    getDashboardsIDLabels(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    patchDashboardsID(dashboardID: string, dashboard: Dashboard, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Dashboard>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n    postDashboards(createDashboardRequest: CreateDashboardRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Dashboard>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Cell>;\r\n    postDashboardsIDLabels(dashboardID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Cell[], zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Dashboard>;\r\n};\r\nexport declare class DashboardsApi extends BaseAPI {\r\n    deleteDashboardsID(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDCellsID(dashboardID: string, cellID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDLabelsID(dashboardID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getDashboards(zapTraceSpan?: string, owner?: string, sortBy?: 'ID' | 'CreatedAt' | 'UpdatedAt', id?: Array<string>, orgID?: string, org?: string, options?: any): AxiosPromise<Dashboards>;\r\n    getDashboardsID(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Dashboard>;\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n    getDashboardsIDLabels(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    patchDashboardsID(dashboardID: string, dashboard: Dashboard, zapTraceSpan?: string, options?: any): AxiosPromise<Dashboard>;\r\n    patchDashboardsIDCellsID(dashboardID: string, cellID: string, cellUpdate: CellUpdate, zapTraceSpan?: string, options?: any): AxiosPromise<Cell>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n    postDashboards(createDashboardRequest: CreateDashboardRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Dashboard>;\r\n    postDashboardsIDCells(dashboardID: string, createCell: CreateCell, zapTraceSpan?: string, options?: any): AxiosPromise<Cell>;\r\n    postDashboardsIDLabels(dashboardID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    putDashboardsIDCells(dashboardID: string, cell: Array<Cell>, zapTraceSpan?: string, options?: any): AxiosPromise<Dashboard>;\r\n}\r\nexport declare const DefaultApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getRoutes(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postSignin(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postSignout(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const DefaultApiFp: (configuration?: Configuration | undefined) => {\r\n    getRoutes(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Routes>;\r\n    postSignin(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    postSignout(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n};\r\nexport declare const DefaultApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getRoutes(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Routes>;\r\n    postSignin(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    postSignout(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n};\r\nexport declare class DefaultApi extends BaseAPI {\r\n    getRoutes(zapTraceSpan?: string, options?: any): AxiosPromise<Routes>;\r\n    postSignin(zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    postSignout(zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n}\r\nexport declare const HealthApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getHealth(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const HealthApiFp: (configuration?: Configuration | undefined) => {\r\n    getHealth(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HealthCheck>;\r\n};\r\nexport declare const HealthApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getHealth(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<HealthCheck>;\r\n};\r\nexport declare class HealthApi extends BaseAPI {\r\n    getHealth(zapTraceSpan?: string, options?: any): AxiosPromise<HealthCheck>;\r\n}\r\nexport declare const LabelsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getLabels(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): RequestArgs;\r\n    getLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchLabelsID(labelID: string, labelUpdate: LabelUpdate, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postLabels(labelCreateRequest: LabelCreateRequest, options?: any): RequestArgs;\r\n};\r\nexport declare const LabelsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getLabels(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    patchLabelsID(labelID: string, labelUpdate: LabelUpdate, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postLabels(labelCreateRequest: LabelCreateRequest, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n};\r\nexport declare const LabelsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getLabels(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getLabelsID(labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    patchLabelsID(labelID: string, labelUpdate: LabelUpdate, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postLabels(labelCreateRequest: LabelCreateRequest, options?: any): AxiosPromise<LabelResponse>;\r\n};\r\nexport declare class LabelsApi extends BaseAPI {\r\n    deleteLabelsID(labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getLabels(zapTraceSpan?: string, orgID?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getLabelsID(labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    patchLabelsID(labelID: string, labelUpdate: LabelUpdate, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postLabels(labelCreateRequest: LabelCreateRequest, options?: any): AxiosPromise<LabelResponse>;\r\n}\r\nexport declare const NotificationEndpointsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    createNotificationEndpoint(notificationEndpoint: NotificationEndpoint, options?: any): RequestArgs;\r\n    deleteNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getNotificationEndpoints(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchNotificationEndpointsID(endpointID: string, notificationEndpoint: NotificationEndpoint, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const NotificationEndpointsApiFp: (configuration?: Configuration | undefined) => {\r\n    createNotificationEndpoint(notificationEndpoint: NotificationEndpoint, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationRule>;\r\n    deleteNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getNotificationEndpoints(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationEndpoints>;\r\n    getNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationEndpoint>;\r\n    patchNotificationEndpointsID(endpointID: string, notificationEndpoint: NotificationEndpoint, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationEndpoint>;\r\n};\r\nexport declare const NotificationEndpointsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    createNotificationEndpoint(notificationEndpoint: NotificationEndpoint, options?: any): AxiosPromise<NotificationRule>;\r\n    deleteNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getNotificationEndpoints(orgID: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<NotificationEndpoints>;\r\n    getNotificationEndpointsID(endpointID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<NotificationEndpoint>;\r\n    patchNotificationEndpointsID(endpointID: string, notificationEndpoint: NotificationEndpoint, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<NotificationEndpoint>;\r\n};\r\nexport declare class NotificationEndpointsApi extends BaseAPI {\r\n    createNotificationEndpoint(notificationEndpoint: NotificationEndpoint, options?: any): AxiosPromise<NotificationRule>;\r\n    deleteNotificationEndpointsID(endpointID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getNotificationEndpoints(orgID: string, offset?: number, limit?: number, options?: any): AxiosPromise<NotificationEndpoints>;\r\n    getNotificationEndpointsID(endpointID: string, zapTraceSpan?: string, options?: any): AxiosPromise<NotificationEndpoint>;\r\n    patchNotificationEndpointsID(endpointID: string, notificationEndpoint: NotificationEndpoint, zapTraceSpan?: string, options?: any): AxiosPromise<NotificationEndpoint>;\r\n}\r\nexport declare const NotificationRulesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    createNotificationRule(notificationRule: NotificationRule, options?: any): RequestArgs;\r\n    deleteNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getNotificationRules(orgID: string, offset?: number | undefined, limit?: number | undefined, checkID?: string | undefined, options?: any): RequestArgs;\r\n    getNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchNotificationRulesID(ruleID: string, notificationRule: NotificationRule, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const NotificationRulesApiFp: (configuration?: Configuration | undefined) => {\r\n    createNotificationRule(notificationRule: NotificationRule, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationRule>;\r\n    deleteNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getNotificationRules(orgID: string, offset?: number | undefined, limit?: number | undefined, checkID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationRules>;\r\n    getNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationRule>;\r\n    patchNotificationRulesID(ruleID: string, notificationRule: NotificationRule, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationRule>;\r\n};\r\nexport declare const NotificationRulesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    createNotificationRule(notificationRule: NotificationRule, options?: any): AxiosPromise<NotificationRule>;\r\n    deleteNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getNotificationRules(orgID: string, offset?: number | undefined, limit?: number | undefined, checkID?: string | undefined, options?: any): AxiosPromise<NotificationRules>;\r\n    getNotificationRulesID(ruleID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<NotificationRule>;\r\n    patchNotificationRulesID(ruleID: string, notificationRule: NotificationRule, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<NotificationRule>;\r\n};\r\nexport declare class NotificationRulesApi extends BaseAPI {\r\n    createNotificationRule(notificationRule: NotificationRule, options?: any): AxiosPromise<NotificationRule>;\r\n    deleteNotificationRulesID(ruleID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getNotificationRules(orgID: string, offset?: number, limit?: number, checkID?: string, options?: any): AxiosPromise<NotificationRules>;\r\n    getNotificationRulesID(ruleID: string, zapTraceSpan?: string, options?: any): AxiosPromise<NotificationRule>;\r\n    patchNotificationRulesID(ruleID: string, notificationRule: NotificationRule, zapTraceSpan?: string, options?: any): AxiosPromise<NotificationRule>;\r\n}\r\nexport declare const OperationLogsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const OperationLogsApiFp: (configuration?: Configuration | undefined) => {\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n};\r\nexport declare const OperationLogsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n};\r\nexport declare class OperationLogsApi extends BaseAPI {\r\n    getBucketsIDLogs(bucketID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getDashboardsIDLogs(dashboardID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n}\r\nexport declare const OrganizationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteOrgsIDLabelsID(orgID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgs(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDLabels(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchOrgsID(orgID: string, organization: Organization, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgs(organization: Organization, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDLabels(orgID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const OrganizationsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteOrgsIDLabelsID(orgID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getOrgs(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organizations>;\r\n    getOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organization>;\r\n    getOrgsIDLabels(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsID(orgID: string, organization: Organization, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organization>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    postOrgs(organization: Organization, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organization>;\r\n    postOrgsIDLabels(orgID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n};\r\nexport declare const OrganizationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDLabelsID(orgID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getOrgs(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): AxiosPromise<Organizations>;\r\n    getOrgsID(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Organization>;\r\n    getOrgsIDLabels(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsID(orgID: string, organization: Organization, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Organization>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    postOrgs(organization: Organization, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Organization>;\r\n    postOrgsIDLabels(orgID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n};\r\nexport declare class OrganizationsApi extends BaseAPI {\r\n    deleteOrgsID(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDLabelsID(orgID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getOrgs(zapTraceSpan?: string, org?: string, orgID?: string, options?: any): AxiosPromise<Organizations>;\r\n    getOrgsID(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Organization>;\r\n    getOrgsIDLabels(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getOrgsIDLogs(orgID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsID(orgID: string, organization: Organization, zapTraceSpan?: string, options?: any): AxiosPromise<Organization>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    postOrgs(organization: Organization, zapTraceSpan?: string, options?: any): AxiosPromise<Organization>;\r\n    postOrgsIDLabels(orgID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n}\r\nexport declare const QueryApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getQuerySuggestions(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getQuerySuggestionsName(name: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postQuery(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | \"application/vnd.flux\" | undefined, org?: string | undefined, orgID?: string | undefined, query?: Query | undefined, options?: any): RequestArgs;\r\n    postQueryAnalyze(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, query?: Query | undefined, options?: any): RequestArgs;\r\n    postQueryAst(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, languageRequest?: LanguageRequest | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const QueryApiFp: (configuration?: Configuration | undefined) => {\r\n    getQuerySuggestions(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FluxSuggestions>;\r\n    getQuerySuggestionsName(name: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FluxSuggestions>;\r\n    postQuery(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | \"application/vnd.flux\" | undefined, org?: string | undefined, orgID?: string | undefined, query?: Query | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;\r\n    postQueryAnalyze(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, query?: Query | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AnalyzeQueryResponse>;\r\n    postQueryAst(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, languageRequest?: LanguageRequest | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ASTResponse>;\r\n};\r\nexport declare const QueryApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getQuerySuggestions(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<FluxSuggestions>;\r\n    getQuerySuggestionsName(name: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<FluxSuggestions>;\r\n    postQuery(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | \"application/vnd.flux\" | undefined, org?: string | undefined, orgID?: string | undefined, query?: Query | undefined, options?: any): AxiosPromise<string>;\r\n    postQueryAnalyze(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, query?: Query | undefined, options?: any): AxiosPromise<AnalyzeQueryResponse>;\r\n    postQueryAst(zapTraceSpan?: string | undefined, contentType?: \"application/json\" | undefined, languageRequest?: LanguageRequest | undefined, options?: any): AxiosPromise<ASTResponse>;\r\n};\r\nexport declare class QueryApi extends BaseAPI {\r\n    getQuerySuggestions(zapTraceSpan?: string, options?: any): AxiosPromise<FluxSuggestions>;\r\n    getQuerySuggestionsName(name: string, zapTraceSpan?: string, options?: any): AxiosPromise<FluxSuggestions>;\r\n    postQuery(zapTraceSpan?: string, contentType?: 'application/json' | 'application/vnd.flux', org?: string, orgID?: string, query?: Query, options?: any): AxiosPromise<string>;\r\n    postQueryAnalyze(zapTraceSpan?: string, contentType?: 'application/json', query?: Query, options?: any): AxiosPromise<AnalyzeQueryResponse>;\r\n    postQueryAst(zapTraceSpan?: string, contentType?: 'application/json', languageRequest?: LanguageRequest, options?: any): AxiosPromise<ASTResponse>;\r\n}\r\nexport declare const ReadyApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getReady(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const ReadyApiFp: (configuration?: Configuration | undefined) => {\r\n    getReady(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Ready>;\r\n};\r\nexport declare const ReadyApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getReady(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Ready>;\r\n};\r\nexport declare class ReadyApi extends BaseAPI {\r\n    getReady(zapTraceSpan?: string, options?: any): AxiosPromise<Ready>;\r\n}\r\nexport declare const ScraperTargetsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteScrapersIDLabelsID(scraperTargetID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapers(zapTraceSpan?: string | undefined, name?: string | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersIDLabels(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchScrapersID(scraperTargetID: string, scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchScrapersIDLabelsID(scraperTargetID: string, labelID: string, label: Label, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapers(scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapersIDLabels(scraperTargetID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const ScraperTargetsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteScrapersIDLabelsID(scraperTargetID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getScrapers(zapTraceSpan?: string | undefined, name?: string | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ScraperTargetResponses>;\r\n    getScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ScraperTargetResponse>;\r\n    getScrapersIDLabels(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    patchScrapersID(scraperTargetID: string, scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ScraperTargetResponse>;\r\n    patchScrapersIDLabelsID(scraperTargetID: string, labelID: string, label: Label, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    postScrapers(scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ScraperTargetResponse>;\r\n    postScrapersIDLabels(scraperTargetID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n};\r\nexport declare const ScraperTargetsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDLabelsID(scraperTargetID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getScrapers(zapTraceSpan?: string | undefined, name?: string | undefined, id?: string[] | undefined, orgID?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<ScraperTargetResponses>;\r\n    getScrapersID(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    getScrapersIDLabels(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    patchScrapersID(scraperTargetID: string, scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    patchScrapersIDLabelsID(scraperTargetID: string, labelID: string, label: Label, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    postScrapers(scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    postScrapersIDLabels(scraperTargetID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n};\r\nexport declare class ScraperTargetsApi extends BaseAPI {\r\n    deleteScrapersID(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDLabelsID(scraperTargetID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getScrapers(zapTraceSpan?: string, name?: string, id?: Array<string>, orgID?: string, org?: string, options?: any): AxiosPromise<ScraperTargetResponses>;\r\n    getScrapersID(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    getScrapersIDLabels(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    patchScrapersID(scraperTargetID: string, scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    patchScrapersIDLabelsID(scraperTargetID: string, labelID: string, label: Label, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    postScrapers(scraperTargetRequest: ScraperTargetRequest, zapTraceSpan?: string, options?: any): AxiosPromise<ScraperTargetResponse>;\r\n    postScrapersIDLabels(scraperTargetID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n}\r\nexport declare const SecretsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const SecretsApiFp: (configuration?: Configuration | undefined) => {\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n};\r\nexport declare const SecretsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n};\r\nexport declare class SecretsApi extends BaseAPI {\r\n    getOrgsIDSecrets(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<SecretKeysResponse>;\r\n    patchOrgsIDSecrets(orgID: string, requestBody: {\r\n        [key: string]: string;\r\n    }, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    postOrgsIDSecrets(orgID: string, secretKeys: SecretKeys, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n}\r\nexport declare const SetupApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getSetup(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postSetup(onboardingRequest: OnboardingRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const SetupApiFp: (configuration?: Configuration | undefined) => {\r\n    getSetup(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IsOnboarding>;\r\n    postSetup(onboardingRequest: OnboardingRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OnboardingResponse>;\r\n};\r\nexport declare const SetupApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getSetup(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<IsOnboarding>;\r\n    postSetup(onboardingRequest: OnboardingRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<OnboardingResponse>;\r\n};\r\nexport declare class SetupApi extends BaseAPI {\r\n    getSetup(zapTraceSpan?: string, options?: any): AxiosPromise<IsOnboarding>;\r\n    postSetup(onboardingRequest: OnboardingRequest, zapTraceSpan?: string, options?: any): AxiosPromise<OnboardingResponse>;\r\n}\r\nexport declare const SourcesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getSources(zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    getSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): RequestArgs;\r\n    getSourcesIDHealth(sourceID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchSourcesID(sourceID: string, source: Source, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postSources(source: Source, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const SourcesApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getSources(zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Sources>;\r\n    getSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Source>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Buckets>;\r\n    getSourcesIDHealth(sourceID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HealthCheck>;\r\n    patchSourcesID(sourceID: string, source: Source, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Source>;\r\n    postSources(source: Source, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Source>;\r\n};\r\nexport declare const SourcesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getSources(zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<Sources>;\r\n    getSourcesID(sourceID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Source>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string | undefined, org?: string | undefined, options?: any): AxiosPromise<Buckets>;\r\n    getSourcesIDHealth(sourceID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<HealthCheck>;\r\n    patchSourcesID(sourceID: string, source: Source, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Source>;\r\n    postSources(source: Source, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Source>;\r\n};\r\nexport declare class SourcesApi extends BaseAPI {\r\n    deleteSourcesID(sourceID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getSources(zapTraceSpan?: string, org?: string, options?: any): AxiosPromise<Sources>;\r\n    getSourcesID(sourceID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Source>;\r\n    getSourcesIDBuckets(sourceID: string, zapTraceSpan?: string, org?: string, options?: any): AxiosPromise<Buckets>;\r\n    getSourcesIDHealth(sourceID: string, zapTraceSpan?: string, options?: any): AxiosPromise<HealthCheck>;\r\n    patchSourcesID(sourceID: string, source: Source, zapTraceSpan?: string, options?: any): AxiosPromise<Source>;\r\n    postSources(source: Source, zapTraceSpan?: string, options?: any): AxiosPromise<Source>;\r\n}\r\nexport declare const TasksApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTasksIDLabelsID(taskID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasks(zapTraceSpan?: string | undefined, after?: string | undefined, user?: string | undefined, org?: string | undefined, orgID?: string | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    getTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDLabels(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDLogs(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, after?: string | undefined, limit?: number | undefined, afterTime?: Date | undefined, beforeTime?: Date | undefined, options?: any): RequestArgs;\r\n    getTasksIDRunsID(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDRunsIDLogs(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchTasksID(taskID: string, taskUpdateRequest: TaskUpdateRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasks(taskCreateRequest: TaskCreateRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDLabels(taskID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, runManually?: RunManually | undefined, options?: any): RequestArgs;\r\n    postTasksIDRunsIDRetry(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const TasksApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTasksIDLabelsID(taskID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getTasks(zapTraceSpan?: string | undefined, after?: string | undefined, user?: string | undefined, org?: string | undefined, orgID?: string | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tasks>;\r\n    getTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Task>;\r\n    getTasksIDLabels(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getTasksIDLogs(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Logs>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, after?: string | undefined, limit?: number | undefined, afterTime?: Date | undefined, beforeTime?: Date | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Runs>;\r\n    getTasksIDRunsID(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Run>;\r\n    getTasksIDRunsIDLogs(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Logs>;\r\n    patchTasksID(taskID: string, taskUpdateRequest: TaskUpdateRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Task>;\r\n    postTasks(taskCreateRequest: TaskCreateRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Task>;\r\n    postTasksIDLabels(taskID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, runManually?: RunManually | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Run>;\r\n    postTasksIDRunsIDRetry(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Run>;\r\n};\r\nexport declare const TasksApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDLabelsID(taskID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getTasks(zapTraceSpan?: string | undefined, after?: string | undefined, user?: string | undefined, org?: string | undefined, orgID?: string | undefined, limit?: number | undefined, options?: any): AxiosPromise<Tasks>;\r\n    getTasksID(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Task>;\r\n    getTasksIDLabels(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getTasksIDLogs(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Logs>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, after?: string | undefined, limit?: number | undefined, afterTime?: Date | undefined, beforeTime?: Date | undefined, options?: any): AxiosPromise<Runs>;\r\n    getTasksIDRunsID(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Run>;\r\n    getTasksIDRunsIDLogs(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Logs>;\r\n    patchTasksID(taskID: string, taskUpdateRequest: TaskUpdateRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Task>;\r\n    postTasks(taskCreateRequest: TaskCreateRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Task>;\r\n    postTasksIDLabels(taskID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTasksIDRuns(taskID: string, zapTraceSpan?: string | undefined, runManually?: RunManually | undefined, options?: any): AxiosPromise<Run>;\r\n    postTasksIDRunsIDRetry(taskID: string, runID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Run>;\r\n};\r\nexport declare class TasksApi extends BaseAPI {\r\n    deleteTasksID(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDLabelsID(taskID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getTasks(zapTraceSpan?: string, after?: string, user?: string, org?: string, orgID?: string, limit?: number, options?: any): AxiosPromise<Tasks>;\r\n    getTasksID(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Task>;\r\n    getTasksIDLabels(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getTasksIDLogs(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Logs>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTasksIDRuns(taskID: string, zapTraceSpan?: string, after?: string, limit?: number, afterTime?: Date, beforeTime?: Date, options?: any): AxiosPromise<Runs>;\r\n    getTasksIDRunsID(taskID: string, runID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Run>;\r\n    getTasksIDRunsIDLogs(taskID: string, runID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Logs>;\r\n    patchTasksID(taskID: string, taskUpdateRequest: TaskUpdateRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Task>;\r\n    postTasks(taskCreateRequest: TaskCreateRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Task>;\r\n    postTasksIDLabels(taskID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTasksIDRuns(taskID: string, zapTraceSpan?: string, runManually?: RunManually, options?: any): AxiosPromise<Run>;\r\n    postTasksIDRunsIDRetry(taskID: string, runID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Run>;\r\n}\r\nexport declare const TelegrafsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTelegrafsIDLabelsID(telegrafID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafs(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, accept?: \"application/json\" | \"application/toml\" | \"application/octet-stream\" | undefined, options?: any): RequestArgs;\r\n    getTelegrafsIDLabels(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafs(telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafsIDLabels(telegrafID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putTelegrafsID(telegrafID: string, telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const TelegrafsApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTelegrafsIDLabelsID(telegrafID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getTelegrafs(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Telegrafs>;\r\n    getTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, accept?: \"application/json\" | \"application/toml\" | \"application/octet-stream\" | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;\r\n    getTelegrafsIDLabels(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    postTelegrafs(telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Telegraf>;\r\n    postTelegrafsIDLabels(telegrafID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    putTelegrafsID(telegrafID: string, telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Telegraf>;\r\n};\r\nexport declare const TelegrafsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDLabelsID(telegrafID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getTelegrafs(zapTraceSpan?: string | undefined, orgID?: string | undefined, options?: any): AxiosPromise<Telegrafs>;\r\n    getTelegrafsID(telegrafID: string, zapTraceSpan?: string | undefined, accept?: \"application/json\" | \"application/toml\" | \"application/octet-stream\" | undefined, options?: any): AxiosPromise<string>;\r\n    getTelegrafsIDLabels(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    postTelegrafs(telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Telegraf>;\r\n    postTelegrafsIDLabels(telegrafID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    putTelegrafsID(telegrafID: string, telegrafRequest: TelegrafRequest, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Telegraf>;\r\n};\r\nexport declare class TelegrafsApi extends BaseAPI {\r\n    deleteTelegrafsID(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDLabelsID(telegrafID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getTelegrafs(zapTraceSpan?: string, orgID?: string, options?: any): AxiosPromise<Telegrafs>;\r\n    getTelegrafsID(telegrafID: string, zapTraceSpan?: string, accept?: 'application/toml' | 'application/json' | 'application/octet-stream', options?: any): AxiosPromise<string>;\r\n    getTelegrafsIDLabels(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    postTelegrafs(telegrafRequest: TelegrafRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Telegraf>;\r\n    postTelegrafsIDLabels(telegrafID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    putTelegrafsID(telegrafID: string, telegrafRequest: TelegrafRequest, zapTraceSpan?: string, options?: any): AxiosPromise<Telegraf>;\r\n}\r\nexport declare const TemplatesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDocumentsTemplatesIDLabelsID(templateID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDocumentsTemplates(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): RequestArgs;\r\n    getDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDocumentsTemplatesIDLabels(templateID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDocumentsTemplates(documentCreate: DocumentCreate, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDocumentsTemplatesIDLabels(templateID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putDocumentsTemplatesID(templateID: string, documentUpdate: DocumentUpdate, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const TemplatesApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDocumentsTemplatesIDLabelsID(templateID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getDocumentsTemplates(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Documents>;\r\n    getDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Document>;\r\n    getDocumentsTemplatesIDLabels(templateID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    postDocumentsTemplates(documentCreate: DocumentCreate, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Document>;\r\n    postDocumentsTemplatesIDLabels(templateID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    putDocumentsTemplatesID(templateID: string, documentUpdate: DocumentUpdate, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Document>;\r\n};\r\nexport declare const TemplatesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDocumentsTemplatesIDLabelsID(templateID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getDocumentsTemplates(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): AxiosPromise<Documents>;\r\n    getDocumentsTemplatesID(templateID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Document>;\r\n    getDocumentsTemplatesIDLabels(templateID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    postDocumentsTemplates(documentCreate: DocumentCreate, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Document>;\r\n    postDocumentsTemplatesIDLabels(templateID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    putDocumentsTemplatesID(templateID: string, documentUpdate: DocumentUpdate, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Document>;\r\n};\r\nexport declare class TemplatesApi extends BaseAPI {\r\n    deleteDocumentsTemplatesID(templateID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDocumentsTemplatesIDLabelsID(templateID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getDocumentsTemplates(zapTraceSpan?: string, org?: string, orgID?: string, options?: any): AxiosPromise<Documents>;\r\n    getDocumentsTemplatesID(templateID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Document>;\r\n    getDocumentsTemplatesIDLabels(templateID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    postDocumentsTemplates(documentCreate: DocumentCreate, zapTraceSpan?: string, options?: any): AxiosPromise<Document>;\r\n    postDocumentsTemplatesIDLabels(templateID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    putDocumentsTemplatesID(templateID: string, documentUpdate: DocumentUpdate, zapTraceSpan?: string, options?: any): AxiosPromise<Document>;\r\n}\r\nexport declare const UsersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getMe(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getUsers(zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;\r\n    patchUsersID(userID: string, user: User, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postUsers(user: User, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putMePassword(passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putUsersIDPassword(userID: string, passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const UsersApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getMe(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwners>;\r\n    getUsers(zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>;\r\n    getUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OperationLogs>;\r\n    patchUsersID(userID: string, user: User, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResourceOwner>;\r\n    postUsers(user: User, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>;\r\n    putMePassword(passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    putUsersIDPassword(userID: string, passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n};\r\nexport declare const UsersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getMe(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<User>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwners>;\r\n    getUsers(zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Users>;\r\n    getUsersID(userID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<User>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<OperationLogs>;\r\n    patchUsersID(userID: string, user: User, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<User>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<ResourceOwner>;\r\n    postUsers(user: User, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<User>;\r\n    putMePassword(passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    putUsersIDPassword(userID: string, passwordResetBody: PasswordResetBody, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n};\r\nexport declare class UsersApi extends BaseAPI {\r\n    deleteBucketsIDMembersID(userID: string, bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteBucketsIDOwnersID(userID: string, bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDMembersID(userID: string, dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteDashboardsIDOwnersID(userID: string, dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDMembersID(userID: string, orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteOrgsIDOwnersID(userID: string, orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDMembersID(userID: string, scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteScrapersIDOwnersID(userID: string, scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDMembersID(userID: string, taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTasksIDOwnersID(userID: string, taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDMembersID(userID: string, telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteTelegrafsIDOwnersID(userID: string, telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteUsersID(userID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getBucketsIDMembers(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getBucketsIDOwners(bucketID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getDashboardsIDMembers(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getDashboardsIDOwners(dashboardID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getMe(zapTraceSpan?: string, options?: any): AxiosPromise<User>;\r\n    getOrgsIDMembers(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getOrgsIDOwners(orgID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getScrapersIDMembers(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getScrapersIDOwners(scraperTargetID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTasksIDMembers(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTasksIDOwners(taskID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getTelegrafsIDMembers(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMembers>;\r\n    getTelegrafsIDOwners(telegrafID: string, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwners>;\r\n    getUsers(zapTraceSpan?: string, options?: any): AxiosPromise<Users>;\r\n    getUsersID(userID: string, zapTraceSpan?: string, options?: any): AxiosPromise<User>;\r\n    getUsersIDLogs(userID: string, zapTraceSpan?: string, offset?: number, limit?: number, options?: any): AxiosPromise<OperationLogs>;\r\n    patchUsersID(userID: string, user: User, zapTraceSpan?: string, options?: any): AxiosPromise<User>;\r\n    postBucketsIDMembers(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postBucketsIDOwners(bucketID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postDashboardsIDMembers(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postDashboardsIDOwners(dashboardID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postOrgsIDMembers(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postOrgsIDOwners(orgID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postScrapersIDMembers(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postScrapersIDOwners(scraperTargetID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTasksIDMembers(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postTasksIDOwners(taskID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postTelegrafsIDMembers(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceMember>;\r\n    postTelegrafsIDOwners(telegrafID: string, addResourceMemberRequestBody: AddResourceMemberRequestBody, zapTraceSpan?: string, options?: any): AxiosPromise<ResourceOwner>;\r\n    postUsers(user: User, zapTraceSpan?: string, options?: any): AxiosPromise<User>;\r\n    putMePassword(passwordResetBody: PasswordResetBody, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    putUsersIDPassword(userID: string, passwordResetBody: PasswordResetBody, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n}\r\nexport declare const VariablesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    deleteVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    deleteVariablesIDLabelsID(variableID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getVariables(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): RequestArgs;\r\n    getVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    getVariablesIDLabels(variableID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postVariables(variable: Variable, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    postVariablesIDLabels(variableID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    putVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const VariablesApiFp: (configuration?: Configuration | undefined) => {\r\n    deleteVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    deleteVariablesIDLabelsID(variableID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n    getVariables(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Variables>;\r\n    getVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Variable>;\r\n    getVariablesIDLabels(variableID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelsResponse>;\r\n    patchVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Variable>;\r\n    postVariables(variable: Variable, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Variable>;\r\n    postVariablesIDLabels(variableID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LabelResponse>;\r\n    putVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Variable>;\r\n};\r\nexport declare const VariablesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    deleteVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    deleteVariablesIDLabelsID(variableID: string, labelID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Response>;\r\n    getVariables(zapTraceSpan?: string | undefined, org?: string | undefined, orgID?: string | undefined, options?: any): AxiosPromise<Variables>;\r\n    getVariablesID(variableID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Variable>;\r\n    getVariablesIDLabels(variableID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelsResponse>;\r\n    patchVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Variable>;\r\n    postVariables(variable: Variable, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Variable>;\r\n    postVariablesIDLabels(variableID: string, labelMapping: LabelMapping, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<LabelResponse>;\r\n    putVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<Variable>;\r\n};\r\nexport declare class VariablesApi extends BaseAPI {\r\n    deleteVariablesID(variableID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    deleteVariablesIDLabelsID(variableID: string, labelID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Response>;\r\n    getVariables(zapTraceSpan?: string, org?: string, orgID?: string, options?: any): AxiosPromise<Variables>;\r\n    getVariablesID(variableID: string, zapTraceSpan?: string, options?: any): AxiosPromise<Variable>;\r\n    getVariablesIDLabels(variableID: string, zapTraceSpan?: string, options?: any): AxiosPromise<LabelsResponse>;\r\n    patchVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string, options?: any): AxiosPromise<Variable>;\r\n    postVariables(variable: Variable, zapTraceSpan?: string, options?: any): AxiosPromise<Variable>;\r\n    postVariablesIDLabels(variableID: string, labelMapping: LabelMapping, zapTraceSpan?: string, options?: any): AxiosPromise<LabelResponse>;\r\n    putVariablesID(variableID: string, variable: Variable, zapTraceSpan?: string, options?: any): AxiosPromise<Variable>;\r\n}\r\nexport declare const ViewsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const ViewsApiFp: (configuration?: Configuration | undefined) => {\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<View>;\r\n};\r\nexport declare const ViewsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string | undefined, options?: any): AxiosPromise<View>;\r\n};\r\nexport declare class ViewsApi extends BaseAPI {\r\n    getDashboardsIDCellsIDView(dashboardID: string, cellID: string, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n    patchDashboardsIDCellsIDView(dashboardID: string, cellID: string, view: View, zapTraceSpan?: string, options?: any): AxiosPromise<View>;\r\n}\r\nexport declare const WriteApiAxiosParamCreator: (configuration?: Configuration | undefined) => {\r\n    postWrite(org: string, bucket: string, body: string, zapTraceSpan?: string | undefined, contentEncoding?: \"gzip\" | \"identity\" | undefined, contentType?: \"text/plain\" | \"text/plain; charset=utf-8\" | \"application/vnd.influx.arrow\" | undefined, contentLength?: number | undefined, accept?: \"application/json\" | undefined, precision?: WritePrecision | undefined, options?: any): RequestArgs;\r\n};\r\nexport declare const WriteApiFp: (configuration?: Configuration | undefined) => {\r\n    postWrite(org: string, bucket: string, body: string, zapTraceSpan?: string | undefined, contentEncoding?: \"gzip\" | \"identity\" | undefined, contentType?: \"text/plain\" | \"text/plain; charset=utf-8\" | \"application/vnd.influx.arrow\" | undefined, contentLength?: number | undefined, accept?: \"application/json\" | undefined, precision?: WritePrecision | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;\r\n};\r\nexport declare const WriteApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {\r\n    postWrite(org: string, bucket: string, body: string, zapTraceSpan?: string | undefined, contentEncoding?: \"gzip\" | \"identity\" | undefined, contentType?: \"text/plain\" | \"text/plain; charset=utf-8\" | \"application/vnd.influx.arrow\" | undefined, contentLength?: number | undefined, accept?: \"application/json\" | undefined, precision?: WritePrecision | undefined, options?: any): AxiosPromise<Response>;\r\n};\r\nexport declare class WriteApi extends BaseAPI {\r\n    postWrite(org: string, bucket: string, body: string, zapTraceSpan?: string, contentEncoding?: 'gzip' | 'identity', contentType?: 'text/plain' | 'text/plain; charset=utf-8' | 'application/vnd.influx.arrow', contentLength?: number, accept?: 'application/json', precision?: WritePrecision, options?: any): AxiosPromise<Response>;\r\n}\r\n"}}
