{"code":"import * as tslib_1 from \"tslib\";\r\nimport { VariablesApi } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nimport saga from '../utils/sagas';\r\nvar addDefaults = function (variable) {\r\n    return tslib_1.__assign({}, variable, { labels: (variable.labels || []).map(addLabelDefaults) });\r\n};\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new VariablesApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var variable;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getVariablesID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        variable = (_a.sent()).data;\r\n                        return [2, addDefaults(variable)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        return [4, this.service.patchVariablesID(id, tslib_1.__assign({}, original, props), undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAllByOrg = function (org) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var variables;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getVariables(undefined, org, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        variables = (_a.sent()).data.variables;\r\n                        return [2, (variables || []).map(function (v) { return addDefaults(v); })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var variables;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getVariables(undefined, undefined, orgID, this.serviceOptions)];\r\n                    case 1:\r\n                        variables = (_a.sent()).data.variables;\r\n                        return [2, (variables || []).map(function (v) { return addDefaults(v); })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (variable) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postVariables(variable, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.createAll = function (variables) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pendingVariables, createdVars;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pendingVariables = variables.map(function (v) { return _this.create(v); });\r\n                        return [4, Promise.all(pendingVariables)];\r\n                    case 1:\r\n                        createdVars = _a.sent();\r\n                        return [2, createdVars.map(function (v) { return addDefaults(v); })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteVariablesID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabel = function (variableID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postVariablesIDLabels(variableID, {\r\n                            labelID: labelID,\r\n                        }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (!data.label) {\r\n                            throw new Error('Failed to add label');\r\n                        }\r\n                        return [2, addLabelDefaults(data.label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabels = function (variableID, labelIDs) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var pendingLabels;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        pendingLabels = labelIDs.map(function (l) {\r\n                            return {\r\n                                action: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        switch (_a.label) {\r\n                                            case 0: return [4, this.addLabel(variableID, l)];\r\n                                            case 1: return [2, _a.sent()];\r\n                                        }\r\n                                    });\r\n                                }); },\r\n                                rollback: function (r) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                    return tslib_1.__generator(this, function (_a) {\r\n                                        if (r && r.id) {\r\n                                            this.removeLabel(variableID, r.id);\r\n                                        }\r\n                                        return [2];\r\n                                    });\r\n                                }); },\r\n                            };\r\n                        });\r\n                        return [4, saga(pendingLabels)];\r\n                    case 1: return [2, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabel = function (variableID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteVariablesIDLabelsID(variableID, labelID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabels = function (variableID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.removeLabel(variableID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/utils/sagas.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/variables.d.ts","writeByteOrderMark":false,"text":"import { Variable } from '../api';\r\nimport { ILabel, IVariable, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    get(id: string): Promise<IVariable>;\r\n    update(id: string, props: Partial<Variable>): Promise<IVariable>;\r\n    getAllByOrg(org: string): Promise<IVariable[]>;\r\n    getAll(orgID?: string): Promise<IVariable[]>;\r\n    create(variable: Variable): Promise<IVariable>;\r\n    createAll(variables: Variable[]): Promise<IVariable[]>;\r\n    delete(id: string): Promise<Response>;\r\n    addLabel(variableID: string, labelID: string): Promise<ILabel>;\r\n    addLabels(variableID: string, labelIDs: string[]): Promise<ILabel[]>;\r\n    removeLabel(variableID: string, labelID: string): Promise<Response>;\r\n    removeLabels(variableID: string, labelIDs: string[]): Promise<Response[]>;\r\n}\r\n"}}
