{"code":"export var TemplateType;\r\n(function (TemplateType) {\r\n    TemplateType[\"Label\"] = \"label\";\r\n    TemplateType[\"Task\"] = \"task\";\r\n    TemplateType[\"Dashboard\"] = \"dashboard\";\r\n    TemplateType[\"View\"] = \"view\";\r\n    TemplateType[\"Cell\"] = \"cell\";\r\n    TemplateType[\"Variable\"] = \"variable\";\r\n})(TemplateType || (TemplateType = {}));\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/types/templates.d.ts","writeByteOrderMark":false,"text":"import { Cell, View, Document, Variable } from '../api';\r\nimport { ILabel, IDashboard } from './labels';\r\nexport declare enum TemplateType {\r\n    Label = \"label\",\r\n    Task = \"task\",\r\n    Dashboard = \"dashboard\",\r\n    View = \"view\",\r\n    Cell = \"cell\",\r\n    Variable = \"variable\"\r\n}\r\nimport { DocumentListEntry } from '../api';\r\ninterface IKeyValuePairs {\r\n    [key: string]: any;\r\n}\r\ninterface ITemplateBase extends Document {\r\n    content: {\r\n        data: ITemplateData;\r\n        included: ITemplateIncluded[];\r\n    };\r\n    labels: ILabel[];\r\n}\r\ninterface ITemplateData {\r\n    type: TemplateType;\r\n    attributes: IKeyValuePairs;\r\n    relationships: {\r\n        [key in TemplateType]?: {\r\n            data: IRelationship[];\r\n        };\r\n    };\r\n}\r\ninterface ITemplateIncluded {\r\n    type: TemplateType;\r\n    id: string;\r\n    attributes: IKeyValuePairs;\r\n}\r\ndeclare type IRelationship = ICellRelationship | ILabelRelationship | IViewRelationship | IVariableRelationship;\r\ninterface ICellRelationship {\r\n    type: TemplateType.Cell;\r\n    id: string;\r\n}\r\nexport interface ILabelRelationship {\r\n    type: TemplateType.Label;\r\n    id: string;\r\n}\r\nexport interface IVariableRelationship {\r\n    type: TemplateType.Variable;\r\n    id: string;\r\n}\r\ninterface IViewRelationship {\r\n    type: TemplateType.View;\r\n    id: string;\r\n}\r\nexport interface IViewIncluded extends ITemplateIncluded {\r\n    type: TemplateType.View;\r\n    attributes: View;\r\n}\r\nexport interface ICellIncluded extends ITemplateIncluded {\r\n    type: TemplateType.Cell;\r\n    attributes: Cell;\r\n    relationships: {\r\n        [TemplateType.View]: {\r\n            data: IViewRelationship;\r\n        };\r\n    };\r\n}\r\nexport interface ILabelIncluded extends ITemplateIncluded {\r\n    type: TemplateType.Label;\r\n    attributes: ILabel;\r\n}\r\nexport interface IVariableIncluded extends ITemplateIncluded {\r\n    type: TemplateType.Variable;\r\n    attributes: Variable;\r\n}\r\nexport declare type ITaskTemplateIncluded = ILabelIncluded;\r\nexport declare type IDashboardTemplateIncluded = ICellIncluded | IViewIncluded | ILabelIncluded | IVariableIncluded;\r\nexport declare type IVariableTemplateIncluded = IVariableIncluded | ILabelIncluded;\r\ninterface ITaskTemplateData extends ITemplateData {\r\n    type: TemplateType.Task;\r\n    attributes: {\r\n        name: string;\r\n        flux: string;\r\n    };\r\n    relationships: {\r\n        [TemplateType.Label]: {\r\n            data: ILabelRelationship[];\r\n        };\r\n    };\r\n}\r\ninterface IDashboardTemplateData extends ITemplateData {\r\n    type: TemplateType.Dashboard;\r\n    attributes: IDashboard;\r\n    relationships: {\r\n        [TemplateType.Label]: {\r\n            data: ILabelRelationship[];\r\n        };\r\n        [TemplateType.Cell]: {\r\n            data: ICellRelationship[];\r\n        };\r\n        [TemplateType.Variable]: {\r\n            data: IVariableRelationship[];\r\n        };\r\n    };\r\n}\r\ninterface VariableTemplateData extends ITemplateData {\r\n    type: TemplateType.Variable;\r\n    attributes: Omit<Variable, 'labels' | 'links'>;\r\n    relationships: {\r\n        [TemplateType.Label]: {\r\n            data: ILabelRelationship[];\r\n        };\r\n        [TemplateType.Variable]: {\r\n            data: IVariableRelationship[];\r\n        };\r\n    };\r\n}\r\nexport interface ITaskTemplate extends ITemplateBase {\r\n    content: {\r\n        data: ITaskTemplateData;\r\n        included: ITaskTemplateIncluded[];\r\n    };\r\n}\r\nexport interface IDashboardTemplate extends ITemplateBase {\r\n    content: {\r\n        data: IDashboardTemplateData;\r\n        included: IDashboardTemplateIncluded[];\r\n    };\r\n}\r\nexport interface IVariableTemplate extends ITemplateBase {\r\n    content: {\r\n        data: VariableTemplateData;\r\n        included: IVariableTemplateIncluded[];\r\n    };\r\n}\r\nexport declare type ITemplate = ITaskTemplate | IDashboardTemplate | IVariableTemplate;\r\nexport interface TemplateSummary extends DocumentListEntry {\r\n    labels: ILabel[];\r\n}\r\ndeclare type Omit<K, V> = Pick<K, Exclude<keyof K, V>>;\r\nexport {};\r\n"}}
