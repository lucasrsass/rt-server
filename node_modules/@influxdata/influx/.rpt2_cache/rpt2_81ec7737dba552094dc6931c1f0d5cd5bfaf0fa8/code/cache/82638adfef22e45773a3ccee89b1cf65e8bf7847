{"code":"import * as tslib_1 from \"tslib\";\r\nimport { NotificationRulesApi } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nvar addDefaults = function (notificationRule) { return (tslib_1.__assign({}, notificationRule, { labels: (notificationRule.labels || []).map(addLabelDefaults) })); };\r\nvar addDefaultsToAll = function (notificationRule) { return notificationRule.map(addDefaults); };\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new NotificationRulesApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.get = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getNotificationRulesID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var notificationRules;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getNotificationRules(orgID, undefined, undefined, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        notificationRules = (_a.sent()).data.notificationRules;\r\n                        return [2, addDefaultsToAll(notificationRules || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.getAllForCheck = function (orgID, checkID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var notificationRules;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getNotificationRules(orgID, undefined, undefined, checkID, this.serviceOptions)];\r\n                    case 1:\r\n                        notificationRules = (_a.sent()).data.notificationRules;\r\n                        return [2, addDefaultsToAll(notificationRules || [])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (notificationRule) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.createNotificationRule(notificationRule, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, notificationRule) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.patchNotificationRulesID(id, notificationRule, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (id) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteNotificationRulesID(id, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/node_modules/axios/index.d.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/notifications.d.ts","writeByteOrderMark":false,"text":"import { NotificationRule, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    get(id: string): Promise<NotificationRule>;\r\n    getAll(orgID: string): Promise<NotificationRule[]>;\r\n    getAllForCheck(orgID: string, checkID: string): Promise<NotificationRule[]>;\r\n    create(notificationRule: NotificationRule): Promise<NotificationRule>;\r\n    update(id: string, notificationRule: Partial<NotificationRule>): Promise<NotificationRule>;\r\n    delete(id: string): Promise<Response>;\r\n}\r\n"}}
