{"code":"import * as tslib_1 from \"tslib\";\r\nimport { TemplatesApi } from '../api';\r\nimport { addLabelDefaults } from './labels';\r\nvar addTemplateDefaults = function (d) {\r\n    var labels = d.labels || [];\r\n    return tslib_1.__assign({}, d, { content: tslib_1.__assign({ data: {}, included: [] }, d.content), labels: labels.map(addLabelDefaults) });\r\n};\r\nvar addTemplateSummaryDefaults = function (d) {\r\n    var labels = d.labels || [];\r\n    return tslib_1.__assign({}, d, { labels: labels.map(addLabelDefaults) });\r\n};\r\nvar default_1 = (function () {\r\n    function default_1(basePath, baseOptions) {\r\n        this.service = new TemplatesApi({ basePath: basePath, baseOptions: baseOptions });\r\n        this.serviceOptions = baseOptions;\r\n    }\r\n    default_1.prototype.getAll = function (orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDocumentsTemplates(undefined, undefined, orgID, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (data.documents) {\r\n                            return [2, data.documents.map(addTemplateSummaryDefaults)];\r\n                        }\r\n                        return [2, []];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.get = function (templateID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDocumentsTemplatesID(templateID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addTemplateDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.update = function (id, props) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var original, data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.get(id)];\r\n                    case 1:\r\n                        original = _a.sent();\r\n                        return [4, this.service.putDocumentsTemplatesID(id, tslib_1.__assign({}, original, props), undefined, this.serviceOptions)];\r\n                    case 2:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addTemplateDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.create = function (templateCreate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postDocumentsTemplates(templateCreate, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, addTemplateDefaults(data)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.delete = function (templateID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteDocumentsTemplatesID(templateID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabel = function (templateID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.postDocumentsTemplatesIDLabels(templateID, {\r\n                            labelID: labelID,\r\n                        }, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        if (!data.label) {\r\n                            throw new Error('Failed to add label');\r\n                        }\r\n                        return [2, addLabelDefaults(data.label)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.removeLabel = function (templateID, labelID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.deleteDocumentsTemplatesIDLabelsID(templateID, labelID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        return [2, data];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    default_1.prototype.addLabels = function (templateID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.addLabel(templateID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    default_1.prototype.removeLabels = function (templateID, labelIDs) {\r\n        var _this = this;\r\n        var promises = labelIDs.map(function (l) { return _this.removeLabel(templateID, l); });\r\n        return Promise.all(promises);\r\n    };\r\n    default_1.prototype.clone = function (templateID, orgID) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var data, content, meta, labels, labelIDs, name, templateToCreate, createdTemplate;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.service.getDocumentsTemplatesID(templateID, undefined, this.serviceOptions)];\r\n                    case 1:\r\n                        data = (_a.sent()).data;\r\n                        content = data.content, meta = data.meta;\r\n                        labels = data.labels || [];\r\n                        labelIDs = labels.map(function (label) { return label.id; });\r\n                        name = meta.name + \" (clone)\";\r\n                        templateToCreate = {\r\n                            meta: tslib_1.__assign({}, meta, { name: name }),\r\n                            content: content,\r\n                            orgID: orgID,\r\n                            labels: labelIDs,\r\n                        };\r\n                        return [4, this.create(templateToCreate)];\r\n                    case 2:\r\n                        createdTemplate = _a.sent();\r\n                        if (!createdTemplate || !createdTemplate.id) {\r\n                            throw new Error('Could not clone template');\r\n                        }\r\n                        return [2, createdTemplate];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return default_1;\r\n}());\r\nexport default default_1;\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/wrappers/templates.d.ts","writeByteOrderMark":false,"text":"import { DocumentCreate } from '../api';\r\nimport { ITemplate, TemplateSummary, ILabel, ServiceOptions } from '../types';\r\nexport default class {\r\n    private service;\r\n    private serviceOptions;\r\n    constructor(basePath: string, baseOptions: ServiceOptions);\r\n    getAll(orgID?: string): Promise<TemplateSummary[]>;\r\n    get(templateID: string): Promise<ITemplate>;\r\n    update(id: string, props: Partial<ITemplate>): Promise<ITemplate>;\r\n    create(templateCreate: DocumentCreate): Promise<ITemplate>;\r\n    delete(templateID: string): Promise<Response>;\r\n    addLabel(templateID: string, labelID: string): Promise<ILabel>;\r\n    removeLabel(templateID: string, labelID: string): Promise<Response>;\r\n    addLabels(templateID: string, labelIDs: string[]): Promise<ILabel[]>;\r\n    removeLabels(templateID: string, labelIDs: string[]): Promise<Response[]>;\r\n    clone(templateID: string, orgID: string): Promise<ITemplate>;\r\n}\r\n"}}
