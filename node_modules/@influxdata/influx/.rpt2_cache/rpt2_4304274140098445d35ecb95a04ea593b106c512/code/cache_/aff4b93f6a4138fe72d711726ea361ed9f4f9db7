{"code":"import * as tslib_1 from \"tslib\";\r\nimport Auth from './wrappers/auth';\r\nimport Authorizations from './wrappers/authorizations';\r\nimport Buckets from './wrappers/buckets';\r\nimport Dashboards from './wrappers/dashboards';\r\nimport Labels from './wrappers/labels';\r\nimport Links from './wrappers/links';\r\nimport Organizations from './wrappers/organizations';\r\nimport Queries from './wrappers/queries';\r\nimport Scrapers from './wrappers/scrapers';\r\nimport Setup from './wrappers/setup';\r\nimport Tasks from './wrappers/tasks';\r\nimport TelegrafConfigs from './wrappers/telegrafConfigs';\r\nimport Users from './wrappers/users';\r\nimport Variables from './wrappers/variables';\r\nimport Write from './wrappers/write';\r\nimport Templates from './wrappers/templates';\r\nexport { CancellationError, LargeResponseError } from './utils/errors';\r\nexport * from './api';\r\nexport * from './types';\r\nvar Client = (function () {\r\n    function Client(basePath, token) {\r\n        var options = {};\r\n        if (token) {\r\n            options = tslib_1.__assign({}, options, { headers: { Authorization: \"Token \" + token } });\r\n        }\r\n        this.auth = new Auth(basePath, options);\r\n        this.authorizations = new Authorizations(basePath, options);\r\n        this.buckets = new Buckets(basePath, options);\r\n        this.dashboards = new Dashboards(basePath, options);\r\n        this.labels = new Labels(basePath, options);\r\n        this.links = new Links(basePath, options);\r\n        this.organizations = new Organizations(basePath, options);\r\n        this.queries = new Queries(basePath, options);\r\n        this.scrapers = new Scrapers(basePath, options);\r\n        this.setup = new Setup(basePath, options);\r\n        this.tasks = new Tasks(basePath, options);\r\n        this.telegrafConfigs = new TelegrafConfigs(basePath, options);\r\n        this.users = new Users(basePath, options);\r\n        this.variables = new Variables(basePath, options);\r\n        this.write = new Write(basePath, options);\r\n        this.templates = new Templates(basePath, options);\r\n    }\r\n    return Client;\r\n}());\r\nexport { Client };\r\n","references":["/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/auth.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/authorizations.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/buckets.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/dashboards.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/labels.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/links.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/organizations.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/queries.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/scrapers.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/setup.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/tasks.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/telegrafConfigs.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/users.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/variables.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/write.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/wrappers/templates.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/utils/errors.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/api/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/index.ts","/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/src/types/ast.ts"],"dts":{"name":"/Users/denizkusefoglu/go/src/github.com/influxdata/influxdb-client-js/index.d.ts","writeByteOrderMark":false,"text":"import Auth from './wrappers/auth';\r\nimport Authorizations from './wrappers/authorizations';\r\nimport Buckets from './wrappers/buckets';\r\nimport Dashboards from './wrappers/dashboards';\r\nimport Labels from './wrappers/labels';\r\nimport Links from './wrappers/links';\r\nimport Organizations from './wrappers/organizations';\r\nimport Queries from './wrappers/queries';\r\nimport Scrapers from './wrappers/scrapers';\r\nimport Setup from './wrappers/setup';\r\nimport Tasks from './wrappers/tasks';\r\nimport TelegrafConfigs from './wrappers/telegrafConfigs';\r\nimport Users from './wrappers/users';\r\nimport Variables from './wrappers/variables';\r\nimport Write from './wrappers/write';\r\nimport Templates from './wrappers/templates';\r\nexport { CancellationError, LargeResponseError } from './utils/errors';\r\nexport * from './api';\r\nexport * from './types';\r\nexport { ArrayExpression, BadStatement, BinaryExpression, Block, BooleanLiteral, BuiltinStatement, CallExpression, ConditionalExpression, DateTimeLiteral, Duration, DurationLiteral, Expression, ExpressionStatement, FloatLiteral, FunctionExpression, Identifier, ImportDeclaration, IndexExpression, IntegerLiteral, LogicalExpression, MemberAssignment, MemberExpression, Node, ObjectExpression, OptionStatement, Package, PackageClause, PipeExpression, PipeLiteral, Property, PropertyKey, RegexpLiteral, ReturnStatement, Statement, StringLiteral, UnaryExpression, UnsignedIntegerLiteral, VariableAssignment, } from './types/ast';\r\nexport declare class Client {\r\n    auth: Auth;\r\n    authorizations: Authorizations;\r\n    buckets: Buckets;\r\n    dashboards: Dashboards;\r\n    labels: Labels;\r\n    links: Links;\r\n    organizations: Organizations;\r\n    queries: Queries;\r\n    scrapers: Scrapers;\r\n    setup: Setup;\r\n    tasks: Tasks;\r\n    telegrafConfigs: TelegrafConfigs;\r\n    users: Users;\r\n    variables: Variables;\r\n    write: Write;\r\n    templates: Templates;\r\n    constructor(basePath: string, token?: string);\r\n}\r\n"}}
